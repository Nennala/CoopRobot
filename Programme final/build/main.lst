ARM GAS  /tmp/ccsAMVNM.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"main.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.MX_GPIO_Init,"ax",%progbits
  22              		.align	2
  23              		.thumb
  24              		.thumb_func
  26              	MX_GPIO_Init:
  27              	.LFB135:
  28              		.file 1 "Src/main.c"
   1:Src/main.c    **** /**
   2:Src/main.c    ****   ******************************************************************************
   3:Src/main.c    ****   * File Name          : main.c
   4:Src/main.c    ****   * Description        : Main program body
   5:Src/main.c    ****   ******************************************************************************
   6:Src/main.c    ****   * This notice applies to any and all portions of this file
   7:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   8:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
   9:Src/main.c    ****   * inserted by the user or by software development tools
  10:Src/main.c    ****   * are owned by their respective copyright owners.
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * Copyright (c) 2017 STMicroelectronics International N.V. 
  13:Src/main.c    ****   * All rights reserved.
  14:Src/main.c    ****   *
  15:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without 
  16:Src/main.c    ****   * modification, are permitted, provided that the following conditions are met:
  17:Src/main.c    ****   *
  18:Src/main.c    ****   * 1. Redistribution of source code must retain the above copyright notice, 
  19:Src/main.c    ****   *    this list of conditions and the following disclaimer.
  20:Src/main.c    ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  21:Src/main.c    ****   *    this list of conditions and the following disclaimer in the documentation
  22:Src/main.c    ****   *    and/or other materials provided with the distribution.
  23:Src/main.c    ****   * 3. Neither the name of STMicroelectronics nor the names of other 
  24:Src/main.c    ****   *    contributors to this software may be used to endorse or promote products 
  25:Src/main.c    ****   *    derived from this software without specific written permission.
  26:Src/main.c    ****   * 4. This software, including modifications and/or derivative works of this 
  27:Src/main.c    ****   *    software, must execute solely and exclusively on microcontroller or
  28:Src/main.c    ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  29:Src/main.c    ****   * 5. Redistribution and use of this software other than as permitted under 
  30:Src/main.c    ****   *    this license is void and will automatically terminate your rights under 
ARM GAS  /tmp/ccsAMVNM.s 			page 2


  31:Src/main.c    ****   *    this license. 
  32:Src/main.c    ****   *
  33:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  34:Src/main.c    ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  35:Src/main.c    ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  36:Src/main.c    ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  37:Src/main.c    ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  38:Src/main.c    ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  39:Src/main.c    ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  40:Src/main.c    ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  41:Src/main.c    ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  42:Src/main.c    ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  43:Src/main.c    ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  44:Src/main.c    ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  45:Src/main.c    ****   *
  46:Src/main.c    ****   ******************************************************************************
  47:Src/main.c    ****   */
  48:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  49:Src/main.c    **** #include "main.h"
  50:Src/main.c    **** #include "stm32f3xx_hal.h"
  51:Src/main.c    **** #include "cmsis_os.h"
  52:Src/main.c    **** 
  53:Src/main.c    **** /* USER CODE BEGIN Includes */
  54:Src/main.c    **** 
  55:Src/main.c    **** /* USER CODE END Includes */
  56:Src/main.c    **** 
  57:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  58:Src/main.c    **** ADC_HandleTypeDef hadc1;
  59:Src/main.c    **** 
  60:Src/main.c    **** TIM_HandleTypeDef htim3;
  61:Src/main.c    **** 
  62:Src/main.c    **** UART_HandleTypeDef huart1;
  63:Src/main.c    **** UART_HandleTypeDef huart2;
  64:Src/main.c    **** 
  65:Src/main.c    **** osThreadId defaultTaskHandle;
  66:Src/main.c    **** osThreadId motor_taskHandle;
  67:Src/main.c    **** osThreadId adc_dma_taskHandle;
  68:Src/main.c    **** osThreadId uart_taskHandle;
  69:Src/main.c    **** 
  70:Src/main.c    **** /* USER CODE BEGIN PV */
  71:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  72:Src/main.c    **** 
  73:Src/main.c    **** /* USER CODE END PV */
  74:Src/main.c    **** 
  75:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  76:Src/main.c    **** void SystemClock_Config(void);
  77:Src/main.c    **** static void MX_GPIO_Init(void);
  78:Src/main.c    **** static void MX_TIM3_Init(void);
  79:Src/main.c    **** static void MX_ADC1_Init(void);
  80:Src/main.c    **** static void MX_USART2_UART_Init(void);
  81:Src/main.c    **** static void MX_USART1_UART_Init(void);
  82:Src/main.c    **** void StartDefaultTask(void const * argument);
  83:Src/main.c    **** void motor(void const * argument);
  84:Src/main.c    **** void adcControl(void const * argument);
  85:Src/main.c    **** void uart(void const * argument);
  86:Src/main.c    ****                                     
  87:Src/main.c    **** void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
ARM GAS  /tmp/ccsAMVNM.s 			page 3


  88:Src/main.c    ****                                 
  89:Src/main.c    **** 
  90:Src/main.c    **** /* USER CODE BEGIN PFP */
  91:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  92:Src/main.c    **** 
  93:Src/main.c    **** /* USER CODE END PFP */
  94:Src/main.c    **** 
  95:Src/main.c    **** /* USER CODE BEGIN 0 */
  96:Src/main.c    **** 
  97:Src/main.c    **** /* USER CODE END 0 */
  98:Src/main.c    **** 
  99:Src/main.c    **** int main(void)
 100:Src/main.c    **** {
 101:Src/main.c    **** 
 102:Src/main.c    ****   /* USER CODE BEGIN 1 */
 103:Src/main.c    **** 
 104:Src/main.c    ****   /* USER CODE END 1 */
 105:Src/main.c    **** 
 106:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
 107:Src/main.c    **** 
 108:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 109:Src/main.c    ****   HAL_Init();
 110:Src/main.c    **** 
 111:Src/main.c    ****   /* USER CODE BEGIN Init */
 112:Src/main.c    **** 
 113:Src/main.c    ****   /* USER CODE END Init */
 114:Src/main.c    **** 
 115:Src/main.c    ****   /* Configure the system clock */
 116:Src/main.c    ****   SystemClock_Config();
 117:Src/main.c    **** 
 118:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 119:Src/main.c    **** 
 120:Src/main.c    ****   /* USER CODE END SysInit */
 121:Src/main.c    **** 
 122:Src/main.c    ****   /* Initialize all configured peripherals */
 123:Src/main.c    ****   MX_GPIO_Init();
 124:Src/main.c    ****   MX_TIM3_Init();
 125:Src/main.c    ****   MX_ADC1_Init();
 126:Src/main.c    ****   MX_USART2_UART_Init();
 127:Src/main.c    ****   MX_USART1_UART_Init();
 128:Src/main.c    **** 
 129:Src/main.c    ****   /* USER CODE BEGIN 2 */
 130:Src/main.c    **** 
 131:Src/main.c    ****   /* USER CODE END 2 */
 132:Src/main.c    **** 
 133:Src/main.c    ****   /* USER CODE BEGIN RTOS_MUTEX */
 134:Src/main.c    ****   /* add mutexes, ... */
 135:Src/main.c    ****   /* USER CODE END RTOS_MUTEX */
 136:Src/main.c    **** 
 137:Src/main.c    ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 138:Src/main.c    ****   /* add semaphores, ... */
 139:Src/main.c    ****   /* USER CODE END RTOS_SEMAPHORES */
 140:Src/main.c    **** 
 141:Src/main.c    ****   /* USER CODE BEGIN RTOS_TIMERS */
 142:Src/main.c    ****   /* start timers, add new ones, ... */
 143:Src/main.c    ****   /* USER CODE END RTOS_TIMERS */
 144:Src/main.c    **** 
ARM GAS  /tmp/ccsAMVNM.s 			page 4


 145:Src/main.c    ****   /* Create the thread(s) */
 146:Src/main.c    ****   /* definition and creation of defaultTask */
 147:Src/main.c    ****   osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 148:Src/main.c    ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 149:Src/main.c    **** 
 150:Src/main.c    ****   /* definition and creation of motor_task */
 151:Src/main.c    ****   osThreadDef(motor_task, motor, osPriorityIdle, 0, 256);
 152:Src/main.c    ****   motor_taskHandle = osThreadCreate(osThread(motor_task), NULL);
 153:Src/main.c    **** 
 154:Src/main.c    ****   /* definition and creation of adc_dma_task */
 155:Src/main.c    ****   osThreadDef(adc_dma_task, adcControl, osPriorityIdle, 0, 256);
 156:Src/main.c    ****   adc_dma_taskHandle = osThreadCreate(osThread(adc_dma_task), NULL);
 157:Src/main.c    **** 
 158:Src/main.c    ****   /* definition and creation of uart_task */
 159:Src/main.c    ****   osThreadDef(uart_task, uart, osPriorityIdle, 0, 256);
 160:Src/main.c    ****   uart_taskHandle = osThreadCreate(osThread(uart_task), NULL);
 161:Src/main.c    **** 
 162:Src/main.c    ****   /* USER CODE BEGIN RTOS_THREADS */
 163:Src/main.c    ****   /* add threads, ... */
 164:Src/main.c    ****   /* USER CODE END RTOS_THREADS */
 165:Src/main.c    **** 
 166:Src/main.c    ****   /* USER CODE BEGIN RTOS_QUEUES */
 167:Src/main.c    ****   /* add queues, ... */
 168:Src/main.c    ****   /* USER CODE END RTOS_QUEUES */
 169:Src/main.c    ****  
 170:Src/main.c    **** 
 171:Src/main.c    ****   /* Start scheduler */
 172:Src/main.c    ****   osKernelStart();
 173:Src/main.c    ****   
 174:Src/main.c    ****   /* We should never get here as control is now taken by the scheduler */
 175:Src/main.c    **** 
 176:Src/main.c    ****   /* Infinite loop */
 177:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 178:Src/main.c    ****   while (1)
 179:Src/main.c    ****   {
 180:Src/main.c    ****   /* USER CODE END WHILE */
 181:Src/main.c    **** 
 182:Src/main.c    ****   /* USER CODE BEGIN 3 */
 183:Src/main.c    **** 
 184:Src/main.c    ****   }
 185:Src/main.c    ****   /* USER CODE END 3 */
 186:Src/main.c    **** 
 187:Src/main.c    **** }
 188:Src/main.c    **** 
 189:Src/main.c    **** /** System Clock Configuration
 190:Src/main.c    **** */
 191:Src/main.c    **** void SystemClock_Config(void)
 192:Src/main.c    **** {
 193:Src/main.c    **** 
 194:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 195:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 196:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit;
 197:Src/main.c    **** 
 198:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 199:Src/main.c    ****     */
 200:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 201:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
ARM GAS  /tmp/ccsAMVNM.s 			page 5


 202:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 203:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 204:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 205:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 206:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 207:Src/main.c    ****   {
 208:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 209:Src/main.c    ****   }
 210:Src/main.c    **** 
 211:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 212:Src/main.c    ****     */
 213:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 214:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 215:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 216:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 217:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 218:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 219:Src/main.c    **** 
 220:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 221:Src/main.c    ****   {
 222:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 223:Src/main.c    ****   }
 224:Src/main.c    **** 
 225:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12;
 226:Src/main.c    ****   PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 227:Src/main.c    ****   PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 228:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 229:Src/main.c    ****   {
 230:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 231:Src/main.c    ****   }
 232:Src/main.c    **** 
 233:Src/main.c    ****     /**Configure the Systick interrupt time 
 234:Src/main.c    ****     */
 235:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 236:Src/main.c    **** 
 237:Src/main.c    ****     /**Configure the Systick 
 238:Src/main.c    ****     */
 239:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 240:Src/main.c    **** 
 241:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 242:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 243:Src/main.c    **** }
 244:Src/main.c    **** 
 245:Src/main.c    **** /* ADC1 init function */
 246:Src/main.c    **** static void MX_ADC1_Init(void)
 247:Src/main.c    **** {
 248:Src/main.c    **** 
 249:Src/main.c    ****   ADC_MultiModeTypeDef multimode;
 250:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig;
 251:Src/main.c    **** 
 252:Src/main.c    ****     /**Common config 
 253:Src/main.c    ****     */
 254:Src/main.c    ****   hadc1.Instance = ADC1;
 255:Src/main.c    ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 256:Src/main.c    ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 257:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 258:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
ARM GAS  /tmp/ccsAMVNM.s 			page 6


 259:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 260:Src/main.c    ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 261:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 262:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 263:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
 264:Src/main.c    ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 265:Src/main.c    ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 266:Src/main.c    ****   hadc1.Init.LowPowerAutoWait = DISABLE;
 267:Src/main.c    ****   hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 268:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 269:Src/main.c    ****   {
 270:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 271:Src/main.c    ****   }
 272:Src/main.c    **** 
 273:Src/main.c    ****     /**Configure the ADC multi-mode 
 274:Src/main.c    ****     */
 275:Src/main.c    ****   multimode.Mode = ADC_MODE_INDEPENDENT;
 276:Src/main.c    ****   if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 277:Src/main.c    ****   {
 278:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 279:Src/main.c    ****   }
 280:Src/main.c    **** 
 281:Src/main.c    ****     /**Configure Regular Channel 
 282:Src/main.c    ****     */
 283:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_1;
 284:Src/main.c    ****   sConfig.Rank = 1;
 285:Src/main.c    ****   sConfig.SingleDiff = ADC_SINGLE_ENDED;
 286:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 287:Src/main.c    ****   sConfig.OffsetNumber = ADC_OFFSET_NONE;
 288:Src/main.c    ****   sConfig.Offset = 0;
 289:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 290:Src/main.c    ****   {
 291:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 292:Src/main.c    ****   }
 293:Src/main.c    **** 
 294:Src/main.c    **** }
 295:Src/main.c    **** 
 296:Src/main.c    **** /* TIM3 init function */
 297:Src/main.c    **** static void MX_TIM3_Init(void)
 298:Src/main.c    **** {
 299:Src/main.c    **** 
 300:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig;
 301:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC;
 302:Src/main.c    **** 
 303:Src/main.c    ****   htim3.Instance = TIM3;
 304:Src/main.c    ****   htim3.Init.Prescaler = 999;
 305:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 306:Src/main.c    ****   htim3.Init.Period = 639;
 307:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 308:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 309:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 310:Src/main.c    ****   {
 311:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 312:Src/main.c    ****   }
 313:Src/main.c    **** 
 314:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 315:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
ARM GAS  /tmp/ccsAMVNM.s 			page 7


 316:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 317:Src/main.c    ****   {
 318:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 319:Src/main.c    ****   }
 320:Src/main.c    **** 
 321:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 322:Src/main.c    ****   sConfigOC.Pulse = 319;
 323:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 324:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 325:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 326:Src/main.c    ****   {
 327:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 328:Src/main.c    ****   }
 329:Src/main.c    **** 
 330:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 331:Src/main.c    ****   {
 332:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 333:Src/main.c    ****   }
 334:Src/main.c    **** 
 335:Src/main.c    ****   HAL_TIM_MspPostInit(&htim3);
 336:Src/main.c    **** 
 337:Src/main.c    **** }
 338:Src/main.c    **** 
 339:Src/main.c    **** /* USART1 init function */
 340:Src/main.c    **** static void MX_USART1_UART_Init(void)
 341:Src/main.c    **** {
 342:Src/main.c    **** 
 343:Src/main.c    ****   huart1.Instance = USART1;
 344:Src/main.c    ****   huart1.Init.BaudRate = 38400;
 345:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_7B;
 346:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 347:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 348:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 349:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 350:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 351:Src/main.c    ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 352:Src/main.c    ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 353:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 354:Src/main.c    ****   {
 355:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 356:Src/main.c    ****   }
 357:Src/main.c    **** 
 358:Src/main.c    **** }
 359:Src/main.c    **** 
 360:Src/main.c    **** /* USART2 init function */
 361:Src/main.c    **** static void MX_USART2_UART_Init(void)
 362:Src/main.c    **** {
 363:Src/main.c    **** 
 364:Src/main.c    ****   huart2.Instance = USART2;
 365:Src/main.c    ****   huart2.Init.BaudRate = 38400;
 366:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 367:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 368:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 369:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 370:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 371:Src/main.c    ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 372:Src/main.c    ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
ARM GAS  /tmp/ccsAMVNM.s 			page 8


 373:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 374:Src/main.c    ****   {
 375:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 376:Src/main.c    ****   }
 377:Src/main.c    **** 
 378:Src/main.c    **** }
 379:Src/main.c    **** 
 380:Src/main.c    **** /** Configure pins as 
 381:Src/main.c    ****         * Analog 
 382:Src/main.c    ****         * Input 
 383:Src/main.c    ****         * Output
 384:Src/main.c    ****         * EVENT_OUT
 385:Src/main.c    ****         * EXTI
 386:Src/main.c    **** */
 387:Src/main.c    **** static void MX_GPIO_Init(void)
 388:Src/main.c    **** {
  29              		.loc 1 388 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 32
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 20
  36              		.cfi_offset 4, -20
  37              		.cfi_offset 5, -16
  38              		.cfi_offset 6, -12
  39              		.cfi_offset 7, -8
  40              		.cfi_offset 14, -4
  41 0002 89B0     		sub	sp, sp, #36
  42              	.LCFI1:
  43              		.cfi_def_cfa_offset 56
  44              	.LBB2:
 389:Src/main.c    **** 
 390:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct;
 391:Src/main.c    **** 
 392:Src/main.c    ****   /* GPIO Ports Clock Enable */
 393:Src/main.c    ****   __HAL_RCC_GPIOF_CLK_ENABLE();
  45              		.loc 1 393 0
  46 0004 2C4B     		ldr	r3, .L3
  47 0006 5A69     		ldr	r2, [r3, #20]
  48 0008 42F48002 		orr	r2, r2, #4194304
  49 000c 5A61     		str	r2, [r3, #20]
  50 000e 5A69     		ldr	r2, [r3, #20]
  51 0010 02F48002 		and	r2, r2, #4194304
  52 0014 0092     		str	r2, [sp]
  53 0016 009A     		ldr	r2, [sp]
  54              	.LBE2:
  55              	.LBB3:
 394:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  56              		.loc 1 394 0
  57 0018 5A69     		ldr	r2, [r3, #20]
  58 001a 42F40032 		orr	r2, r2, #131072
  59 001e 5A61     		str	r2, [r3, #20]
  60 0020 5A69     		ldr	r2, [r3, #20]
  61 0022 02F40032 		and	r2, r2, #131072
  62 0026 0192     		str	r2, [sp, #4]
  63 0028 019A     		ldr	r2, [sp, #4]
ARM GAS  /tmp/ccsAMVNM.s 			page 9


  64              	.LBE3:
  65              	.LBB4:
 395:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  66              		.loc 1 395 0
  67 002a 5A69     		ldr	r2, [r3, #20]
  68 002c 42F48022 		orr	r2, r2, #262144
  69 0030 5A61     		str	r2, [r3, #20]
  70 0032 5B69     		ldr	r3, [r3, #20]
  71 0034 03F48023 		and	r3, r3, #262144
  72 0038 0293     		str	r3, [sp, #8]
  73 003a 029B     		ldr	r3, [sp, #8]
  74              	.LBE4:
 396:Src/main.c    **** 
 397:Src/main.c    ****   /*Configure GPIO pin Output Level */
 398:Src/main.c    ****   HAL_GPIO_WritePin(GPIOF, ain2_Pin|ain1_Pin, GPIO_PIN_RESET);
  75              		.loc 1 398 0
  76 003c 1F4F     		ldr	r7, .L3+4
  77 003e 0022     		movs	r2, #0
  78 0040 0321     		movs	r1, #3
  79 0042 3846     		mov	r0, r7
  80 0044 FFF7FEFF 		bl	HAL_GPIO_WritePin
  81              	.LVL0:
 399:Src/main.c    **** 
 400:Src/main.c    ****   /*Configure GPIO pin Output Level */
 401:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, stby_Pin|bin1_Pin, GPIO_PIN_RESET);
  82              		.loc 1 401 0
  83 0048 0022     		movs	r2, #0
  84 004a 4FF41061 		mov	r1, #2304
  85 004e 4FF09040 		mov	r0, #1207959552
  86 0052 FFF7FEFF 		bl	HAL_GPIO_WritePin
  87              	.LVL1:
 402:Src/main.c    **** 
 403:Src/main.c    ****   /*Configure GPIO pin Output Level */
 404:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, led_sys_Pin|bin2_Pin|led_Pin, GPIO_PIN_RESET);
  88              		.loc 1 404 0
  89 0056 1A4D     		ldr	r5, .L3+8
  90 0058 0022     		movs	r2, #0
  91 005a 6821     		movs	r1, #104
  92 005c 2846     		mov	r0, r5
  93 005e FFF7FEFF 		bl	HAL_GPIO_WritePin
  94              	.LVL2:
 405:Src/main.c    **** 
 406:Src/main.c    ****   /*Configure GPIO pins : ain2_Pin ain1_Pin */
 407:Src/main.c    ****   GPIO_InitStruct.Pin = ain2_Pin|ain1_Pin;
  95              		.loc 1 407 0
  96 0062 0323     		movs	r3, #3
  97 0064 0393     		str	r3, [sp, #12]
 408:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  98              		.loc 1 408 0
  99 0066 0126     		movs	r6, #1
 100 0068 0496     		str	r6, [sp, #16]
 409:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 101              		.loc 1 409 0
 102 006a 0024     		movs	r4, #0
 103 006c 0594     		str	r4, [sp, #20]
 410:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 104              		.loc 1 410 0
ARM GAS  /tmp/ccsAMVNM.s 			page 10


 105 006e 0694     		str	r4, [sp, #24]
 411:Src/main.c    ****   HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 106              		.loc 1 411 0
 107 0070 03A9     		add	r1, sp, #12
 108 0072 3846     		mov	r0, r7
 109 0074 FFF7FEFF 		bl	HAL_GPIO_Init
 110              	.LVL3:
 412:Src/main.c    **** 
 413:Src/main.c    ****   /*Configure GPIO pins : stby_Pin bin1_Pin */
 414:Src/main.c    ****   GPIO_InitStruct.Pin = stby_Pin|bin1_Pin;
 111              		.loc 1 414 0
 112 0078 4FF41063 		mov	r3, #2304
 113 007c 0393     		str	r3, [sp, #12]
 415:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 114              		.loc 1 415 0
 115 007e 0496     		str	r6, [sp, #16]
 416:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 116              		.loc 1 416 0
 117 0080 0594     		str	r4, [sp, #20]
 417:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 118              		.loc 1 417 0
 119 0082 0694     		str	r4, [sp, #24]
 418:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 120              		.loc 1 418 0
 121 0084 03A9     		add	r1, sp, #12
 122 0086 4FF09040 		mov	r0, #1207959552
 123 008a FFF7FEFF 		bl	HAL_GPIO_Init
 124              	.LVL4:
 419:Src/main.c    **** 
 420:Src/main.c    ****   /*Configure GPIO pins : led_sys_Pin bin2_Pin */
 421:Src/main.c    ****   GPIO_InitStruct.Pin = led_sys_Pin|bin2_Pin;
 125              		.loc 1 421 0
 126 008e 2823     		movs	r3, #40
 127 0090 0393     		str	r3, [sp, #12]
 422:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 128              		.loc 1 422 0
 129 0092 0496     		str	r6, [sp, #16]
 423:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 130              		.loc 1 423 0
 131 0094 0594     		str	r4, [sp, #20]
 424:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 132              		.loc 1 424 0
 133 0096 0694     		str	r4, [sp, #24]
 425:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 134              		.loc 1 425 0
 135 0098 03A9     		add	r1, sp, #12
 136 009a 2846     		mov	r0, r5
 137 009c FFF7FEFF 		bl	HAL_GPIO_Init
 138              	.LVL5:
 426:Src/main.c    **** 
 427:Src/main.c    ****   /*Configure GPIO pin : led_Pin */
 428:Src/main.c    ****   GPIO_InitStruct.Pin = led_Pin;
 139              		.loc 1 428 0
 140 00a0 4023     		movs	r3, #64
 141 00a2 0393     		str	r3, [sp, #12]
 429:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 142              		.loc 1 429 0
ARM GAS  /tmp/ccsAMVNM.s 			page 11


 143 00a4 1123     		movs	r3, #17
 144 00a6 0493     		str	r3, [sp, #16]
 430:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 145              		.loc 1 430 0
 146 00a8 0594     		str	r4, [sp, #20]
 431:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 147              		.loc 1 431 0
 148 00aa 0694     		str	r4, [sp, #24]
 432:Src/main.c    ****   HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 149              		.loc 1 432 0
 150 00ac 03A9     		add	r1, sp, #12
 151 00ae 2846     		mov	r0, r5
 152 00b0 FFF7FEFF 		bl	HAL_GPIO_Init
 153              	.LVL6:
 433:Src/main.c    **** 
 434:Src/main.c    **** }
 154              		.loc 1 434 0
 155 00b4 09B0     		add	sp, sp, #36
 156              	.LCFI2:
 157              		.cfi_def_cfa_offset 20
 158              		@ sp needed
 159 00b6 F0BD     		pop	{r4, r5, r6, r7, pc}
 160              	.L4:
 161              		.align	2
 162              	.L3:
 163 00b8 00100240 		.word	1073876992
 164 00bc 00140048 		.word	1207964672
 165 00c0 00040048 		.word	1207960576
 166              		.cfi_endproc
 167              	.LFE135:
 169              		.section	.text.StartDefaultTask,"ax",%progbits
 170              		.align	2
 171              		.global	StartDefaultTask
 172              		.thumb
 173              		.thumb_func
 175              	StartDefaultTask:
 176              	.LFB136:
 435:Src/main.c    **** 
 436:Src/main.c    **** /* USER CODE BEGIN 4 */
 437:Src/main.c    **** 
 438:Src/main.c    **** /* USER CODE END 4 */
 439:Src/main.c    **** 
 440:Src/main.c    **** /* StartDefaultTask function */
 441:Src/main.c    **** void StartDefaultTask(void const * argument)
 442:Src/main.c    **** {
 177              		.loc 1 442 0
 178              		.cfi_startproc
 179              		@ Volatile: function does not return.
 180              		@ args = 0, pretend = 0, frame = 0
 181              		@ frame_needed = 0, uses_anonymous_args = 0
 182              	.LVL7:
 183 0000 08B5     		push	{r3, lr}
 184              	.LCFI3:
 185              		.cfi_def_cfa_offset 8
 186              		.cfi_offset 3, -8
 187              		.cfi_offset 14, -4
 188              	.LVL8:
ARM GAS  /tmp/ccsAMVNM.s 			page 12


 189              	.L6:
 443:Src/main.c    **** 
 444:Src/main.c    ****   /* USER CODE BEGIN 5 */
 445:Src/main.c    ****   /* Infinite loop */
 446:Src/main.c    ****   for(;;)
 447:Src/main.c    ****   {
 448:Src/main.c    ****     HAL_GPIO_TogglePin(led_sys_GPIO_Port, led_sys_Pin);
 190              		.loc 1 448 0 discriminator 1
 191 0002 0821     		movs	r1, #8
 192 0004 0348     		ldr	r0, .L8
 193 0006 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 194              	.LVL9:
 449:Src/main.c    ****     osDelay(1000);
 195              		.loc 1 449 0 discriminator 1
 196 000a 4FF47A70 		mov	r0, #1000
 197 000e FFF7FEFF 		bl	osDelay
 198              	.LVL10:
 199 0012 F6E7     		b	.L6
 200              	.L9:
 201              		.align	2
 202              	.L8:
 203 0014 00040048 		.word	1207960576
 204              		.cfi_endproc
 205              	.LFE136:
 207              		.section	.text.motor,"ax",%progbits
 208              		.align	2
 209              		.weak	motor
 210              		.thumb
 211              		.thumb_func
 213              	motor:
 214              	.LFB137:
 450:Src/main.c    ****   }
 451:Src/main.c    ****   /* USER CODE END 5 */ 
 452:Src/main.c    **** }
 453:Src/main.c    **** 
 454:Src/main.c    **** /* motor function */
 455:Src/main.c    **** __weak void motor(void const * argument)
 456:Src/main.c    **** {
 215              		.loc 1 456 0
 216              		.cfi_startproc
 217              		@ args = 0, pretend = 0, frame = 0
 218              		@ frame_needed = 0, uses_anonymous_args = 0
 219              	.LVL11:
 220 0000 08B5     		push	{r3, lr}
 221              	.LCFI4:
 222              		.cfi_def_cfa_offset 8
 223              		.cfi_offset 3, -8
 224              		.cfi_offset 14, -4
 225              	.LVL12:
 226              	.L11:
 457:Src/main.c    ****   /* USER CODE BEGIN motor */
 458:Src/main.c    ****   /* Infinite loop */
 459:Src/main.c    ****   for(;;)
 460:Src/main.c    ****   {
 461:Src/main.c    ****     osDelay(1);
 227              		.loc 1 461 0 discriminator 1
 228 0002 0120     		movs	r0, #1
ARM GAS  /tmp/ccsAMVNM.s 			page 13


 229 0004 FFF7FEFF 		bl	osDelay
 230              	.LVL13:
 231 0008 FBE7     		b	.L11
 232              		.cfi_endproc
 233              	.LFE137:
 235 000a 00BF     		.section	.text.adcControl,"ax",%progbits
 236              		.align	2
 237              		.weak	adcControl
 238              		.thumb
 239              		.thumb_func
 241              	adcControl:
 242              	.LFB138:
 462:Src/main.c    ****   }
 463:Src/main.c    ****   /* USER CODE END motor */
 464:Src/main.c    **** }
 465:Src/main.c    **** 
 466:Src/main.c    **** /* adcControl function */
 467:Src/main.c    **** __weak void adcControl(void const * argument)
 468:Src/main.c    **** {
 243              		.loc 1 468 0
 244              		.cfi_startproc
 245              		@ args = 0, pretend = 0, frame = 0
 246              		@ frame_needed = 0, uses_anonymous_args = 0
 247              	.LVL14:
 248 0000 08B5     		push	{r3, lr}
 249              	.LCFI5:
 250              		.cfi_def_cfa_offset 8
 251              		.cfi_offset 3, -8
 252              		.cfi_offset 14, -4
 253              	.LVL15:
 254              	.L14:
 469:Src/main.c    ****   /* USER CODE BEGIN adcControl */
 470:Src/main.c    ****   /* Infinite loop */
 471:Src/main.c    ****   for(;;)
 472:Src/main.c    ****   {
 473:Src/main.c    ****     osDelay(1);
 255              		.loc 1 473 0 discriminator 1
 256 0002 0120     		movs	r0, #1
 257 0004 FFF7FEFF 		bl	osDelay
 258              	.LVL16:
 259 0008 FBE7     		b	.L14
 260              		.cfi_endproc
 261              	.LFE138:
 263 000a 00BF     		.section	.text.uart,"ax",%progbits
 264              		.align	2
 265              		.weak	uart
 266              		.thumb
 267              		.thumb_func
 269              	uart:
 270              	.LFB139:
 474:Src/main.c    ****   }
 475:Src/main.c    ****   /* USER CODE END adcControl */
 476:Src/main.c    **** }
 477:Src/main.c    **** 
 478:Src/main.c    **** /* uart function */
 479:Src/main.c    **** __weak void uart(void const * argument)
 480:Src/main.c    **** {
ARM GAS  /tmp/ccsAMVNM.s 			page 14


 271              		.loc 1 480 0
 272              		.cfi_startproc
 273              		@ args = 0, pretend = 0, frame = 0
 274              		@ frame_needed = 0, uses_anonymous_args = 0
 275              	.LVL17:
 276 0000 08B5     		push	{r3, lr}
 277              	.LCFI6:
 278              		.cfi_def_cfa_offset 8
 279              		.cfi_offset 3, -8
 280              		.cfi_offset 14, -4
 281              	.LVL18:
 282              	.L17:
 481:Src/main.c    ****   /* USER CODE BEGIN uart */
 482:Src/main.c    ****   /* Infinite loop */
 483:Src/main.c    ****   for(;;)
 484:Src/main.c    ****   {
 485:Src/main.c    ****     osDelay(1);
 283              		.loc 1 485 0 discriminator 1
 284 0002 0120     		movs	r0, #1
 285 0004 FFF7FEFF 		bl	osDelay
 286              	.LVL19:
 287 0008 FBE7     		b	.L17
 288              		.cfi_endproc
 289              	.LFE139:
 291 000a 00BF     		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 292              		.align	2
 293              		.global	HAL_TIM_PeriodElapsedCallback
 294              		.thumb
 295              		.thumb_func
 297              	HAL_TIM_PeriodElapsedCallback:
 298              	.LFB140:
 486:Src/main.c    ****   }
 487:Src/main.c    ****   /* USER CODE END uart */
 488:Src/main.c    **** }
 489:Src/main.c    **** 
 490:Src/main.c    **** /**
 491:Src/main.c    ****   * @brief  Period elapsed callback in non blocking mode
 492:Src/main.c    ****   * @note   This function is called  when TIM15 interrupt took place, inside
 493:Src/main.c    ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 494:Src/main.c    ****   * a global variable "uwTick" used as application time base.
 495:Src/main.c    ****   * @param  htim : TIM handle
 496:Src/main.c    ****   * @retval None
 497:Src/main.c    ****   */
 498:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 499:Src/main.c    **** {
 299              		.loc 1 499 0
 300              		.cfi_startproc
 301              		@ args = 0, pretend = 0, frame = 0
 302              		@ frame_needed = 0, uses_anonymous_args = 0
 303              	.LVL20:
 304 0000 08B5     		push	{r3, lr}
 305              	.LCFI7:
 306              		.cfi_def_cfa_offset 8
 307              		.cfi_offset 3, -8
 308              		.cfi_offset 14, -4
 500:Src/main.c    **** /* USER CODE BEGIN Callback 0 */
 501:Src/main.c    **** 
ARM GAS  /tmp/ccsAMVNM.s 			page 15


 502:Src/main.c    **** /* USER CODE END Callback 0 */
 503:Src/main.c    ****   if (htim->Instance == TIM15) {
 309              		.loc 1 503 0
 310 0002 0268     		ldr	r2, [r0]
 311 0004 024B     		ldr	r3, .L22
 312 0006 9A42     		cmp	r2, r3
 313 0008 01D1     		bne	.L19
 504:Src/main.c    ****     HAL_IncTick();
 314              		.loc 1 504 0
 315 000a FFF7FEFF 		bl	HAL_IncTick
 316              	.LVL21:
 317              	.L19:
 318 000e 08BD     		pop	{r3, pc}
 319              	.L23:
 320              		.align	2
 321              	.L22:
 322 0010 00400140 		.word	1073823744
 323              		.cfi_endproc
 324              	.LFE140:
 326              		.section	.text._Error_Handler,"ax",%progbits
 327              		.align	2
 328              		.global	_Error_Handler
 329              		.thumb
 330              		.thumb_func
 332              	_Error_Handler:
 333              	.LFB141:
 505:Src/main.c    ****   }
 506:Src/main.c    **** /* USER CODE BEGIN Callback 1 */
 507:Src/main.c    **** 
 508:Src/main.c    **** /* USER CODE END Callback 1 */
 509:Src/main.c    **** }
 510:Src/main.c    **** 
 511:Src/main.c    **** /**
 512:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 513:Src/main.c    ****   * @param  None
 514:Src/main.c    ****   * @retval None
 515:Src/main.c    ****   */
 516:Src/main.c    **** void _Error_Handler(char * file, int line)
 517:Src/main.c    **** {
 334              		.loc 1 517 0
 335              		.cfi_startproc
 336              		@ Volatile: function does not return.
 337              		@ args = 0, pretend = 0, frame = 0
 338              		@ frame_needed = 0, uses_anonymous_args = 0
 339              		@ link register save eliminated.
 340              	.LVL22:
 341              	.L25:
 342 0000 FEE7     		b	.L25
 343              		.cfi_endproc
 344              	.LFE141:
 346 0002 00BF     		.section	.text.MX_TIM3_Init,"ax",%progbits
 347              		.align	2
 348              		.thumb
 349              		.thumb_func
 351              	MX_TIM3_Init:
 352              	.LFB132:
 298:Src/main.c    **** 
ARM GAS  /tmp/ccsAMVNM.s 			page 16


 353              		.loc 1 298 0
 354              		.cfi_startproc
 355              		@ args = 0, pretend = 0, frame = 40
 356              		@ frame_needed = 0, uses_anonymous_args = 0
 298:Src/main.c    **** 
 357              		.loc 1 298 0
 358 0000 00B5     		push	{lr}
 359              	.LCFI8:
 360              		.cfi_def_cfa_offset 4
 361              		.cfi_offset 14, -4
 362 0002 8BB0     		sub	sp, sp, #44
 363              	.LCFI9:
 364              		.cfi_def_cfa_offset 48
 303:Src/main.c    ****   htim3.Init.Prescaler = 999;
 365              		.loc 1 303 0
 366 0004 2248     		ldr	r0, .L32
 367 0006 234B     		ldr	r3, .L32+4
 368 0008 0360     		str	r3, [r0]
 304:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 369              		.loc 1 304 0
 370 000a 40F2E733 		movw	r3, #999
 371 000e 4360     		str	r3, [r0, #4]
 305:Src/main.c    ****   htim3.Init.Period = 639;
 372              		.loc 1 305 0
 373 0010 0023     		movs	r3, #0
 374 0012 8360     		str	r3, [r0, #8]
 306:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 375              		.loc 1 306 0
 376 0014 40F27F22 		movw	r2, #639
 377 0018 C260     		str	r2, [r0, #12]
 307:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 378              		.loc 1 307 0
 379 001a 0361     		str	r3, [r0, #16]
 308:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 380              		.loc 1 308 0
 381 001c 8361     		str	r3, [r0, #24]
 309:Src/main.c    ****   {
 382              		.loc 1 309 0
 383 001e FFF7FEFF 		bl	HAL_TIM_PWM_Init
 384              	.LVL23:
 385 0022 20B1     		cbz	r0, .L27
 311:Src/main.c    ****   }
 386              		.loc 1 311 0
 387 0024 40F23711 		movw	r1, #311
 388 0028 1B48     		ldr	r0, .L32+8
 389 002a FFF7FEFF 		bl	_Error_Handler
 390              	.LVL24:
 391              	.L27:
 314:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 392              		.loc 1 314 0
 393 002e 0023     		movs	r3, #0
 394 0030 0793     		str	r3, [sp, #28]
 315:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 395              		.loc 1 315 0
 396 0032 0993     		str	r3, [sp, #36]
 316:Src/main.c    ****   {
 397              		.loc 1 316 0
ARM GAS  /tmp/ccsAMVNM.s 			page 17


 398 0034 07A9     		add	r1, sp, #28
 399 0036 1648     		ldr	r0, .L32
 400 0038 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 401              	.LVL25:
 402 003c 20B1     		cbz	r0, .L28
 318:Src/main.c    ****   }
 403              		.loc 1 318 0
 404 003e 4FF49F71 		mov	r1, #318
 405 0042 1548     		ldr	r0, .L32+8
 406 0044 FFF7FEFF 		bl	_Error_Handler
 407              	.LVL26:
 408              	.L28:
 321:Src/main.c    ****   sConfigOC.Pulse = 319;
 409              		.loc 1 321 0
 410 0048 6023     		movs	r3, #96
 411 004a 0093     		str	r3, [sp]
 322:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 412              		.loc 1 322 0
 413 004c 40F23F13 		movw	r3, #319
 414 0050 0193     		str	r3, [sp, #4]
 323:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 415              		.loc 1 323 0
 416 0052 0022     		movs	r2, #0
 417 0054 0292     		str	r2, [sp, #8]
 324:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 418              		.loc 1 324 0
 419 0056 0492     		str	r2, [sp, #16]
 325:Src/main.c    ****   {
 420              		.loc 1 325 0
 421 0058 6946     		mov	r1, sp
 422 005a 0D48     		ldr	r0, .L32
 423 005c FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 424              	.LVL27:
 425 0060 20B1     		cbz	r0, .L29
 327:Src/main.c    ****   }
 426              		.loc 1 327 0
 427 0062 40F24711 		movw	r1, #327
 428 0066 0C48     		ldr	r0, .L32+8
 429 0068 FFF7FEFF 		bl	_Error_Handler
 430              	.LVL28:
 431              	.L29:
 330:Src/main.c    ****   {
 432              		.loc 1 330 0
 433 006c 0C22     		movs	r2, #12
 434 006e 6946     		mov	r1, sp
 435 0070 0748     		ldr	r0, .L32
 436 0072 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 437              	.LVL29:
 438 0076 20B1     		cbz	r0, .L30
 332:Src/main.c    ****   }
 439              		.loc 1 332 0
 440 0078 4FF4A671 		mov	r1, #332
 441 007c 0648     		ldr	r0, .L32+8
 442 007e FFF7FEFF 		bl	_Error_Handler
 443              	.LVL30:
 444              	.L30:
 335:Src/main.c    **** 
ARM GAS  /tmp/ccsAMVNM.s 			page 18


 445              		.loc 1 335 0
 446 0082 0348     		ldr	r0, .L32
 447 0084 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 448              	.LVL31:
 337:Src/main.c    **** 
 449              		.loc 1 337 0
 450 0088 0BB0     		add	sp, sp, #44
 451              	.LCFI10:
 452              		.cfi_def_cfa_offset 4
 453              		@ sp needed
 454 008a 5DF804FB 		ldr	pc, [sp], #4
 455              	.L33:
 456 008e 00BF     		.align	2
 457              	.L32:
 458 0090 00000000 		.word	htim3
 459 0094 00040040 		.word	1073742848
 460 0098 00000000 		.word	.LC8
 461              		.cfi_endproc
 462              	.LFE132:
 464              		.section	.text.MX_ADC1_Init,"ax",%progbits
 465              		.align	2
 466              		.thumb
 467              		.thumb_func
 469              	MX_ADC1_Init:
 470              	.LFB131:
 247:Src/main.c    **** 
 471              		.loc 1 247 0
 472              		.cfi_startproc
 473              		@ args = 0, pretend = 0, frame = 40
 474              		@ frame_needed = 0, uses_anonymous_args = 0
 475 0000 00B5     		push	{lr}
 476              	.LCFI11:
 477              		.cfi_def_cfa_offset 4
 478              		.cfi_offset 14, -4
 479 0002 8BB0     		sub	sp, sp, #44
 480              	.LCFI12:
 481              		.cfi_def_cfa_offset 48
 254:Src/main.c    ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 482              		.loc 1 254 0
 483 0004 1F48     		ldr	r0, .L39
 484 0006 4FF0A043 		mov	r3, #1342177280
 485 000a 0360     		str	r3, [r0]
 255:Src/main.c    ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 486              		.loc 1 255 0
 487 000c 0023     		movs	r3, #0
 488 000e 4360     		str	r3, [r0, #4]
 256:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 489              		.loc 1 256 0
 490 0010 8360     		str	r3, [r0, #8]
 257:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 491              		.loc 1 257 0
 492 0012 0361     		str	r3, [r0, #16]
 258:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 493              		.loc 1 258 0
 494 0014 C361     		str	r3, [r0, #28]
 259:Src/main.c    ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 495              		.loc 1 259 0
ARM GAS  /tmp/ccsAMVNM.s 			page 19


 496 0016 4362     		str	r3, [r0, #36]
 260:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 497              		.loc 1 260 0
 498 0018 0363     		str	r3, [r0, #48]
 261:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 499              		.loc 1 261 0
 500 001a 0122     		movs	r2, #1
 501 001c C262     		str	r2, [r0, #44]
 262:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
 502              		.loc 1 262 0
 503 001e C360     		str	r3, [r0, #12]
 263:Src/main.c    ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 504              		.loc 1 263 0
 505 0020 0262     		str	r2, [r0, #32]
 264:Src/main.c    ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 506              		.loc 1 264 0
 507 0022 4363     		str	r3, [r0, #52]
 265:Src/main.c    ****   hadc1.Init.LowPowerAutoWait = DISABLE;
 508              		.loc 1 265 0
 509 0024 0422     		movs	r2, #4
 510 0026 4261     		str	r2, [r0, #20]
 266:Src/main.c    ****   hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 511              		.loc 1 266 0
 512 0028 8361     		str	r3, [r0, #24]
 267:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 513              		.loc 1 267 0
 514 002a 8363     		str	r3, [r0, #56]
 268:Src/main.c    ****   {
 515              		.loc 1 268 0
 516 002c FFF7FEFF 		bl	HAL_ADC_Init
 517              	.LVL32:
 518 0030 20B1     		cbz	r0, .L35
 270:Src/main.c    ****   }
 519              		.loc 1 270 0
 520 0032 4FF48771 		mov	r1, #270
 521 0036 1448     		ldr	r0, .L39+4
 522 0038 FFF7FEFF 		bl	_Error_Handler
 523              	.LVL33:
 524              	.L35:
 275:Src/main.c    ****   if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 525              		.loc 1 275 0
 526 003c 0AA9     		add	r1, sp, #40
 527 003e 0023     		movs	r3, #0
 528 0040 41F80C3D 		str	r3, [r1, #-12]!
 276:Src/main.c    ****   {
 529              		.loc 1 276 0
 530 0044 0F48     		ldr	r0, .L39
 531 0046 FFF7FEFF 		bl	HAL_ADCEx_MultiModeConfigChannel
 532              	.LVL34:
 533 004a 20B1     		cbz	r0, .L36
 278:Src/main.c    ****   }
 534              		.loc 1 278 0
 535 004c 4FF48B71 		mov	r1, #278
 536 0050 0D48     		ldr	r0, .L39+4
 537 0052 FFF7FEFF 		bl	_Error_Handler
 538              	.LVL35:
 539              	.L36:
ARM GAS  /tmp/ccsAMVNM.s 			page 20


 283:Src/main.c    ****   sConfig.Rank = 1;
 540              		.loc 1 283 0
 541 0056 0123     		movs	r3, #1
 542 0058 0193     		str	r3, [sp, #4]
 284:Src/main.c    ****   sConfig.SingleDiff = ADC_SINGLE_ENDED;
 543              		.loc 1 284 0
 544 005a 0293     		str	r3, [sp, #8]
 285:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 545              		.loc 1 285 0
 546 005c 0023     		movs	r3, #0
 547 005e 0493     		str	r3, [sp, #16]
 286:Src/main.c    ****   sConfig.OffsetNumber = ADC_OFFSET_NONE;
 548              		.loc 1 286 0
 549 0060 0322     		movs	r2, #3
 550 0062 0392     		str	r2, [sp, #12]
 287:Src/main.c    ****   sConfig.Offset = 0;
 551              		.loc 1 287 0
 552 0064 0593     		str	r3, [sp, #20]
 288:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 553              		.loc 1 288 0
 554 0066 0693     		str	r3, [sp, #24]
 289:Src/main.c    ****   {
 555              		.loc 1 289 0
 556 0068 01A9     		add	r1, sp, #4
 557 006a 0648     		ldr	r0, .L39
 558 006c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 559              	.LVL36:
 560 0070 20B1     		cbz	r0, .L34
 291:Src/main.c    ****   }
 561              		.loc 1 291 0
 562 0072 40F22311 		movw	r1, #291
 563 0076 0448     		ldr	r0, .L39+4
 564 0078 FFF7FEFF 		bl	_Error_Handler
 565              	.LVL37:
 566              	.L34:
 294:Src/main.c    **** 
 567              		.loc 1 294 0
 568 007c 0BB0     		add	sp, sp, #44
 569              	.LCFI13:
 570              		.cfi_def_cfa_offset 4
 571              		@ sp needed
 572 007e 5DF804FB 		ldr	pc, [sp], #4
 573              	.L40:
 574 0082 00BF     		.align	2
 575              	.L39:
 576 0084 00000000 		.word	hadc1
 577 0088 00000000 		.word	.LC8
 578              		.cfi_endproc
 579              	.LFE131:
 581              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 582              		.align	2
 583              		.thumb
 584              		.thumb_func
 586              	MX_USART2_UART_Init:
 587              	.LFB134:
 362:Src/main.c    **** 
 588              		.loc 1 362 0
ARM GAS  /tmp/ccsAMVNM.s 			page 21


 589              		.cfi_startproc
 590              		@ args = 0, pretend = 0, frame = 0
 591              		@ frame_needed = 0, uses_anonymous_args = 0
 592 0000 08B5     		push	{r3, lr}
 593              	.LCFI14:
 594              		.cfi_def_cfa_offset 8
 595              		.cfi_offset 3, -8
 596              		.cfi_offset 14, -4
 364:Src/main.c    ****   huart2.Init.BaudRate = 38400;
 597              		.loc 1 364 0
 598 0002 0C48     		ldr	r0, .L44
 599 0004 0C4B     		ldr	r3, .L44+4
 600 0006 0360     		str	r3, [r0]
 365:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 601              		.loc 1 365 0
 602 0008 4FF41643 		mov	r3, #38400
 603 000c 4360     		str	r3, [r0, #4]
 366:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 604              		.loc 1 366 0
 605 000e 0023     		movs	r3, #0
 606 0010 C360     		str	r3, [r0, #12]
 367:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 607              		.loc 1 367 0
 608 0012 0361     		str	r3, [r0, #16]
 368:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 609              		.loc 1 368 0
 610 0014 0C22     		movs	r2, #12
 611 0016 4261     		str	r2, [r0, #20]
 369:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 612              		.loc 1 369 0
 613 0018 8361     		str	r3, [r0, #24]
 370:Src/main.c    ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 614              		.loc 1 370 0
 615 001a C361     		str	r3, [r0, #28]
 371:Src/main.c    ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 616              		.loc 1 371 0
 617 001c 0362     		str	r3, [r0, #32]
 372:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 618              		.loc 1 372 0
 619 001e 4362     		str	r3, [r0, #36]
 373:Src/main.c    ****   {
 620              		.loc 1 373 0
 621 0020 FFF7FEFF 		bl	HAL_UART_Init
 622              	.LVL38:
 623 0024 20B1     		cbz	r0, .L41
 375:Src/main.c    ****   }
 624              		.loc 1 375 0
 625 0026 40F27711 		movw	r1, #375
 626 002a 0448     		ldr	r0, .L44+8
 627 002c FFF7FEFF 		bl	_Error_Handler
 628              	.LVL39:
 629              	.L41:
 630 0030 08BD     		pop	{r3, pc}
 631              	.L45:
 632 0032 00BF     		.align	2
 633              	.L44:
 634 0034 00000000 		.word	huart2
ARM GAS  /tmp/ccsAMVNM.s 			page 22


 635 0038 00440040 		.word	1073759232
 636 003c 00000000 		.word	.LC8
 637              		.cfi_endproc
 638              	.LFE134:
 640              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
 641              		.align	2
 642              		.thumb
 643              		.thumb_func
 645              	MX_USART1_UART_Init:
 646              	.LFB133:
 341:Src/main.c    **** 
 647              		.loc 1 341 0
 648              		.cfi_startproc
 649              		@ args = 0, pretend = 0, frame = 0
 650              		@ frame_needed = 0, uses_anonymous_args = 0
 651 0000 08B5     		push	{r3, lr}
 652              	.LCFI15:
 653              		.cfi_def_cfa_offset 8
 654              		.cfi_offset 3, -8
 655              		.cfi_offset 14, -4
 343:Src/main.c    ****   huart1.Init.BaudRate = 38400;
 656              		.loc 1 343 0
 657 0002 0D48     		ldr	r0, .L49
 658 0004 0D4B     		ldr	r3, .L49+4
 659 0006 0360     		str	r3, [r0]
 344:Src/main.c    ****   huart1.Init.WordLength = UART_WORDLENGTH_7B;
 660              		.loc 1 344 0
 661 0008 4FF41643 		mov	r3, #38400
 662 000c 4360     		str	r3, [r0, #4]
 345:Src/main.c    ****   huart1.Init.StopBits = UART_STOPBITS_1;
 663              		.loc 1 345 0
 664 000e 4FF08053 		mov	r3, #268435456
 665 0012 8360     		str	r3, [r0, #8]
 346:Src/main.c    ****   huart1.Init.Parity = UART_PARITY_NONE;
 666              		.loc 1 346 0
 667 0014 0023     		movs	r3, #0
 668 0016 C360     		str	r3, [r0, #12]
 347:Src/main.c    ****   huart1.Init.Mode = UART_MODE_TX_RX;
 669              		.loc 1 347 0
 670 0018 0361     		str	r3, [r0, #16]
 348:Src/main.c    ****   huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 671              		.loc 1 348 0
 672 001a 0C22     		movs	r2, #12
 673 001c 4261     		str	r2, [r0, #20]
 349:Src/main.c    ****   huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 674              		.loc 1 349 0
 675 001e 8361     		str	r3, [r0, #24]
 350:Src/main.c    ****   huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 676              		.loc 1 350 0
 677 0020 C361     		str	r3, [r0, #28]
 351:Src/main.c    ****   huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 678              		.loc 1 351 0
 679 0022 0362     		str	r3, [r0, #32]
 352:Src/main.c    ****   if (HAL_UART_Init(&huart1) != HAL_OK)
 680              		.loc 1 352 0
 681 0024 4362     		str	r3, [r0, #36]
 353:Src/main.c    ****   {
ARM GAS  /tmp/ccsAMVNM.s 			page 23


 682              		.loc 1 353 0
 683 0026 FFF7FEFF 		bl	HAL_UART_Init
 684              	.LVL40:
 685 002a 20B1     		cbz	r0, .L46
 355:Src/main.c    ****   }
 686              		.loc 1 355 0
 687 002c 40F26311 		movw	r1, #355
 688 0030 0348     		ldr	r0, .L49+8
 689 0032 FFF7FEFF 		bl	_Error_Handler
 690              	.LVL41:
 691              	.L46:
 692 0036 08BD     		pop	{r3, pc}
 693              	.L50:
 694              		.align	2
 695              	.L49:
 696 0038 00000000 		.word	huart1
 697 003c 00380140 		.word	1073821696
 698 0040 00000000 		.word	.LC8
 699              		.cfi_endproc
 700              	.LFE133:
 702              		.section	.text.SystemClock_Config,"ax",%progbits
 703              		.align	2
 704              		.global	SystemClock_Config
 705              		.thumb
 706              		.thumb_func
 708              	SystemClock_Config:
 709              	.LFB130:
 192:Src/main.c    **** 
 710              		.loc 1 192 0
 711              		.cfi_startproc
 712              		@ args = 0, pretend = 0, frame = 88
 713              		@ frame_needed = 0, uses_anonymous_args = 0
 714 0000 00B5     		push	{lr}
 715              	.LCFI16:
 716              		.cfi_def_cfa_offset 4
 717              		.cfi_offset 14, -4
 718 0002 97B0     		sub	sp, sp, #92
 719              	.LCFI17:
 720              		.cfi_def_cfa_offset 96
 200:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 721              		.loc 1 200 0
 722 0004 0223     		movs	r3, #2
 723 0006 0C93     		str	r3, [sp, #48]
 201:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 724              		.loc 1 201 0
 725 0008 0122     		movs	r2, #1
 726 000a 1092     		str	r2, [sp, #64]
 202:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 727              		.loc 1 202 0
 728 000c 1022     		movs	r2, #16
 729 000e 1192     		str	r2, [sp, #68]
 203:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 730              		.loc 1 203 0
 731 0010 1393     		str	r3, [sp, #76]
 204:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 732              		.loc 1 204 0
 733 0012 0023     		movs	r3, #0
ARM GAS  /tmp/ccsAMVNM.s 			page 24


 734 0014 1493     		str	r3, [sp, #80]
 205:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 735              		.loc 1 205 0
 736 0016 4FF46013 		mov	r3, #3670016
 737 001a 1593     		str	r3, [sp, #84]
 206:Src/main.c    ****   {
 738              		.loc 1 206 0
 739 001c 0CA8     		add	r0, sp, #48
 740 001e FFF7FEFF 		bl	HAL_RCC_OscConfig
 741              	.LVL42:
 742 0022 18B1     		cbz	r0, .L52
 208:Src/main.c    ****   }
 743              		.loc 1 208 0
 744 0024 D021     		movs	r1, #208
 745 0026 1C48     		ldr	r0, .L56
 746 0028 FFF7FEFF 		bl	_Error_Handler
 747              	.LVL43:
 748              	.L52:
 213:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 749              		.loc 1 213 0
 750 002c 0F23     		movs	r3, #15
 751 002e 0793     		str	r3, [sp, #28]
 215:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 752              		.loc 1 215 0
 753 0030 0221     		movs	r1, #2
 754 0032 0891     		str	r1, [sp, #32]
 216:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 755              		.loc 1 216 0
 756 0034 0023     		movs	r3, #0
 757 0036 0993     		str	r3, [sp, #36]
 217:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 758              		.loc 1 217 0
 759 0038 4FF48062 		mov	r2, #1024
 760 003c 0A92     		str	r2, [sp, #40]
 218:Src/main.c    **** 
 761              		.loc 1 218 0
 762 003e 0B93     		str	r3, [sp, #44]
 220:Src/main.c    ****   {
 763              		.loc 1 220 0
 764 0040 07A8     		add	r0, sp, #28
 765 0042 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 766              	.LVL44:
 767 0046 18B1     		cbz	r0, .L53
 222:Src/main.c    ****   }
 768              		.loc 1 222 0
 769 0048 DE21     		movs	r1, #222
 770 004a 1348     		ldr	r0, .L56
 771 004c FFF7FEFF 		bl	_Error_Handler
 772              	.LVL45:
 773              	.L53:
 225:Src/main.c    ****   PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 774              		.loc 1 225 0
 775 0050 8123     		movs	r3, #129
 776 0052 0193     		str	r3, [sp, #4]
 226:Src/main.c    ****   PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 777              		.loc 1 226 0
 778 0054 0023     		movs	r3, #0
ARM GAS  /tmp/ccsAMVNM.s 			page 25


 779 0056 0393     		str	r3, [sp, #12]
 227:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 780              		.loc 1 227 0
 781 0058 4FF48073 		mov	r3, #256
 782 005c 0593     		str	r3, [sp, #20]
 228:Src/main.c    ****   {
 783              		.loc 1 228 0
 784 005e 01A8     		add	r0, sp, #4
 785 0060 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 786              	.LVL46:
 787 0064 18B1     		cbz	r0, .L54
 230:Src/main.c    ****   }
 788              		.loc 1 230 0
 789 0066 E621     		movs	r1, #230
 790 0068 0B48     		ldr	r0, .L56
 791 006a FFF7FEFF 		bl	_Error_Handler
 792              	.LVL47:
 793              	.L54:
 235:Src/main.c    **** 
 794              		.loc 1 235 0
 795 006e FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 796              	.LVL48:
 797 0072 0A4B     		ldr	r3, .L56+4
 798 0074 A3FB0030 		umull	r3, r0, r3, r0
 799 0078 8009     		lsrs	r0, r0, #6
 800 007a FFF7FEFF 		bl	HAL_SYSTICK_Config
 801              	.LVL49:
 239:Src/main.c    **** 
 802              		.loc 1 239 0
 803 007e 0420     		movs	r0, #4
 804 0080 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 805              	.LVL50:
 242:Src/main.c    **** }
 806              		.loc 1 242 0
 807 0084 0022     		movs	r2, #0
 808 0086 0F21     		movs	r1, #15
 809 0088 4FF0FF30 		mov	r0, #-1
 810 008c FFF7FEFF 		bl	HAL_NVIC_SetPriority
 811              	.LVL51:
 243:Src/main.c    **** 
 812              		.loc 1 243 0
 813 0090 17B0     		add	sp, sp, #92
 814              	.LCFI18:
 815              		.cfi_def_cfa_offset 4
 816              		@ sp needed
 817 0092 5DF804FB 		ldr	pc, [sp], #4
 818              	.L57:
 819 0096 00BF     		.align	2
 820              	.L56:
 821 0098 00000000 		.word	.LC8
 822 009c D34D6210 		.word	274877907
 823              		.cfi_endproc
 824              	.LFE130:
 826              		.section	.text.main,"ax",%progbits
 827              		.align	2
 828              		.global	main
 829              		.thumb
ARM GAS  /tmp/ccsAMVNM.s 			page 26


 830              		.thumb_func
 832              	main:
 833              	.LFB129:
 100:Src/main.c    **** 
 834              		.loc 1 100 0
 835              		.cfi_startproc
 836              		@ args = 0, pretend = 0, frame = 80
 837              		@ frame_needed = 0, uses_anonymous_args = 0
 838 0000 70B5     		push	{r4, r5, r6, lr}
 839              	.LCFI19:
 840              		.cfi_def_cfa_offset 16
 841              		.cfi_offset 4, -16
 842              		.cfi_offset 5, -12
 843              		.cfi_offset 6, -8
 844              		.cfi_offset 14, -4
 845 0002 94B0     		sub	sp, sp, #80
 846              	.LCFI20:
 847              		.cfi_def_cfa_offset 96
 109:Src/main.c    **** 
 848              		.loc 1 109 0
 849 0004 FFF7FEFF 		bl	HAL_Init
 850              	.LVL52:
 116:Src/main.c    **** 
 851              		.loc 1 116 0
 852 0008 FFF7FEFF 		bl	SystemClock_Config
 853              	.LVL53:
 123:Src/main.c    ****   MX_TIM3_Init();
 854              		.loc 1 123 0
 855 000c FFF7FEFF 		bl	MX_GPIO_Init
 856              	.LVL54:
 124:Src/main.c    ****   MX_ADC1_Init();
 857              		.loc 1 124 0
 858 0010 FFF7FEFF 		bl	MX_TIM3_Init
 859              	.LVL55:
 125:Src/main.c    ****   MX_USART2_UART_Init();
 860              		.loc 1 125 0
 861 0014 FFF7FEFF 		bl	MX_ADC1_Init
 862              	.LVL56:
 126:Src/main.c    ****   MX_USART1_UART_Init();
 863              		.loc 1 126 0
 864 0018 FFF7FEFF 		bl	MX_USART2_UART_Init
 865              	.LVL57:
 127:Src/main.c    **** 
 866              		.loc 1 127 0
 867 001c FFF7FEFF 		bl	MX_USART1_UART_Init
 868              	.LVL58:
 147:Src/main.c    ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 869              		.loc 1 147 0
 870 0020 1A4C     		ldr	r4, .L61
 871 0022 0FAD     		add	r5, sp, #60
 872 0024 2646     		mov	r6, r4
 873 0026 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 874 0028 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 875 002a 3368     		ldr	r3, [r6]
 876 002c 2B60     		str	r3, [r5]
 148:Src/main.c    **** 
 877              		.loc 1 148 0
ARM GAS  /tmp/ccsAMVNM.s 			page 27


 878 002e 0021     		movs	r1, #0
 879 0030 0FA8     		add	r0, sp, #60
 880 0032 FFF7FEFF 		bl	osThreadCreate
 881              	.LVL59:
 882 0036 164B     		ldr	r3, .L61+4
 883 0038 1860     		str	r0, [r3]
 151:Src/main.c    ****   motor_taskHandle = osThreadCreate(osThread(motor_task), NULL);
 884              		.loc 1 151 0
 885 003a 0AAD     		add	r5, sp, #40
 886 003c 04F11406 		add	r6, r4, #20
 887 0040 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 888 0042 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 889 0044 3368     		ldr	r3, [r6]
 890 0046 2B60     		str	r3, [r5]
 152:Src/main.c    **** 
 891              		.loc 1 152 0
 892 0048 0021     		movs	r1, #0
 893 004a 0AA8     		add	r0, sp, #40
 894 004c FFF7FEFF 		bl	osThreadCreate
 895              	.LVL60:
 896 0050 104B     		ldr	r3, .L61+8
 897 0052 1860     		str	r0, [r3]
 155:Src/main.c    ****   adc_dma_taskHandle = osThreadCreate(osThread(adc_dma_task), NULL);
 898              		.loc 1 155 0
 899 0054 05AD     		add	r5, sp, #20
 900 0056 04F12806 		add	r6, r4, #40
 901 005a 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 902 005c 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 903 005e 3368     		ldr	r3, [r6]
 904 0060 2B60     		str	r3, [r5]
 156:Src/main.c    **** 
 905              		.loc 1 156 0
 906 0062 0021     		movs	r1, #0
 907 0064 05A8     		add	r0, sp, #20
 908 0066 FFF7FEFF 		bl	osThreadCreate
 909              	.LVL61:
 910 006a 0B4B     		ldr	r3, .L61+12
 911 006c 1860     		str	r0, [r3]
 159:Src/main.c    ****   uart_taskHandle = osThreadCreate(osThread(uart_task), NULL);
 912              		.loc 1 159 0
 913 006e 6D46     		mov	r5, sp
 914 0070 3C34     		adds	r4, r4, #60
 915 0072 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 916 0074 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 917 0076 2368     		ldr	r3, [r4]
 918 0078 2B60     		str	r3, [r5]
 160:Src/main.c    **** 
 919              		.loc 1 160 0
 920 007a 0021     		movs	r1, #0
 921 007c 6846     		mov	r0, sp
 922 007e FFF7FEFF 		bl	osThreadCreate
 923              	.LVL62:
 924 0082 064B     		ldr	r3, .L61+16
 925 0084 1860     		str	r0, [r3]
 172:Src/main.c    ****   
 926              		.loc 1 172 0
 927 0086 FFF7FEFF 		bl	osKernelStart
ARM GAS  /tmp/ccsAMVNM.s 			page 28


 928              	.LVL63:
 929              	.L59:
 930 008a FEE7     		b	.L59
 931              	.L62:
 932              		.align	2
 933              	.L61:
 934 008c 00000000 		.word	.LANCHOR0
 935 0090 00000000 		.word	defaultTaskHandle
 936 0094 00000000 		.word	motor_taskHandle
 937 0098 00000000 		.word	adc_dma_taskHandle
 938 009c 00000000 		.word	uart_taskHandle
 939              		.cfi_endproc
 940              	.LFE129:
 942              		.comm	uart_taskHandle,4,4
 943              		.comm	adc_dma_taskHandle,4,4
 944              		.comm	motor_taskHandle,4,4
 945              		.comm	defaultTaskHandle,4,4
 946              		.comm	huart2,112,4
 947              		.comm	huart1,112,4
 948              		.comm	htim3,64,4
 949              		.comm	hadc1,84,4
 950              		.section	.rodata
 951              		.align	2
 952              		.set	.LANCHOR0,. + 0
 953              	.LC9:
 954 0000 34000000 		.word	.LC0
 955 0004 00000000 		.word	StartDefaultTask
 956 0008 0000     		.short	0
 957 000a 0000     		.space	2
 958 000c 00000000 		.word	0
 959 0010 80000000 		.word	128
 960              	.LC10:
 961 0014 28000000 		.word	.LC2
 962 0018 00000000 		.word	motor
 963 001c FDFF     		.short	-3
 964 001e 0000     		.space	2
 965 0020 00000000 		.word	0
 966 0024 00010000 		.word	256
 967              	.LC11:
 968 0028 18000000 		.word	.LC4
 969 002c 00000000 		.word	adcControl
 970 0030 FDFF     		.short	-3
 971 0032 0000     		.space	2
 972 0034 00000000 		.word	0
 973 0038 00010000 		.word	256
 974              	.LC12:
 975 003c 0C000000 		.word	.LC6
 976 0040 00000000 		.word	uart
 977 0044 FDFF     		.short	-3
 978 0046 0000     		.space	2
 979 0048 00000000 		.word	0
 980 004c 00010000 		.word	256
 981              		.section	.rodata.str1.4,"aMS",%progbits,1
 982              		.align	2
 983              	.LC8:
 984 0000 5372632F 		.ascii	"Src/main.c\000"
 984      6D61696E 
ARM GAS  /tmp/ccsAMVNM.s 			page 29


 984      2E6300
 985 000b 00       		.space	1
 986              	.LC6:
 987 000c 75617274 		.ascii	"uart_task\000"
 987      5F746173 
 987      6B00
 988 0016 0000     		.space	2
 989              	.LC4:
 990 0018 6164635F 		.ascii	"adc_dma_task\000"
 990      646D615F 
 990      7461736B 
 990      00
 991 0025 000000   		.space	3
 992              	.LC2:
 993 0028 6D6F746F 		.ascii	"motor_task\000"
 993      725F7461 
 993      736B00
 994 0033 00       		.space	1
 995              	.LC0:
 996 0034 64656661 		.ascii	"defaultTask\000"
 996      756C7454 
 996      61736B00 
 997              		.text
 998              	.Letext0:
 999              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1000              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 1001              		.file 4 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303x8.h"
 1002              		.file 5 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f3xx.h"
 1003              		.file 6 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
 1004              		.file 7 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
 1005              		.file 8 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
 1006              		.file 9 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_gpio.h"
 1007              		.file 10 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
 1008              		.file 11 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
 1009              		.file 12 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc.h"
 1010              		.file 13 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
 1011              		.file 14 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim_ex.h"
 1012              		.file 15 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
 1013              		.file 16 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 1014              		.file 17 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 1015              		.file 18 "Drivers/CMSIS/Include/core_cm4.h"
 1016              		.file 19 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
 1017              		.file 20 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_cortex.h"
ARM GAS  /tmp/ccsAMVNM.s 			page 30


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccsAMVNM.s:22     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccsAMVNM.s:26     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccsAMVNM.s:163    .text.MX_GPIO_Init:00000000000000b8 $d
     /tmp/ccsAMVNM.s:170    .text.StartDefaultTask:0000000000000000 $t
     /tmp/ccsAMVNM.s:175    .text.StartDefaultTask:0000000000000000 StartDefaultTask
     /tmp/ccsAMVNM.s:203    .text.StartDefaultTask:0000000000000014 $d
     /tmp/ccsAMVNM.s:208    .text.motor:0000000000000000 $t
     /tmp/ccsAMVNM.s:213    .text.motor:0000000000000000 motor
     /tmp/ccsAMVNM.s:236    .text.adcControl:0000000000000000 $t
     /tmp/ccsAMVNM.s:241    .text.adcControl:0000000000000000 adcControl
     /tmp/ccsAMVNM.s:264    .text.uart:0000000000000000 $t
     /tmp/ccsAMVNM.s:269    .text.uart:0000000000000000 uart
     /tmp/ccsAMVNM.s:292    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccsAMVNM.s:297    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccsAMVNM.s:322    .text.HAL_TIM_PeriodElapsedCallback:0000000000000010 $d
     /tmp/ccsAMVNM.s:327    .text._Error_Handler:0000000000000000 $t
     /tmp/ccsAMVNM.s:332    .text._Error_Handler:0000000000000000 _Error_Handler
     /tmp/ccsAMVNM.s:347    .text.MX_TIM3_Init:0000000000000000 $t
     /tmp/ccsAMVNM.s:351    .text.MX_TIM3_Init:0000000000000000 MX_TIM3_Init
     /tmp/ccsAMVNM.s:458    .text.MX_TIM3_Init:0000000000000090 $d
                            *COM*:0000000000000040 htim3
     /tmp/ccsAMVNM.s:465    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccsAMVNM.s:469    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccsAMVNM.s:576    .text.MX_ADC1_Init:0000000000000084 $d
                            *COM*:0000000000000054 hadc1
     /tmp/ccsAMVNM.s:582    .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/ccsAMVNM.s:586    .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/ccsAMVNM.s:634    .text.MX_USART2_UART_Init:0000000000000034 $d
                            *COM*:0000000000000070 huart2
     /tmp/ccsAMVNM.s:641    .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/ccsAMVNM.s:645    .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/ccsAMVNM.s:696    .text.MX_USART1_UART_Init:0000000000000038 $d
                            *COM*:0000000000000070 huart1
     /tmp/ccsAMVNM.s:703    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccsAMVNM.s:708    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccsAMVNM.s:821    .text.SystemClock_Config:0000000000000098 $d
     /tmp/ccsAMVNM.s:827    .text.main:0000000000000000 $t
     /tmp/ccsAMVNM.s:832    .text.main:0000000000000000 main
     /tmp/ccsAMVNM.s:934    .text.main:000000000000008c $d
                            *COM*:0000000000000004 defaultTaskHandle
                            *COM*:0000000000000004 motor_taskHandle
                            *COM*:0000000000000004 adc_dma_taskHandle
                            *COM*:0000000000000004 uart_taskHandle
     /tmp/ccsAMVNM.s:951    .rodata:0000000000000000 $d
     /tmp/ccsAMVNM.s:982    .rodata.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_GPIO_TogglePin
osDelay
HAL_IncTick
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
ARM GAS  /tmp/ccsAMVNM.s 			page 31


HAL_TIM_PWM_ConfigChannel
HAL_TIM_MspPostInit
HAL_ADC_Init
HAL_ADCEx_MultiModeConfigChannel
HAL_ADC_ConfigChannel
HAL_UART_Init
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
osThreadCreate
osKernelStart
