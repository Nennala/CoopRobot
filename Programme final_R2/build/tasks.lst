ARM GAS  /tmp/ccu6CPJi.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.file	"tasks.c"
  17              		.text
  18              	.Ltext0:
  19              		.cfi_sections	.debug_frame
  20              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  21              		.align	2
  22              		.thumb
  23              		.thumb_func
  25              	prvTaskIsTaskSuspended:
  26              	.LFB14:
  27              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     This file is part of the FreeRTOS distribution.
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    platform software that is more than just the market leader, it     *
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *                                                                       *
ARM GAS  /tmp/ccu6CPJi.s 			page 2


  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    Help yourself get started quickly while simultaneously helping     *
  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    tutorial book, reference manual, or both:                          *
  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****      *                                                                       *
  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     engineered and independently SIL3 certified version for use in safety and
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     mission critical applications that require provable dependability.
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "StackMacros.h"
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** header files above, but not in this file, in order to generate the correct
  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** privileged Vs unprivileged linkage and placement. */
ARM GAS  /tmp/ccu6CPJi.s 			page 3


  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** settings allow a task to be created using either statically or dynamically
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** made to free the RAM that was allocated statically.
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** a statically allocated stack and a dynamically allocated TCB. */
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE ( ( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && (
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
ARM GAS  /tmp/ccu6CPJi.s 			page 4


 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
ARM GAS  /tmp/ccu6CPJi.s 			page 5


 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
ARM GAS  /tmp/ccu6CPJi.s 			page 6


 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portSTACK_GROWTH > 0 )
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the end of the stack on architectures where the stack 
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
ARM GAS  /tmp/ccu6CPJi.s 			page 7


 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void *pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments above the definition of
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -e956 A manual analysis and inspection has been used to determine which
 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static variables must be declared volatile. */
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccu6CPJi.s 			page 8


 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) 0U;
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint +e956 */
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
ARM GAS  /tmp/ccu6CPJi.s 			page 9


 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void );
 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
ARM GAS  /tmp/ccu6CPJi.s 			page 10


 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccu6CPJi.s 			page 11


 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION; /*lint !e971 Unqualified char
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer ) /*lint !e971 Unqualified char types are allowed for st
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccu6CPJi.s 			page 12


 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are desig
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( portUSING_MPU_WRAPPERS == 1 )
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				this task had a statically allocated stack in case it is
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				later deleted.  The TCB was allocated dynamically. */
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
ARM GAS  /tmp/ccu6CPJi.s 			page 13


 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const uint16_t usStackDepth,
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for str
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
ARM GAS  /tmp/ccu6CPJi.s 			page 14


 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the cas
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
ARM GAS  /tmp/ccu6CPJi.s 			page 15


 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed fo
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTa
 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INC
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
ARM GAS  /tmp/ccu6CPJi.s 			page 16


 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		string is not accessible (extremely unlikely). */
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pcName[ x ] == 0x00 )
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			break;
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
ARM GAS  /tmp/ccu6CPJi.s 			page 17


 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the	top of stack variable is updated. */
 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  /tmp/ccu6CPJi.s 			page 18


 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( ( void * ) pxCreatedTask != NULL )
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccu6CPJi.s 			page 19


1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccu6CPJi.s 			page 20


1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list. */
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccu6CPJi.s 			page 21


1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  /tmp/ccu6CPJi.s 			page 22


1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
ARM GAS  /tmp/ccu6CPJi.s 			page 23


1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxStateList;
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccu6CPJi.s 			page 24


1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it block
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eSuspended;
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  /tmp/ccu6CPJi.s 			page 25


1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccu6CPJi.s 			page 26


1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
ARM GAS  /tmp/ccu6CPJi.s 			page 27


1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccu6CPJi.s 			page 28


1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change it's priority variable. However, if
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before adding
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it to it's new ready list.  As we are in a critical section we
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					can do this even if the scheduler is suspended. */
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
ARM GAS  /tmp/ccu6CPJi.s 			page 29


1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  /tmp/ccu6CPJi.s 			page 30


1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
  28              		.loc 1 1657 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
  34              		.loc 1 1665 0
  35 0000 0246     		mov	r2, r0
  36 0002 40B9     		cbnz	r0, .L2
  37              	.LBB90:
  38              	.LBB91:
  39              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engineers Ltd.
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     All rights reserved
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     VISIT http://www.FreeRTOS.org TO ENSURE YOU ARE USING THE LATEST VERSION.
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     This file is part of the FreeRTOS distribution.
ARM GAS  /tmp/ccu6CPJi.s 			page 31


   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is free software; you can redistribute it and/or modify it under
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the terms of the GNU General Public License (version 2) as published by the
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Free Software Foundation >>>> AND MODIFIED BY <<<< the FreeRTOS exception.
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   NOTE: The modification to the GPL is included to allow you to     !<<
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   distribute a combined work that includes FreeRTOS without being   !<<
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   obliged to provide the source code for proprietary components     !<<
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     >>!   outside of the FreeRTOS kernel.                                   !<<
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS is distributed in the hope that it will be useful, but WITHOUT ANY
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FOR A PARTICULAR PURPOSE.  Full license text is available on the following
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     link: http://www.freertos.org/a00114.html
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    FreeRTOS provides completely free yet professionally developed,    *
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    robust, strictly quality controlled, supported, and cross          *
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    platform software that is more than just the market leader, it     *
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    is the industry's de facto standard.                               *
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    Help yourself get started quickly while simultaneously helping     *
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    to support the FreeRTOS project by purchasing a FreeRTOS           *
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    tutorial book, reference manual, or both:                          *
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *    http://www.FreeRTOS.org/Documentation                              *
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****      *                                                                       *
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     ***************************************************************************
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/FAQHelp.html - Having a problem?  Start by reading
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     the FAQ page "My application does not run, what could be wrong?".  Have you
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     defined configASSERT()?
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/support - In return for receiving this top quality
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     embedded software for free we request you assist our global community by
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     participating in the support forum.
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/training - Investing in training allows your team to
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     be as productive as possible as early as possible.  Now you can receive
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     FreeRTOS training directly from Richard Barry, CEO of Real Time Engineers
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Ltd, and the world's leading authority on the world's leading RTOS.
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/plus - A selection of FreeRTOS ecosystem products,
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     including FreeRTOS+Trace - an indispensable productivity tool, a DOS
  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     compatible FAT file system, and our tiny thread aware UDP/IP stack.
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.FreeRTOS.org/labs - Where new FreeRTOS products go to incubate.
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Come and try FreeRTOS+TCP, our new open source TCP/IP stack for FreeRTOS.
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.OpenRTOS.com - Real Time Engineers ltd. license FreeRTOS to High
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     Integrity Systems ltd. to sell under the OpenRTOS brand.  Low cost OpenRTOS
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     licenses offer ticketed support, indemnification and commercial middleware.
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     http://www.SafeRTOS.com - High Integrity Systems also provide a safety
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     engineered and independently SIL3 certified version for use in safety and
ARM GAS  /tmp/ccu6CPJi.s 			page 32


  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     mission critical applications that require provable dependability.
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****     1 tab == 4 spaces!
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** */
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
ARM GAS  /tmp/ccu6CPJi.s 			page 33


 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" );													\
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
ARM GAS  /tmp/ccu6CPJi.s 			page 34


 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 230:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 231:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 232:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 233:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 234:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 235:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
ARM GAS  /tmp/ccu6CPJi.s 			page 35


 236:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
  40              		.loc 2 237 0
  41              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
  42 0004 4FF05003 			mov r3, #80												
  43 0008 83F31188 		msr basepri, r3											
  44 000c BFF36F8F 		isb														
  45 0010 BFF34F8F 		dsb														
  46              	
  47              	@ 0 "" 2
  48              	.LVL1:
  49              		.thumb
  50              	.L3:
  51              	.LBE91:
  52              	.LBE90:
  53              		.loc 1 1665 0 discriminator 1
  54 0014 FEE7     		b	.L3
  55              	.L2:
1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  56              		.loc 1 1668 0
  57 0016 4169     		ldr	r1, [r0, #20]
  58 0018 0A4B     		ldr	r3, .L12
  59 001a 9942     		cmp	r1, r3
  60 001c 01D1     		bne	.L7
  61 001e 0123     		movs	r3, #1
  62 0020 00E0     		b	.L4
  63              	.L7:
  64 0022 0023     		movs	r3, #0
  65              	.L4:
  66              		.loc 1 1668 0 is_stmt 0 discriminator 4
  67 0024 43B1     		cbz	r3, .L8
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  68              		.loc 1 1671 0 is_stmt 1
  69 0026 926A     		ldr	r2, [r2, #40]
  70 0028 0749     		ldr	r1, .L12+4
  71 002a 8A42     		cmp	r2, r1
  72 002c 06D0     		beq	.L9
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
  73              		.loc 1 1675 0
  74 002e 02B1     		cbz	r2, .L6
  75 0030 0023     		movs	r3, #0
  76              	.L6:
  77              		.loc 1 1675 0 is_stmt 0 discriminator 4
  78 0032 2BB9     		cbnz	r3, .L11
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  79              		.loc 1 1658 0 is_stmt 1
  80 0034 0020     		movs	r0, #0
  81              	.LVL2:
  82 0036 7047     		bx	lr
  83              	.LVL3:
ARM GAS  /tmp/ccu6CPJi.s 			page 36


  84              	.L8:
  85 0038 0020     		movs	r0, #0
  86              	.LVL4:
  87 003a 7047     		bx	lr
  88              	.LVL5:
  89              	.L9:
  90 003c 0020     		movs	r0, #0
  91              	.LVL6:
  92 003e 7047     		bx	lr
  93              	.LVL7:
  94              	.L11:
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
  95              		.loc 1 1677 0
  96 0040 0120     		movs	r0, #1
  97              	.LVL8:
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  98              		.loc 1 1695 0
  99 0042 7047     		bx	lr
 100              	.L13:
 101              		.align	2
 102              	.L12:
 103 0044 00000000 		.word	.LANCHOR0
 104 0048 00000000 		.word	.LANCHOR1
 105              		.cfi_endproc
 106              	.LFE14:
 108              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 109              		.align	2
 110              		.thumb
 111              		.thumb_func
 113              	prvResetNextTaskUnblockTime:
 114              	.LFB38:
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  /tmp/ccu6CPJi.s 			page 37


1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* As we are in a critical section we can access the ready
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					lists even if the scheduler is suspended. */
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* We may have just resumed a higher priority task. */
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
ARM GAS  /tmp/ccu6CPJi.s 			page 38


1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccu6CPJi.s 			page 39


1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												"IDLE",
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL,
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								"IDLE", configMINIMAL_STACK_SIZE,
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
ARM GAS  /tmp/ccu6CPJi.s 			page 40


1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first. */
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base. */
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccu6CPJi.s 			page 41


1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
ARM GAS  /tmp/ccu6CPJi.s 			page 42


1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
ARM GAS  /tmp/ccu6CPJi.s 			page 43


2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--uxPendedCounts;
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						uxPendedTicks = 0;
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccu6CPJi.s 			page 44


2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
ARM GAS  /tmp/ccu6CPJi.s 			page 45


2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccu6CPJi.s 			page 46


2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == 0x00 )
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  /tmp/ccu6CPJi.s 			page 47


2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( TaskHandle_t ) pxTCB;
2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
ARM GAS  /tmp/ccu6CPJi.s 			page 48


2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
ARM GAS  /tmp/ccu6CPJi.s 			page 49


2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccu6CPJi.s 			page 50


2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTaskResumeAll();
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
ARM GAS  /tmp/ccu6CPJi.s 			page 51


2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + 1;
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U )
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
ARM GAS  /tmp/ccu6CPJi.s 			page 52


2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
ARM GAS  /tmp/ccu6CPJi.s 			page 53


2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++uxPendedTicks;
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xYieldPending != pdFALSE )
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xSwitchRequired = pdTRUE;
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccu6CPJi.s 			page 54


2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
ARM GAS  /tmp/ccu6CPJi.s 			page 55


2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Add the amount of time the task has been running to the
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				accumulated time so far.  The time the task started running was
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				protection here so count values are only valid until the timer
2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				overflows.  The guard against negative values is to protect
ARM GAS  /tmp/ccu6CPJi.s 			page 56


2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				against suspect run time stat counter implementations - which
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				are provided by the application, not the kernel. */
2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task. */
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
ARM GAS  /tmp/ccu6CPJi.s 			page 57


2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
ARM GAS  /tmp/ccu6CPJi.s 			page 58


2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccu6CPJi.s 			page 59


2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemV
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a higher priority than the calling task.  This allows
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task to know if it should force a context
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch now. */
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccu6CPJi.s 			page 60


3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccu6CPJi.s 			page 61


3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
ARM GAS  /tmp/ccu6CPJi.s 			page 62


3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
ARM GAS  /tmp/ccu6CPJi.s 			page 63


3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
ARM GAS  /tmp/ccu6CPJi.s 			page 64


3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  /tmp/ccu6CPJi.s 			page 65


3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
ARM GAS  /tmp/ccu6CPJi.s 			page 66


3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xListIsEmpty;
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		too often in the idle task. */
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( void ) xTaskResumeAll();
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xListIsEmpty == pdFALSE )
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				TCB_t *pxTCB;
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxCurrentNumberOfTasks;
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxDeletedTasksWaitingCleanUp;
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  /tmp/ccu6CPJi.s 			page 67


3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the suspended list then there is a chance it is
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			actually just blocked indefinitely - so really it should be reported as
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being in the Blocked state. */
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTaskStatus->eCurrentState == eSuspended )
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTaskStatus->eCurrentState = eBlocked;
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xTaskResumeAll();
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* INCLUDE_vTaskSuspend */
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the value
3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		of eState passed into this function is eInvalid - otherwise the state is
3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		just set to whatever is passed in. */
3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eState;
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
ARM GAS  /tmp/ccu6CPJi.s 			page 68


3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( xTask );
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile TCB_t *pxNextTCB, *pxFirstTCB;
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccu6CPJi.s 			page 69


3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( uint16_t ) ulCount;
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
ARM GAS  /tmp/ccu6CPJi.s 			page 70


3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE == 1 )
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 115              		.loc 1 3636 0
 116              		.cfi_startproc
 117              		@ args = 0, pretend = 0, frame = 0
 118              		@ frame_needed = 0, uses_anonymous_args = 0
 119              		@ link register save eliminated.
ARM GAS  /tmp/ccu6CPJi.s 			page 71


3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 120              		.loc 1 3639 0
 121 0000 0A4B     		ldr	r3, .L19
 122 0002 1B68     		ldr	r3, [r3]
 123 0004 1B68     		ldr	r3, [r3]
 124 0006 0BB9     		cbnz	r3, .L18
 125 0008 0123     		movs	r3, #1
 126 000a 00E0     		b	.L15
 127              	.L18:
 128 000c 0023     		movs	r3, #0
 129              	.L15:
 130              		.loc 1 3639 0 is_stmt 0 discriminator 4
 131 000e 23B1     		cbz	r3, .L16
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
 132              		.loc 1 3645 0 is_stmt 1
 133 0010 4FF0FF32 		mov	r2, #-1
 134 0014 064B     		ldr	r3, .L19+4
 135 0016 1A60     		str	r2, [r3]
 136 0018 7047     		bx	lr
 137              	.L16:
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 138              		.loc 1 3653 0
 139 001a 044B     		ldr	r3, .L19
 140 001c 1B68     		ldr	r3, [r3]
 141 001e DB68     		ldr	r3, [r3, #12]
 142 0020 DB68     		ldr	r3, [r3, #12]
 143              	.LVL9:
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 144              		.loc 1 3654 0
 145 0022 5A68     		ldr	r2, [r3, #4]
 146 0024 024B     		ldr	r3, .L19+4
 147              	.LVL10:
 148 0026 1A60     		str	r2, [r3]
 149 0028 7047     		bx	lr
 150              	.L20:
 151 002a 00BF     		.align	2
 152              	.L19:
 153 002c 00000000 		.word	.LANCHOR2
 154 0030 00000000 		.word	.LANCHOR3
 155              		.cfi_endproc
 156              	.LFE38:
 158              		.section	.text.prvDeleteTCB,"ax",%progbits
 159              		.align	2
ARM GAS  /tmp/ccu6CPJi.s 			page 72


 160              		.thumb
 161              		.thumb_func
 163              	prvDeleteTCB:
 164              	.LFB37:
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 165              		.loc 1 3582 0
 166              		.cfi_startproc
 167              		@ args = 0, pretend = 0, frame = 0
 168              		@ frame_needed = 0, uses_anonymous_args = 0
 169              	.LVL11:
 170 0000 10B5     		push	{r4, lr}
 171              	.LCFI0:
 172              		.cfi_def_cfa_offset 8
 173              		.cfi_offset 4, -8
 174              		.cfi_offset 14, -4
 175 0002 0446     		mov	r4, r0
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
 176              		.loc 1 3600 0
 177 0004 006B     		ldr	r0, [r0, #48]
 178              	.LVL12:
 179 0006 FFF7FEFF 		bl	vPortFree
 180              	.LVL13:
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 181              		.loc 1 3601 0
 182 000a 2046     		mov	r0, r4
 183 000c FFF7FEFF 		bl	vPortFree
 184              	.LVL14:
 185 0010 10BD     		pop	{r4, pc}
 186              		.cfi_endproc
 187              	.LFE37:
 189 0012 00BF     		.section	.text.prvInitialiseNewTask,"ax",%progbits
 190              		.align	2
 191              		.thumb
 192              		.thumb_func
 194              	prvInitialiseNewTask:
 195              	.LFB6:
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 196              		.loc 1 775 0
 197              		.cfi_startproc
 198              		@ args = 16, pretend = 0, frame = 0
 199              		@ frame_needed = 0, uses_anonymous_args = 0
 200              	.LVL15:
 201 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 202              	.LCFI1:
 203              		.cfi_def_cfa_offset 32
 204              		.cfi_offset 4, -32
 205              		.cfi_offset 5, -28
 206              		.cfi_offset 6, -24
 207              		.cfi_offset 7, -20
 208              		.cfi_offset 8, -16
 209              		.cfi_offset 9, -12
 210              		.cfi_offset 10, -8
 211              		.cfi_offset 14, -4
 212 0004 8146     		mov	r9, r0
 213 0006 9846     		mov	r8, r3
 214 0008 089D     		ldr	r5, [sp, #32]
 215 000a 099F     		ldr	r7, [sp, #36]
ARM GAS  /tmp/ccu6CPJi.s 			page 73


 216 000c 0A9C     		ldr	r4, [sp, #40]
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 217              		.loc 1 807 0
 218 000e 236B     		ldr	r3, [r4, #48]
 219              	.LVL16:
 220 0010 02F18042 		add	r2, r2, #1073741824
 221              	.LVL17:
 222 0014 013A     		subs	r2, r2, #1
 223              	.LVL18:
 224 0016 03EB8206 		add	r6, r3, r2, lsl #2
 225              	.LVL19:
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 226              		.loc 1 808 0
 227 001a 26F00706 		bic	r6, r6, #7
 228              	.LVL20:
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 229              		.loc 1 827 0
 230 001e 0023     		movs	r3, #0
 231 0020 06E0     		b	.L24
 232              	.LVL21:
 233              	.L26:
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 234              		.loc 1 829 0
 235 0022 C85C     		ldrb	r0, [r1, r3]	@ zero_extendqisi2
 236 0024 E218     		adds	r2, r4, r3
 237 0026 82F83400 		strb	r0, [r2, #52]
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 238              		.loc 1 834 0
 239 002a CA5C     		ldrb	r2, [r1, r3]	@ zero_extendqisi2
 240 002c 12B1     		cbz	r2, .L25
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 241              		.loc 1 827 0 discriminator 2
 242 002e 0133     		adds	r3, r3, #1
 243              	.LVL22:
 244              	.L24:
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 245              		.loc 1 827 0 is_stmt 0 discriminator 1
 246 0030 0F2B     		cmp	r3, #15
 247 0032 F6D9     		bls	.L26
 248              	.L25:
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 249              		.loc 1 846 0 is_stmt 1
 250 0034 0023     		movs	r3, #0
 251              	.LVL23:
 252 0036 84F84330 		strb	r3, [r4, #67]
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 253              		.loc 1 850 0
 254 003a 062D     		cmp	r5, #6
 255 003c 00D9     		bls	.L27
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 256              		.loc 1 852 0
 257 003e 0625     		movs	r5, #6
 258              	.L27:
 259              	.LVL24:
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 260              		.loc 1 859 0
 261 0040 E562     		str	r5, [r4, #44]
ARM GAS  /tmp/ccu6CPJi.s 			page 74


 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 262              		.loc 1 862 0
 263 0042 6564     		str	r5, [r4, #68]
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 264              		.loc 1 863 0
 265 0044 4FF0000A 		mov	r10, #0
 266 0048 C4F848A0 		str	r10, [r4, #72]
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 267              		.loc 1 867 0
 268 004c 201D     		adds	r0, r4, #4
 269 004e FFF7FEFF 		bl	vListInitialiseItem
 270              	.LVL25:
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 271              		.loc 1 868 0
 272 0052 04F11800 		add	r0, r4, #24
 273 0056 FFF7FEFF 		bl	vListInitialiseItem
 274              	.LVL26:
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 275              		.loc 1 872 0
 276 005a 2461     		str	r4, [r4, #16]
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 277              		.loc 1 875 0
 278 005c C5F10705 		rsb	r5, r5, #7
 279              	.LVL27:
 280 0060 A561     		str	r5, [r4, #24]
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 281              		.loc 1 876 0
 282 0062 6462     		str	r4, [r4, #36]
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 283              		.loc 1 918 0
 284 0064 C4F84CA0 		str	r10, [r4, #76]
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 285              		.loc 1 919 0
 286 0068 84F850A0 		strb	r10, [r4, #80]
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 287              		.loc 1 946 0
 288 006c 3046     		mov	r0, r6
 289 006e 4946     		mov	r1, r9
 290 0070 4246     		mov	r2, r8
 291 0072 FFF7FEFF 		bl	pxPortInitialiseStack
 292              	.LVL28:
 293 0076 2060     		str	r0, [r4]
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 294              		.loc 1 950 0
 295 0078 07B1     		cbz	r7, .L23
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 296              		.loc 1 954 0
 297 007a 3C60     		str	r4, [r7]
 298              	.L23:
 299 007c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 300              		.cfi_endproc
 301              	.LFE6:
 303              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 304              		.align	2
 305              		.thumb
 306              		.thumb_func
 308              	prvInitialiseTaskLists:
ARM GAS  /tmp/ccu6CPJi.s 			page 75


 309              	.LFB35:
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
 310              		.loc 1 3334 0
 311              		.cfi_startproc
 312              		@ args = 0, pretend = 0, frame = 0
 313              		@ frame_needed = 0, uses_anonymous_args = 0
 314 0000 38B5     		push	{r3, r4, r5, lr}
 315              	.LCFI2:
 316              		.cfi_def_cfa_offset 16
 317              		.cfi_offset 3, -16
 318              		.cfi_offset 4, -12
 319              		.cfi_offset 5, -8
 320              		.cfi_offset 14, -4
 321              	.LVL29:
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 322              		.loc 1 3337 0
 323 0002 0024     		movs	r4, #0
 324 0004 07E0     		b	.L32
 325              	.LVL30:
 326              	.L33:
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 327              		.loc 1 3339 0 discriminator 3
 328 0006 04EB8403 		add	r3, r4, r4, lsl #2
 329 000a 9B00     		lsls	r3, r3, #2
 330 000c 0E48     		ldr	r0, .L35
 331 000e 1844     		add	r0, r0, r3
 332 0010 FFF7FEFF 		bl	vListInitialise
 333              	.LVL31:
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 334              		.loc 1 3337 0 discriminator 3
 335 0014 0134     		adds	r4, r4, #1
 336              	.LVL32:
 337              	.L32:
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 338              		.loc 1 3337 0 is_stmt 0 discriminator 1
 339 0016 062C     		cmp	r4, #6
 340 0018 F5D9     		bls	.L33
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 341              		.loc 1 3342 0 is_stmt 1
 342 001a 0C4D     		ldr	r5, .L35+4
 343 001c 2846     		mov	r0, r5
 344 001e FFF7FEFF 		bl	vListInitialise
 345              	.LVL33:
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 346              		.loc 1 3343 0
 347 0022 0B4C     		ldr	r4, .L35+8
 348              	.LVL34:
 349 0024 2046     		mov	r0, r4
 350 0026 FFF7FEFF 		bl	vListInitialise
 351              	.LVL35:
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 352              		.loc 1 3344 0
 353 002a 0A48     		ldr	r0, .L35+12
 354 002c FFF7FEFF 		bl	vListInitialise
 355              	.LVL36:
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 356              		.loc 1 3348 0
ARM GAS  /tmp/ccu6CPJi.s 			page 76


 357 0030 0948     		ldr	r0, .L35+16
 358 0032 FFF7FEFF 		bl	vListInitialise
 359              	.LVL37:
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 360              		.loc 1 3354 0
 361 0036 0948     		ldr	r0, .L35+20
 362 0038 FFF7FEFF 		bl	vListInitialise
 363              	.LVL38:
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 364              		.loc 1 3360 0
 365 003c 084B     		ldr	r3, .L35+24
 366 003e 1D60     		str	r5, [r3]
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 367              		.loc 1 3361 0
 368 0040 084B     		ldr	r3, .L35+28
 369 0042 1C60     		str	r4, [r3]
 370 0044 38BD     		pop	{r3, r4, r5, pc}
 371              	.L36:
 372 0046 00BF     		.align	2
 373              	.L35:
 374 0048 00000000 		.word	.LANCHOR4
 375 004c 00000000 		.word	.LANCHOR5
 376 0050 00000000 		.word	.LANCHOR6
 377 0054 00000000 		.word	.LANCHOR1
 378 0058 00000000 		.word	.LANCHOR7
 379 005c 00000000 		.word	.LANCHOR0
 380 0060 00000000 		.word	.LANCHOR2
 381 0064 00000000 		.word	.LANCHOR8
 382              		.cfi_endproc
 383              	.LFE35:
 385              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 386              		.align	2
 387              		.thumb
 388              		.thumb_func
 390              	prvAddNewTaskToReadyList:
 391              	.LFB7:
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 392              		.loc 1 964 0
 393              		.cfi_startproc
 394              		@ args = 0, pretend = 0, frame = 0
 395              		@ frame_needed = 0, uses_anonymous_args = 0
 396              	.LVL39:
 397 0000 10B5     		push	{r4, lr}
 398              	.LCFI3:
 399              		.cfi_def_cfa_offset 8
 400              		.cfi_offset 4, -8
 401              		.cfi_offset 14, -4
 402 0002 0446     		mov	r4, r0
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 403              		.loc 1 967 0
 404 0004 FFF7FEFF 		bl	vPortEnterCritical
 405              	.LVL40:
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 406              		.loc 1 969 0
 407 0008 204A     		ldr	r2, .L42
 408 000a 1368     		ldr	r3, [r2]
 409 000c 0133     		adds	r3, r3, #1
ARM GAS  /tmp/ccu6CPJi.s 			page 77


 410 000e 1360     		str	r3, [r2]
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 411              		.loc 1 970 0
 412 0010 1F4B     		ldr	r3, .L42+4
 413 0012 1B68     		ldr	r3, [r3]
 414 0014 3BB9     		cbnz	r3, .L38
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 415              		.loc 1 974 0
 416 0016 1E4B     		ldr	r3, .L42+4
 417 0018 1C60     		str	r4, [r3]
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 418              		.loc 1 976 0
 419 001a 1368     		ldr	r3, [r2]
 420 001c 012B     		cmp	r3, #1
 421 001e 0DD1     		bne	.L39
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 422              		.loc 1 981 0
 423 0020 FFF7FEFF 		bl	prvInitialiseTaskLists
 424              	.LVL41:
 425 0024 0AE0     		b	.L39
 426              	.L38:
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 427              		.loc 1 993 0
 428 0026 1B4B     		ldr	r3, .L42+8
 429 0028 1B68     		ldr	r3, [r3]
 430 002a 3BB9     		cbnz	r3, .L39
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 431              		.loc 1 995 0
 432 002c 184B     		ldr	r3, .L42+4
 433 002e 1B68     		ldr	r3, [r3]
 434 0030 DA6A     		ldr	r2, [r3, #44]
 435 0032 E36A     		ldr	r3, [r4, #44]
 436 0034 9A42     		cmp	r2, r3
 437 0036 01D8     		bhi	.L39
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 438              		.loc 1 997 0
 439 0038 154B     		ldr	r3, .L42+4
 440 003a 1C60     		str	r4, [r3]
 441              	.L39:
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 442              		.loc 1 1010 0
 443 003c 164A     		ldr	r2, .L42+12
 444 003e 1368     		ldr	r3, [r2]
 445 0040 0133     		adds	r3, r3, #1
 446 0042 1360     		str	r3, [r2]
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 447              		.loc 1 1020 0
 448 0044 E06A     		ldr	r0, [r4, #44]
 449 0046 0123     		movs	r3, #1
 450 0048 8340     		lsls	r3, r3, r0
 451 004a 1449     		ldr	r1, .L42+16
 452 004c 0A68     		ldr	r2, [r1]
 453 004e 1343     		orrs	r3, r3, r2
 454 0050 0B60     		str	r3, [r1]
 455 0052 00EB8000 		add	r0, r0, r0, lsl #2
 456 0056 8000     		lsls	r0, r0, #2
 457 0058 114B     		ldr	r3, .L42+20
ARM GAS  /tmp/ccu6CPJi.s 			page 78


 458 005a 1844     		add	r0, r0, r3
 459 005c 211D     		adds	r1, r4, #4
 460 005e FFF7FEFF 		bl	vListInsertEnd
 461              	.LVL42:
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 462              		.loc 1 1024 0
 463 0062 FFF7FEFF 		bl	vPortExitCritical
 464              	.LVL43:
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 465              		.loc 1 1026 0
 466 0066 0B4B     		ldr	r3, .L42+8
 467 0068 1B68     		ldr	r3, [r3]
 468 006a 6BB1     		cbz	r3, .L37
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 469              		.loc 1 1030 0
 470 006c 084B     		ldr	r3, .L42+4
 471 006e 1B68     		ldr	r3, [r3]
 472 0070 DA6A     		ldr	r2, [r3, #44]
 473 0072 E36A     		ldr	r3, [r4, #44]
 474 0074 9A42     		cmp	r2, r3
 475 0076 07D2     		bcs	.L37
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 476              		.loc 1 1032 0
 477 0078 4FF08052 		mov	r2, #268435456
 478 007c 094B     		ldr	r3, .L42+24
 479 007e 1A60     		str	r2, [r3]
 480              	@ 1032 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 481 0080 BFF34F8F 		dsb
 482              	@ 0 "" 2
 483              	@ 1032 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 484 0084 BFF36F8F 		isb
 485              	@ 0 "" 2
 486              		.thumb
 487              	.L37:
 488 0088 10BD     		pop	{r4, pc}
 489              	.LVL44:
 490              	.L43:
 491 008a 00BF     		.align	2
 492              	.L42:
 493 008c 00000000 		.word	.LANCHOR9
 494 0090 00000000 		.word	.LANCHOR10
 495 0094 00000000 		.word	.LANCHOR11
 496 0098 00000000 		.word	.LANCHOR12
 497 009c 00000000 		.word	.LANCHOR13
 498 00a0 00000000 		.word	.LANCHOR4
 499 00a4 04ED00E0 		.word	-536810236
 500              		.cfi_endproc
 501              	.LFE7:
 503              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 504              		.align	2
 505              		.thumb
 506              		.thumb_func
 508              	prvAddCurrentTaskToDelayedList:
 509              	.LFB51:
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccu6CPJi.s 			page 79


3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL. */
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
ARM GAS  /tmp/ccu6CPJi.s 			page 80


3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	being used for anything else. */
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListI
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccu6CPJi.s 			page 81


3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding	task then it must be the running state task.  Remove
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the	holding task from the ready	list. */
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
ARM GAS  /tmp/ccu6CPJi.s 			page 82


3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
ARM GAS  /tmp/ccu6CPJi.s 			page 83


3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = 0x00;
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
ARM GAS  /tmp/ccu6CPJi.s 			page 84


3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
ARM GAS  /tmp/ccu6CPJi.s 			page 85


4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = 0x00;
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
ARM GAS  /tmp/ccu6CPJi.s 			page 86


4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0 )
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
ARM GAS  /tmp/ccu6CPJi.s 			page 87


4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
ARM GAS  /tmp/ccu6CPJi.s 			page 88


4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccu6CPJi.s 			page 89


4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - 1;
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccu6CPJi.s 			page 90


4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState == taskWAITING_NOTIFICATION )
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
ARM GAS  /tmp/ccu6CPJi.s 			page 91


4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
ARM GAS  /tmp/ccu6CPJi.s 			page 92


4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccu6CPJi.s 			page 93


4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
ARM GAS  /tmp/ccu6CPJi.s 			page 94


4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter to an ISR
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  /tmp/ccu6CPJi.s 			page 95


4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
ARM GAS  /tmp/ccu6CPJi.s 			page 96


4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter in an ISR
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
ARM GAS  /tmp/ccu6CPJi.s 			page 97


4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 510              		.loc 1 4693 0
 511              		.cfi_startproc
 512              		@ args = 0, pretend = 0, frame = 0
 513              		@ frame_needed = 0, uses_anonymous_args = 0
 514              	.LVL45:
 515 0000 70B5     		push	{r4, r5, r6, lr}
 516              	.LCFI4:
 517              		.cfi_def_cfa_offset 16
 518              		.cfi_offset 4, -16
 519              		.cfi_offset 5, -12
 520              		.cfi_offset 6, -8
 521              		.cfi_offset 14, -4
 522 0002 0446     		mov	r4, r0
 523 0004 0E46     		mov	r6, r1
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 524              		.loc 1 4695 0
 525 0006 1C4B     		ldr	r3, .L50
 526 0008 1D68     		ldr	r5, [r3]
 527              	.LVL46:
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 528              		.loc 1 4708 0
 529 000a 1C4B     		ldr	r3, .L50+4
 530 000c 1868     		ldr	r0, [r3]
 531              	.LVL47:
 532 000e 0430     		adds	r0, r0, #4
 533 0010 FFF7FEFF 		bl	uxListRemove
 534              	.LVL48:
 535 0014 48B9     		cbnz	r0, .L45
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 536              		.loc 1 4712 0
 537 0016 194B     		ldr	r3, .L50+4
ARM GAS  /tmp/ccu6CPJi.s 			page 98


 538 0018 1B68     		ldr	r3, [r3]
 539 001a DA6A     		ldr	r2, [r3, #44]
 540 001c 0123     		movs	r3, #1
 541 001e 9340     		lsls	r3, r3, r2
 542 0020 1749     		ldr	r1, .L50+8
 543 0022 0A68     		ldr	r2, [r1]
 544 0024 22EA0303 		bic	r3, r2, r3
 545 0028 0B60     		str	r3, [r1]
 546              	.L45:
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 547              		.loc 1 4721 0
 548 002a B4F1FF3F 		cmp	r4, #-1
 549 002e 07D1     		bne	.L46
 550              		.loc 1 4721 0 is_stmt 0 discriminator 1
 551 0030 36B1     		cbz	r6, .L46
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 552              		.loc 1 4726 0 is_stmt 1
 553 0032 124B     		ldr	r3, .L50+4
 554 0034 1968     		ldr	r1, [r3]
 555 0036 1348     		ldr	r0, .L50+12
 556 0038 0431     		adds	r1, r1, #4
 557 003a FFF7FEFF 		bl	vListInsertEnd
 558              	.LVL49:
 559 003e 70BD     		pop	{r4, r5, r6, pc}
 560              	.LVL50:
 561              	.L46:
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 562              		.loc 1 4733 0
 563 0040 2C44     		add	r4, r4, r5
 564              	.LVL51:
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 565              		.loc 1 4736 0
 566 0042 0E4B     		ldr	r3, .L50+4
 567 0044 1B68     		ldr	r3, [r3]
 568 0046 5C60     		str	r4, [r3, #4]
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
ARM GAS  /tmp/ccu6CPJi.s 			page 99


 569              		.loc 1 4738 0
 570 0048 AC42     		cmp	r4, r5
 571 004a 07D2     		bcs	.L48
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 572              		.loc 1 4742 0
 573 004c 0E4B     		ldr	r3, .L50+16
 574 004e 1868     		ldr	r0, [r3]
 575 0050 0A4B     		ldr	r3, .L50+4
 576 0052 1968     		ldr	r1, [r3]
 577 0054 0431     		adds	r1, r1, #4
 578 0056 FFF7FEFF 		bl	vListInsert
 579              	.LVL52:
 580 005a 70BD     		pop	{r4, r5, r6, pc}
 581              	.LVL53:
 582              	.L48:
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 583              		.loc 1 4748 0
 584 005c 0B4B     		ldr	r3, .L50+20
 585 005e 1868     		ldr	r0, [r3]
 586 0060 064B     		ldr	r3, .L50+4
 587 0062 1968     		ldr	r1, [r3]
 588 0064 0431     		adds	r1, r1, #4
 589 0066 FFF7FEFF 		bl	vListInsert
 590              	.LVL54:
4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
 591              		.loc 1 4753 0
 592 006a 094B     		ldr	r3, .L50+24
 593 006c 1B68     		ldr	r3, [r3]
 594 006e 9C42     		cmp	r4, r3
 595 0070 01D2     		bcs	.L44
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 596              		.loc 1 4755 0
 597 0072 074B     		ldr	r3, .L50+24
 598 0074 1C60     		str	r4, [r3]
 599              	.L44:
 600 0076 70BD     		pop	{r4, r5, r6, pc}
 601              	.LVL55:
 602              	.L51:
 603              		.align	2
 604              	.L50:
 605 0078 00000000 		.word	.LANCHOR14
 606 007c 00000000 		.word	.LANCHOR10
 607 0080 00000000 		.word	.LANCHOR13
 608 0084 00000000 		.word	.LANCHOR0
ARM GAS  /tmp/ccu6CPJi.s 			page 100


 609 0088 00000000 		.word	.LANCHOR8
 610 008c 00000000 		.word	.LANCHOR2
 611 0090 00000000 		.word	.LANCHOR3
 612              		.cfi_endproc
 613              	.LFE51:
 615              		.section	.text.xTaskCreate,"ax",%progbits
 616              		.align	2
 617              		.global	xTaskCreate
 618              		.thumb
 619              		.thumb_func
 621              	xTaskCreate:
 622              	.LFB5:
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 623              		.loc 1 682 0
 624              		.cfi_startproc
 625              		@ args = 8, pretend = 0, frame = 0
 626              		@ frame_needed = 0, uses_anonymous_args = 0
 627              	.LVL56:
 628 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 629              	.LCFI5:
 630              		.cfi_def_cfa_offset 28
 631              		.cfi_offset 4, -28
 632              		.cfi_offset 5, -24
 633              		.cfi_offset 6, -20
 634              		.cfi_offset 7, -16
 635              		.cfi_offset 8, -12
 636              		.cfi_offset 9, -8
 637              		.cfi_offset 14, -4
 638 0004 85B0     		sub	sp, sp, #20
 639              	.LCFI6:
 640              		.cfi_def_cfa_offset 48
 641 0006 8046     		mov	r8, r0
 642 0008 0F46     		mov	r7, r1
 643 000a 1546     		mov	r5, r2
 644 000c 1E46     		mov	r6, r3
 645              	.LBB92:
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 646              		.loc 1 716 0
 647 000e 9000     		lsls	r0, r2, #2
 648              	.LVL57:
 649 0010 FFF7FEFF 		bl	pvPortMalloc
 650              	.LVL58:
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 651              		.loc 1 718 0
 652 0014 60B1     		cbz	r0, .L56
 653 0016 8146     		mov	r9, r0
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 654              		.loc 1 721 0
 655 0018 5420     		movs	r0, #84
 656              	.LVL59:
 657 001a FFF7FEFF 		bl	pvPortMalloc
 658              	.LVL60:
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 659              		.loc 1 723 0
 660 001e 0446     		mov	r4, r0
 661 0020 10B1     		cbz	r0, .L54
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/ccu6CPJi.s 			page 101


 662              		.loc 1 726 0
 663 0022 C0F83090 		str	r9, [r0, #48]
 664 0026 04E0     		b	.L53
 665              	.L54:
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 666              		.loc 1 732 0
 667 0028 4846     		mov	r0, r9
 668              	.LVL61:
 669 002a FFF7FEFF 		bl	vPortFree
 670              	.LVL62:
 671 002e 00E0     		b	.L53
 672              	.LVL63:
 673              	.L56:
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 674              		.loc 1 737 0
 675 0030 0024     		movs	r4, #0
 676              	.LVL64:
 677              	.L53:
 678              	.LBE92:
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 679              		.loc 1 742 0
 680 0032 8CB1     		cbz	r4, .L57
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 681              		.loc 1 752 0
 682 0034 0C9B     		ldr	r3, [sp, #48]
 683 0036 0093     		str	r3, [sp]
 684 0038 0D9B     		ldr	r3, [sp, #52]
 685 003a 0193     		str	r3, [sp, #4]
 686 003c 0294     		str	r4, [sp, #8]
 687 003e 0023     		movs	r3, #0
 688 0040 0393     		str	r3, [sp, #12]
 689 0042 4046     		mov	r0, r8
 690 0044 3946     		mov	r1, r7
 691 0046 2A46     		mov	r2, r5
 692 0048 3346     		mov	r3, r6
 693 004a FFF7FEFF 		bl	prvInitialiseNewTask
 694              	.LVL65:
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 695              		.loc 1 753 0
 696 004e 2046     		mov	r0, r4
 697 0050 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 698              	.LVL66:
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 699              		.loc 1 754 0
 700 0054 0120     		movs	r0, #1
 701 0056 01E0     		b	.L55
 702              	.LVL67:
 703              	.L57:
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 704              		.loc 1 758 0
 705 0058 4FF0FF30 		mov	r0, #-1
 706              	.L55:
 707              	.LVL68:
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 708              		.loc 1 762 0
 709 005c 05B0     		add	sp, sp, #20
 710              	.LCFI7:
ARM GAS  /tmp/ccu6CPJi.s 			page 102


 711              		.cfi_def_cfa_offset 28
 712              		@ sp needed
 713 005e BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 714              		.cfi_endproc
 715              	.LFE5:
 717 0062 00BF     		.section	.text.vTaskDelete,"ax",%progbits
 718              		.align	2
 719              		.global	vTaskDelete
 720              		.thumb
 721              		.thumb_func
 723              	vTaskDelete:
 724              	.LFB8:
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 725              		.loc 1 1049 0
 726              		.cfi_startproc
 727              		@ args = 0, pretend = 0, frame = 0
 728              		@ frame_needed = 0, uses_anonymous_args = 0
 729              	.LVL69:
 730 0000 38B5     		push	{r3, r4, r5, lr}
 731              	.LCFI8:
 732              		.cfi_def_cfa_offset 16
 733              		.cfi_offset 3, -16
 734              		.cfi_offset 4, -12
 735              		.cfi_offset 5, -8
 736              		.cfi_offset 14, -4
 737 0002 0446     		mov	r4, r0
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 738              		.loc 1 1052 0
 739 0004 FFF7FEFF 		bl	vPortEnterCritical
 740              	.LVL70:
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 741              		.loc 1 1056 0
 742 0008 0CB9     		cbnz	r4, .L60
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 743              		.loc 1 1056 0 is_stmt 0 discriminator 1
 744 000a 2A4B     		ldr	r3, .L69
 745 000c 1C68     		ldr	r4, [r3]
 746              	.LVL71:
 747              	.L60:
1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 748              		.loc 1 1059 0 is_stmt 1 discriminator 4
 749 000e 251D     		adds	r5, r4, #4
 750 0010 2846     		mov	r0, r5
 751 0012 FFF7FEFF 		bl	uxListRemove
 752              	.LVL72:
 753 0016 70B9     		cbnz	r0, .L61
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 754              		.loc 1 1061 0
 755 0018 E26A     		ldr	r2, [r4, #44]
 756 001a 02EB8203 		add	r3, r2, r2, lsl #2
 757 001e 9B00     		lsls	r3, r3, #2
 758 0020 2549     		ldr	r1, .L69+4
 759 0022 CB58     		ldr	r3, [r1, r3]
 760 0024 3BB9     		cbnz	r3, .L61
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 761              		.loc 1 1061 0 is_stmt 0 discriminator 1
 762 0026 0123     		movs	r3, #1
ARM GAS  /tmp/ccu6CPJi.s 			page 103


 763 0028 03FA02F2 		lsl	r2, r3, r2
 764 002c 2349     		ldr	r1, .L69+8
 765 002e 0B68     		ldr	r3, [r1]
 766 0030 23EA0203 		bic	r3, r3, r2
 767 0034 0B60     		str	r3, [r1]
 768              	.L61:
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 769              		.loc 1 1069 0 is_stmt 1
 770 0036 A36A     		ldr	r3, [r4, #40]
 771 0038 1BB1     		cbz	r3, .L62
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 772              		.loc 1 1071 0
 773 003a 04F11800 		add	r0, r4, #24
 774 003e FFF7FEFF 		bl	uxListRemove
 775              	.LVL73:
 776              	.L62:
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 777              		.loc 1 1082 0
 778 0042 1F4A     		ldr	r2, .L69+12
 779 0044 1368     		ldr	r3, [r2]
 780 0046 0133     		adds	r3, r3, #1
 781 0048 1360     		str	r3, [r2]
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 782              		.loc 1 1084 0
 783 004a 1A4B     		ldr	r3, .L69
 784 004c 1B68     		ldr	r3, [r3]
 785 004e 9C42     		cmp	r4, r3
 786 0050 08D1     		bne	.L63
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 787              		.loc 1 1091 0
 788 0052 1C48     		ldr	r0, .L69+16
 789 0054 2946     		mov	r1, r5
 790 0056 FFF7FEFF 		bl	vListInsertEnd
 791              	.LVL74:
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 792              		.loc 1 1096 0
 793 005a 1B4A     		ldr	r2, .L69+20
 794 005c 1368     		ldr	r3, [r2]
 795 005e 0133     		adds	r3, r3, #1
 796 0060 1360     		str	r3, [r2]
 797 0062 08E0     		b	.L64
 798              	.L63:
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 799              		.loc 1 1107 0
 800 0064 194A     		ldr	r2, .L69+24
 801 0066 1368     		ldr	r3, [r2]
 802 0068 013B     		subs	r3, r3, #1
 803 006a 1360     		str	r3, [r2]
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 804              		.loc 1 1108 0
 805 006c 2046     		mov	r0, r4
 806 006e FFF7FEFF 		bl	prvDeleteTCB
 807              	.LVL75:
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 808              		.loc 1 1112 0
 809 0072 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 810              	.LVL76:
ARM GAS  /tmp/ccu6CPJi.s 			page 104


 811              	.L64:
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 812              		.loc 1 1117 0
 813 0076 FFF7FEFF 		bl	vPortExitCritical
 814              	.LVL77:
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 815              		.loc 1 1121 0
 816 007a 154B     		ldr	r3, .L69+28
 817 007c 1B68     		ldr	r3, [r3]
 818 007e BBB1     		cbz	r3, .L59
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 819              		.loc 1 1123 0
 820 0080 0C4B     		ldr	r3, .L69
 821 0082 1B68     		ldr	r3, [r3]
 822 0084 9C42     		cmp	r4, r3
 823 0086 13D1     		bne	.L59
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 824              		.loc 1 1125 0
 825 0088 124B     		ldr	r3, .L69+32
 826 008a 1B68     		ldr	r3, [r3]
 827 008c 43B1     		cbz	r3, .L66
 828              	.LBB93:
 829              	.LBB94:
 830              		.loc 2 237 0
 831              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 832 008e 4FF05003 			mov r3, #80												
 833 0092 83F31188 		msr basepri, r3											
 834 0096 BFF36F8F 		isb														
 835 009a BFF34F8F 		dsb														
 836              	
 837              	@ 0 "" 2
 838              	.LVL78:
 839              		.thumb
 840              	.L67:
 841              	.LBE94:
 842              	.LBE93:
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 843              		.loc 1 1125 0 discriminator 1
 844 009e FEE7     		b	.L67
 845              	.L66:
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 846              		.loc 1 1126 0
 847 00a0 4FF08052 		mov	r2, #268435456
 848 00a4 0C4B     		ldr	r3, .L69+36
 849 00a6 1A60     		str	r2, [r3]
 850              	@ 1126 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 851 00a8 BFF34F8F 		dsb
 852              	@ 0 "" 2
 853              	@ 1126 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 854 00ac BFF36F8F 		isb
 855              	@ 0 "" 2
 856              		.thumb
 857              	.L59:
 858 00b0 38BD     		pop	{r3, r4, r5, pc}
 859              	.LVL79:
 860              	.L70:
 861 00b2 00BF     		.align	2
ARM GAS  /tmp/ccu6CPJi.s 			page 105


 862              	.L69:
 863 00b4 00000000 		.word	.LANCHOR10
 864 00b8 00000000 		.word	.LANCHOR4
 865 00bc 00000000 		.word	.LANCHOR13
 866 00c0 00000000 		.word	.LANCHOR12
 867 00c4 00000000 		.word	.LANCHOR7
 868 00c8 00000000 		.word	.LANCHOR15
 869 00cc 00000000 		.word	.LANCHOR9
 870 00d0 00000000 		.word	.LANCHOR11
 871 00d4 00000000 		.word	.LANCHOR16
 872 00d8 04ED00E0 		.word	-536810236
 873              		.cfi_endproc
 874              	.LFE8:
 876              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 877              		.align	2
 878              		.global	uxTaskPriorityGet
 879              		.thumb
 880              		.thumb_func
 882              	uxTaskPriorityGet:
 883              	.LFB10:
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 884              		.loc 1 1341 0
 885              		.cfi_startproc
 886              		@ args = 0, pretend = 0, frame = 0
 887              		@ frame_needed = 0, uses_anonymous_args = 0
 888              	.LVL80:
 889 0000 10B5     		push	{r4, lr}
 890              	.LCFI9:
 891              		.cfi_def_cfa_offset 8
 892              		.cfi_offset 4, -8
 893              		.cfi_offset 14, -4
 894 0002 0446     		mov	r4, r0
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 895              		.loc 1 1345 0
 896 0004 FFF7FEFF 		bl	vPortEnterCritical
 897              	.LVL81:
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 898              		.loc 1 1349 0
 899 0008 0CB9     		cbnz	r4, .L72
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 900              		.loc 1 1349 0 is_stmt 0 discriminator 1
 901 000a 034B     		ldr	r3, .L74
 902 000c 1C68     		ldr	r4, [r3]
 903              	.LVL82:
 904              	.L72:
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 905              		.loc 1 1350 0 is_stmt 1 discriminator 4
 906 000e E46A     		ldr	r4, [r4, #44]
 907              	.LVL83:
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 908              		.loc 1 1352 0 discriminator 4
 909 0010 FFF7FEFF 		bl	vPortExitCritical
 910              	.LVL84:
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 911              		.loc 1 1355 0 discriminator 4
 912 0014 2046     		mov	r0, r4
 913 0016 10BD     		pop	{r4, pc}
ARM GAS  /tmp/ccu6CPJi.s 			page 106


 914              	.LVL85:
 915              	.L75:
 916              		.align	2
 917              	.L74:
 918 0018 00000000 		.word	.LANCHOR10
 919              		.cfi_endproc
 920              	.LFE10:
 922              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 923              		.align	2
 924              		.global	uxTaskPriorityGetFromISR
 925              		.thumb
 926              		.thumb_func
 928              	uxTaskPriorityGetFromISR:
 929              	.LFB11:
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 930              		.loc 1 1363 0
 931              		.cfi_startproc
 932              		@ args = 0, pretend = 0, frame = 0
 933              		@ frame_needed = 0, uses_anonymous_args = 0
 934              	.LVL86:
 935 0000 10B5     		push	{r4, lr}
 936              	.LCFI10:
 937              		.cfi_def_cfa_offset 8
 938              		.cfi_offset 4, -8
 939              		.cfi_offset 14, -4
 940 0002 0446     		mov	r4, r0
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 941              		.loc 1 1383 0
 942 0004 FFF7FEFF 		bl	vPortValidateInterruptPriority
 943              	.LVL87:
 944              	.LBB95:
 945              	.LBB96:
 238:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 239:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 240:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 241:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 242:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 243:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 244:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 245:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 246:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 247:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 248:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 249:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 250:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 251:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 252:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 946              		.loc 2 253 0
 947              	@ 253 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 948 0008 EFF31183 			mrs r3, basepri											
 949 000c 4FF05002 		mov r2, #80												
 950 0010 82F31188 		msr basepri, r2											
 951 0014 BFF36F8F 		isb														
 952 0018 BFF34F8F 		dsb														
 953              	
 954              	@ 0 "" 2
ARM GAS  /tmp/ccu6CPJi.s 			page 107


 955              	.LVL88:
 956              		.thumb
 957              	.LBE96:
 958              	.LBE95:
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 959              		.loc 1 1389 0
 960 001c 0CB9     		cbnz	r4, .L77
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 961              		.loc 1 1389 0 is_stmt 0 discriminator 1
 962 001e 034A     		ldr	r2, .L79
 963 0020 1468     		ldr	r4, [r2]
 964              	.LVL89:
 965              	.L77:
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 966              		.loc 1 1390 0 is_stmt 1 discriminator 4
 967 0022 E06A     		ldr	r0, [r4, #44]
 968              	.LVL90:
 969              	.LBB97:
 970              	.LBB98:
 254:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 255:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 256:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 257:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 258:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 259:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 260:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
 261:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 262:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 263:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 264:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 265:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 266:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 267:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 268:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 269:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 270:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 271:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 971              		.loc 2 271 0 discriminator 4
 972              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 973 0024 83F31188 			msr basepri, r3	
 974              	@ 0 "" 2
 975              		.thumb
 976              	.LBE98:
 977              	.LBE97:
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 978              		.loc 1 1395 0 discriminator 4
 979 0028 10BD     		pop	{r4, pc}
 980              	.LVL91:
 981              	.L80:
 982 002a 00BF     		.align	2
 983              	.L79:
 984 002c 00000000 		.word	.LANCHOR10
 985              		.cfi_endproc
 986              	.LFE11:
 988              		.section	.text.vTaskPrioritySet,"ax",%progbits
 989              		.align	2
 990              		.global	vTaskPrioritySet
ARM GAS  /tmp/ccu6CPJi.s 			page 108


 991              		.thumb
 992              		.thumb_func
 994              	vTaskPrioritySet:
 995              	.LFB12:
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 996              		.loc 1 1403 0
 997              		.cfi_startproc
 998              		@ args = 0, pretend = 0, frame = 0
 999              		@ frame_needed = 0, uses_anonymous_args = 0
 1000              	.LVL92:
 1001 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1002              	.LCFI11:
 1003              		.cfi_def_cfa_offset 24
 1004              		.cfi_offset 3, -24
 1005              		.cfi_offset 4, -20
 1006              		.cfi_offset 5, -16
 1007              		.cfi_offset 6, -12
 1008              		.cfi_offset 7, -8
 1009              		.cfi_offset 14, -4
 1010 0002 0D46     		mov	r5, r1
 1011              	.LVL93:
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1012              		.loc 1 1408 0
 1013 0004 0629     		cmp	r1, #6
 1014 0006 08D9     		bls	.L82
 1015              	.LBB99:
 1016              	.LBB100:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1017              		.loc 2 237 0
 1018              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1019 0008 4FF05003 			mov r3, #80												
 1020 000c 83F31188 		msr basepri, r3											
 1021 0010 BFF36F8F 		isb														
 1022 0014 BFF34F8F 		dsb														
 1023              	
 1024              	@ 0 "" 2
 1025              	.LVL94:
 1026              		.thumb
 1027              	.L83:
 1028              	.LBE100:
 1029              	.LBE99:
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1030              		.loc 1 1408 0 discriminator 1
 1031 0018 FEE7     		b	.L83
 1032              	.L82:
 1033 001a 0446     		mov	r4, r0
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1034              		.loc 1 1411 0
 1035 001c 0629     		cmp	r1, #6
 1036 001e 00D9     		bls	.L84
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1037              		.loc 1 1413 0
 1038 0020 0625     		movs	r5, #6
 1039              	.L84:
 1040              	.LVL95:
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1041              		.loc 1 1420 0
ARM GAS  /tmp/ccu6CPJi.s 			page 109


 1042 0022 FFF7FEFF 		bl	vPortEnterCritical
 1043              	.LVL96:
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1044              		.loc 1 1424 0
 1045 0026 0CB9     		cbnz	r4, .L85
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1046              		.loc 1 1424 0 is_stmt 0 discriminator 1
 1047 0028 2E4B     		ldr	r3, .L100
 1048 002a 1C68     		ldr	r4, [r3]
 1049              	.LVL97:
 1050              	.L85:
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1051              		.loc 1 1430 0 is_stmt 1 discriminator 4
 1052 002c 636C     		ldr	r3, [r4, #68]
 1053              	.LVL98:
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1054              		.loc 1 1438 0 discriminator 4
 1055 002e AB42     		cmp	r3, r5
 1056 0030 54D0     		beq	.L86
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1057              		.loc 1 1442 0
 1058 0032 9D42     		cmp	r5, r3
 1059 0034 0AD9     		bls	.L87
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1060              		.loc 1 1444 0
 1061 0036 2B4A     		ldr	r2, .L100
 1062 0038 1268     		ldr	r2, [r2]
 1063 003a 9442     		cmp	r4, r2
 1064 003c 0CD0     		beq	.L95
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 1065              		.loc 1 1449 0
 1066 003e 294A     		ldr	r2, .L100
 1067 0040 1268     		ldr	r2, [r2]
 1068 0042 D26A     		ldr	r2, [r2, #44]
 1069 0044 AA42     		cmp	r2, r5
 1070 0046 09D9     		bls	.L96
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1071              		.loc 1 1406 0
 1072 0048 0026     		movs	r6, #0
 1073 004a 0AE0     		b	.L88
 1074              	.L87:
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1075              		.loc 1 1465 0
 1076 004c 254A     		ldr	r2, .L100
 1077 004e 1268     		ldr	r2, [r2]
 1078 0050 9442     		cmp	r4, r2
 1079 0052 05D0     		beq	.L97
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1080              		.loc 1 1406 0
 1081 0054 0026     		movs	r6, #0
 1082 0056 04E0     		b	.L88
 1083              	.L95:
 1084 0058 0026     		movs	r6, #0
 1085 005a 02E0     		b	.L88
 1086              	.L96:
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 1087              		.loc 1 1451 0
ARM GAS  /tmp/ccu6CPJi.s 			page 110


 1088 005c 0126     		movs	r6, #1
 1089 005e 00E0     		b	.L88
 1090              	.L97:
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1091              		.loc 1 1470 0
 1092 0060 0126     		movs	r6, #1
 1093              	.L88:
 1094              	.LVL99:
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1095              		.loc 1 1482 0
 1096 0062 E76A     		ldr	r7, [r4, #44]
 1097              	.LVL100:
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1098              		.loc 1 1488 0
 1099 0064 BB42     		cmp	r3, r7
 1100 0066 00D1     		bne	.L89
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1101              		.loc 1 1490 0
 1102 0068 E562     		str	r5, [r4, #44]
 1103              	.L89:
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1104              		.loc 1 1498 0
 1105 006a 6564     		str	r5, [r4, #68]
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1106              		.loc 1 1508 0
 1107 006c A369     		ldr	r3, [r4, #24]
 1108              	.LVL101:
 1109 006e 002B     		cmp	r3, #0
 1110 0070 02DB     		blt	.L90
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1111              		.loc 1 1510 0
 1112 0072 C5F10705 		rsb	r5, r5, #7
 1113              	.LVL102:
 1114 0076 A561     		str	r5, [r4, #24]
 1115              	.L90:
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1116              		.loc 1 1521 0
 1117 0078 6269     		ldr	r2, [r4, #20]
 1118 007a 07EB8703 		add	r3, r7, r7, lsl #2
 1119 007e 9B00     		lsls	r3, r3, #2
 1120 0080 1949     		ldr	r1, .L100+4
 1121 0082 0B44     		add	r3, r3, r1
 1122 0084 9A42     		cmp	r2, r3
 1123 0086 01D1     		bne	.L98
 1124 0088 0123     		movs	r3, #1
 1125 008a 00E0     		b	.L91
 1126              	.L98:
 1127 008c 0023     		movs	r3, #0
 1128              	.L91:
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1129              		.loc 1 1521 0 is_stmt 0 discriminator 4
 1130 008e E3B1     		cbz	r3, .L92
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1131              		.loc 1 1526 0 is_stmt 1
 1132 0090 251D     		adds	r5, r4, #4
 1133 0092 2846     		mov	r0, r5
 1134 0094 FFF7FEFF 		bl	uxListRemove
ARM GAS  /tmp/ccu6CPJi.s 			page 111


 1135              	.LVL103:
 1136 0098 38B9     		cbnz	r0, .L93
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1137              		.loc 1 1531 0
 1138 009a 0123     		movs	r3, #1
 1139 009c 03FA07F2 		lsl	r2, r3, r7
 1140 00a0 1249     		ldr	r1, .L100+8
 1141 00a2 0B68     		ldr	r3, [r1]
 1142 00a4 23EA0203 		bic	r3, r3, r2
 1143 00a8 0B60     		str	r3, [r1]
 1144              	.L93:
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1145              		.loc 1 1537 0
 1146 00aa E36A     		ldr	r3, [r4, #44]
 1147 00ac 0122     		movs	r2, #1
 1148 00ae 02FA03F1 		lsl	r1, r2, r3
 1149 00b2 0E48     		ldr	r0, .L100+8
 1150 00b4 0268     		ldr	r2, [r0]
 1151 00b6 0A43     		orrs	r2, r2, r1
 1152 00b8 0260     		str	r2, [r0]
 1153 00ba 03EB8303 		add	r3, r3, r3, lsl #2
 1154 00be 9B00     		lsls	r3, r3, #2
 1155 00c0 0948     		ldr	r0, .L100+4
 1156 00c2 1844     		add	r0, r0, r3
 1157 00c4 2946     		mov	r1, r5
 1158 00c6 FFF7FEFF 		bl	vListInsertEnd
 1159              	.LVL104:
 1160              	.L92:
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1161              		.loc 1 1544 0
 1162 00ca 3EB1     		cbz	r6, .L86
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1163              		.loc 1 1546 0
 1164 00cc 4FF08052 		mov	r2, #268435456
 1165 00d0 074B     		ldr	r3, .L100+12
 1166 00d2 1A60     		str	r2, [r3]
 1167              	@ 1546 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1168 00d4 BFF34F8F 		dsb
 1169              	@ 0 "" 2
 1170              	@ 1546 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1171 00d8 BFF36F8F 		isb
 1172              	@ 0 "" 2
 1173              	.LVL105:
 1174              		.thumb
 1175              	.L86:
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1176              		.loc 1 1558 0
 1177 00dc FFF7FEFF 		bl	vPortExitCritical
 1178              	.LVL106:
 1179 00e0 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1180              	.LVL107:
 1181              	.L101:
 1182 00e2 00BF     		.align	2
 1183              	.L100:
 1184 00e4 00000000 		.word	.LANCHOR10
 1185 00e8 00000000 		.word	.LANCHOR4
 1186 00ec 00000000 		.word	.LANCHOR13
ARM GAS  /tmp/ccu6CPJi.s 			page 112


 1187 00f0 04ED00E0 		.word	-536810236
 1188              		.cfi_endproc
 1189              	.LFE12:
 1191              		.section	.text.vTaskResume,"ax",%progbits
 1192              		.align	2
 1193              		.global	vTaskResume
 1194              		.thumb
 1195              		.thumb_func
 1197              	vTaskResume:
 1198              	.LFB15:
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1199              		.loc 1 1703 0
 1200              		.cfi_startproc
 1201              		@ args = 0, pretend = 0, frame = 0
 1202              		@ frame_needed = 0, uses_anonymous_args = 0
 1203              	.LVL108:
 1204 0000 38B5     		push	{r3, r4, r5, lr}
 1205              	.LCFI12:
 1206              		.cfi_def_cfa_offset 16
 1207              		.cfi_offset 3, -16
 1208              		.cfi_offset 4, -12
 1209              		.cfi_offset 5, -8
 1210              		.cfi_offset 14, -4
 1211              	.LVL109:
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1212              		.loc 1 1707 0
 1213 0002 40B9     		cbnz	r0, .L103
 1214              	.LBB101:
 1215              	.LBB102:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1216              		.loc 2 237 0
 1217              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1218 0004 4FF05003 			mov r3, #80												
 1219 0008 83F31188 		msr basepri, r3											
 1220 000c BFF36F8F 		isb														
 1221 0010 BFF34F8F 		dsb														
 1222              	
 1223              	@ 0 "" 2
 1224              	.LVL110:
 1225              		.thumb
 1226              	.L104:
 1227              	.LBE102:
 1228              	.LBE101:
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1229              		.loc 1 1707 0 discriminator 1
 1230 0014 FEE7     		b	.L104
 1231              	.L103:
 1232 0016 0446     		mov	r4, r0
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1233              		.loc 1 1711 0
 1234 0018 68B3     		cbz	r0, .L102
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1235              		.loc 1 1711 0 is_stmt 0 discriminator 1
 1236 001a 174B     		ldr	r3, .L108
 1237 001c 1B68     		ldr	r3, [r3]
 1238 001e 9842     		cmp	r0, r3
 1239 0020 29D0     		beq	.L102
ARM GAS  /tmp/ccu6CPJi.s 			page 113


1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1240              		.loc 1 1713 0 is_stmt 1
 1241 0022 FFF7FEFF 		bl	vPortEnterCritical
 1242              	.LVL111:
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1243              		.loc 1 1715 0
 1244 0026 2046     		mov	r0, r4
 1245 0028 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1246              	.LVL112:
 1247 002c 08B3     		cbz	r0, .L106
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1248              		.loc 1 1721 0
 1249 002e 251D     		adds	r5, r4, #4
 1250 0030 2846     		mov	r0, r5
 1251 0032 FFF7FEFF 		bl	uxListRemove
 1252              	.LVL113:
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1253              		.loc 1 1722 0
 1254 0036 E36A     		ldr	r3, [r4, #44]
 1255 0038 0122     		movs	r2, #1
 1256 003a 02FA03F1 		lsl	r1, r2, r3
 1257 003e 0F48     		ldr	r0, .L108+4
 1258 0040 0268     		ldr	r2, [r0]
 1259 0042 0A43     		orrs	r2, r2, r1
 1260 0044 0260     		str	r2, [r0]
 1261 0046 03EB8303 		add	r3, r3, r3, lsl #2
 1262 004a 9B00     		lsls	r3, r3, #2
 1263 004c 0C48     		ldr	r0, .L108+8
 1264 004e 1844     		add	r0, r0, r3
 1265 0050 2946     		mov	r1, r5
 1266 0052 FFF7FEFF 		bl	vListInsertEnd
 1267              	.LVL114:
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1268              		.loc 1 1725 0
 1269 0056 E26A     		ldr	r2, [r4, #44]
 1270 0058 074B     		ldr	r3, .L108
 1271 005a 1B68     		ldr	r3, [r3]
 1272 005c DB6A     		ldr	r3, [r3, #44]
 1273 005e 9A42     		cmp	r2, r3
 1274 0060 07D3     		bcc	.L106
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1275              		.loc 1 1730 0
 1276 0062 4FF08052 		mov	r2, #268435456
 1277 0066 074B     		ldr	r3, .L108+12
 1278 0068 1A60     		str	r2, [r3]
 1279              	@ 1730 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1280 006a BFF34F8F 		dsb
 1281              	@ 0 "" 2
 1282              	@ 1730 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1283 006e BFF36F8F 		isb
 1284              	@ 0 "" 2
 1285              		.thumb
 1286              	.L106:
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1287              		.loc 1 1742 0
 1288 0072 FFF7FEFF 		bl	vPortExitCritical
 1289              	.LVL115:
ARM GAS  /tmp/ccu6CPJi.s 			page 114


 1290              	.L102:
 1291 0076 38BD     		pop	{r3, r4, r5, pc}
 1292              	.LVL116:
 1293              	.L109:
 1294              		.align	2
 1295              	.L108:
 1296 0078 00000000 		.word	.LANCHOR10
 1297 007c 00000000 		.word	.LANCHOR13
 1298 0080 00000000 		.word	.LANCHOR4
 1299 0084 04ED00E0 		.word	-536810236
 1300              		.cfi_endproc
 1301              	.LFE15:
 1303              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1304              		.align	2
 1305              		.global	xTaskResumeFromISR
 1306              		.thumb
 1307              		.thumb_func
 1309              	xTaskResumeFromISR:
 1310              	.LFB16:
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1311              		.loc 1 1757 0
 1312              		.cfi_startproc
 1313              		@ args = 0, pretend = 0, frame = 0
 1314              		@ frame_needed = 0, uses_anonymous_args = 0
 1315              	.LVL117:
 1316 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1317              	.LCFI13:
 1318              		.cfi_def_cfa_offset 24
 1319              		.cfi_offset 3, -24
 1320              		.cfi_offset 4, -20
 1321              		.cfi_offset 5, -16
 1322              		.cfi_offset 6, -12
 1323              		.cfi_offset 7, -8
 1324              		.cfi_offset 14, -4
 1325              	.LVL118:
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1326              		.loc 1 1762 0
 1327 0002 40B9     		cbnz	r0, .L111
 1328              	.LBB103:
 1329              	.LBB104:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1330              		.loc 2 237 0
 1331              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1332 0004 4FF05003 			mov r3, #80												
 1333 0008 83F31188 		msr basepri, r3											
 1334 000c BFF36F8F 		isb														
 1335 0010 BFF34F8F 		dsb														
 1336              	
 1337              	@ 0 "" 2
 1338              	.LVL119:
 1339              		.thumb
 1340              	.L112:
 1341              	.LBE104:
 1342              	.LBE103:
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1343              		.loc 1 1762 0 discriminator 1
 1344 0014 FEE7     		b	.L112
ARM GAS  /tmp/ccu6CPJi.s 			page 115


 1345              	.L111:
 1346 0016 0446     		mov	r4, r0
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1347              		.loc 1 1780 0
 1348 0018 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1349              	.LVL120:
 1350              	.LBB105:
 1351              	.LBB106:
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1352              		.loc 2 253 0
 1353              	@ 253 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1354 001c EFF31187 			mrs r7, basepri											
 1355 0020 4FF05003 		mov r3, #80												
 1356 0024 83F31188 		msr basepri, r3											
 1357 0028 BFF36F8F 		isb														
 1358 002c BFF34F8F 		dsb														
 1359              	
 1360              	@ 0 "" 2
 1361              	.LVL121:
 1362              		.thumb
 1363              	.LBE106:
 1364              	.LBE105:
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1365              		.loc 1 1784 0
 1366 0030 2046     		mov	r0, r4
 1367 0032 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1368              	.LVL122:
 1369 0036 38B3     		cbz	r0, .L116
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1370              		.loc 1 1789 0
 1371 0038 164B     		ldr	r3, .L119
 1372 003a 1B68     		ldr	r3, [r3]
 1373 003c EBB9     		cbnz	r3, .L114
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1374              		.loc 1 1793 0
 1375 003e E26A     		ldr	r2, [r4, #44]
 1376 0040 154B     		ldr	r3, .L119+4
 1377 0042 1B68     		ldr	r3, [r3]
 1378 0044 DB6A     		ldr	r3, [r3, #44]
 1379 0046 9A42     		cmp	r2, r3
 1380 0048 01D2     		bcs	.L117
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1381              		.loc 1 1758 0
 1382 004a 0025     		movs	r5, #0
 1383 004c 00E0     		b	.L115
 1384              	.L117:
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1385              		.loc 1 1795 0
 1386 004e 0125     		movs	r5, #1
 1387              	.L115:
 1388              	.LVL123:
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1389              		.loc 1 1802 0
 1390 0050 261D     		adds	r6, r4, #4
 1391 0052 3046     		mov	r0, r6
 1392 0054 FFF7FEFF 		bl	uxListRemove
 1393              	.LVL124:
ARM GAS  /tmp/ccu6CPJi.s 			page 116


1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1394              		.loc 1 1803 0
 1395 0058 E36A     		ldr	r3, [r4, #44]
 1396 005a 0122     		movs	r2, #1
 1397 005c 02FA03F1 		lsl	r1, r2, r3
 1398 0060 0E48     		ldr	r0, .L119+8
 1399 0062 0268     		ldr	r2, [r0]
 1400 0064 0A43     		orrs	r2, r2, r1
 1401 0066 0260     		str	r2, [r0]
 1402 0068 03EB8303 		add	r3, r3, r3, lsl #2
 1403 006c 9B00     		lsls	r3, r3, #2
 1404 006e 0C48     		ldr	r0, .L119+12
 1405 0070 1844     		add	r0, r0, r3
 1406 0072 3146     		mov	r1, r6
 1407 0074 FFF7FEFF 		bl	vListInsertEnd
 1408              	.LVL125:
 1409 0078 07E0     		b	.L113
 1410              	.LVL126:
 1411              	.L114:
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1412              		.loc 1 1810 0
 1413 007a 0A48     		ldr	r0, .L119+16
 1414 007c 04F11801 		add	r1, r4, #24
 1415 0080 FFF7FEFF 		bl	vListInsertEnd
 1416              	.LVL127:
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1417              		.loc 1 1758 0
 1418 0084 0025     		movs	r5, #0
 1419 0086 00E0     		b	.L113
 1420              	.L116:
 1421 0088 0025     		movs	r5, #0
 1422              	.LVL128:
 1423              	.L113:
 1424              	.LBB107:
 1425              	.LBB108:
 1426              		.loc 2 271 0
 1427              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1428 008a 87F31188 			msr basepri, r7	
 1429              	@ 0 "" 2
 1430              		.thumb
 1431              	.LBE108:
 1432              	.LBE107:
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1433              		.loc 1 1821 0
 1434 008e 2846     		mov	r0, r5
 1435 0090 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1436              	.LVL129:
 1437              	.L120:
 1438 0092 00BF     		.align	2
 1439              	.L119:
 1440 0094 00000000 		.word	.LANCHOR16
 1441 0098 00000000 		.word	.LANCHOR10
 1442 009c 00000000 		.word	.LANCHOR13
 1443 00a0 00000000 		.word	.LANCHOR4
 1444 00a4 00000000 		.word	.LANCHOR1
 1445              		.cfi_endproc
 1446              	.LFE16:
ARM GAS  /tmp/ccu6CPJi.s 			page 117


 1448              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1449              		.align	2
 1450              		.global	vTaskStartScheduler
 1451              		.thumb
 1452              		.thumb_func
 1454              	vTaskStartScheduler:
 1455              	.LFB17:
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 1456              		.loc 1 1827 0
 1457              		.cfi_startproc
 1458              		@ args = 0, pretend = 0, frame = 0
 1459              		@ frame_needed = 0, uses_anonymous_args = 0
 1460 0000 00B5     		push	{lr}
 1461              	.LCFI14:
 1462              		.cfi_def_cfa_offset 4
 1463              		.cfi_offset 14, -4
 1464 0002 83B0     		sub	sp, sp, #12
 1465              	.LCFI15:
 1466              		.cfi_def_cfa_offset 16
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								"IDLE", configMINIMAL_STACK_SIZE,
 1467              		.loc 1 1860 0
 1468 0004 0023     		movs	r3, #0
 1469 0006 0093     		str	r3, [sp]
 1470 0008 164A     		ldr	r2, .L126
 1471 000a 0192     		str	r2, [sp, #4]
 1472 000c 1648     		ldr	r0, .L126+4
 1473 000e 1749     		ldr	r1, .L126+8
 1474 0010 8022     		movs	r2, #128
 1475 0012 FFF7FEFF 		bl	xTaskCreate
 1476              	.LVL130:
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1477              		.loc 1 1881 0
 1478 0016 0128     		cmp	r0, #1
 1479 0018 14D1     		bne	.L122
 1480              	.LBB109:
 1481              	.LBB110:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1482              		.loc 2 237 0
 1483              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1484 001a 4FF05003 			mov r3, #80												
 1485 001e 83F31188 		msr basepri, r3											
 1486 0022 BFF36F8F 		isb														
 1487 0026 BFF34F8F 		dsb														
 1488              	
 1489              	@ 0 "" 2
 1490              	.LVL131:
 1491              		.thumb
 1492              	.LBE110:
 1493              	.LBE109:
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1494              		.loc 1 1898 0
 1495 002a 4FF0FF32 		mov	r2, #-1
 1496 002e 104B     		ldr	r3, .L126+12
 1497 0030 1A60     		str	r2, [r3]
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 1498              		.loc 1 1899 0
 1499 0032 0122     		movs	r2, #1
ARM GAS  /tmp/ccu6CPJi.s 			page 118


 1500 0034 0F4B     		ldr	r3, .L126+16
 1501 0036 1A60     		str	r2, [r3]
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1502              		.loc 1 1900 0
 1503 0038 0022     		movs	r2, #0
 1504 003a 0F4B     		ldr	r3, .L126+20
 1505 003c 1A60     		str	r2, [r3]
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1506              		.loc 1 1909 0
 1507 003e FFF7FEFF 		bl	xPortStartScheduler
 1508              	.LVL132:
 1509 0042 0BE0     		b	.L121
 1510              	.LVL133:
 1511              	.L122:
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1512              		.loc 1 1924 0
 1513 0044 B0F1FF3F 		cmp	r0, #-1
 1514 0048 08D1     		bne	.L121
 1515              	.LBB111:
 1516              	.LBB112:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1517              		.loc 2 237 0
 1518              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1519 004a 4FF05003 			mov r3, #80												
 1520 004e 83F31188 		msr basepri, r3											
 1521 0052 BFF36F8F 		isb														
 1522 0056 BFF34F8F 		dsb														
 1523              	
 1524              	@ 0 "" 2
 1525              	.LVL134:
 1526              		.thumb
 1527              	.L124:
 1528              	.LBE112:
 1529              	.LBE111:
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1530              		.loc 1 1924 0 discriminator 2
 1531 005a FEE7     		b	.L124
 1532              	.LVL135:
 1533              	.L121:
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1534              		.loc 1 1930 0
 1535 005c 03B0     		add	sp, sp, #12
 1536              	.LCFI16:
 1537              		.cfi_def_cfa_offset 4
 1538              		@ sp needed
 1539 005e 5DF804FB 		ldr	pc, [sp], #4
 1540              	.L127:
 1541 0062 00BF     		.align	2
 1542              	.L126:
 1543 0064 00000000 		.word	.LANCHOR17
 1544 0068 00000000 		.word	prvIdleTask
 1545 006c 00000000 		.word	.LC0
 1546 0070 00000000 		.word	.LANCHOR3
 1547 0074 00000000 		.word	.LANCHOR11
 1548 0078 00000000 		.word	.LANCHOR14
 1549              		.cfi_endproc
 1550              	.LFE17:
ARM GAS  /tmp/ccu6CPJi.s 			page 119


 1552              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1553              		.align	2
 1554              		.global	vTaskEndScheduler
 1555              		.thumb
 1556              		.thumb_func
 1558              	vTaskEndScheduler:
 1559              	.LFB18:
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 1560              		.loc 1 1934 0
 1561              		.cfi_startproc
 1562              		@ args = 0, pretend = 0, frame = 0
 1563              		@ frame_needed = 0, uses_anonymous_args = 0
 1564 0000 08B5     		push	{r3, lr}
 1565              	.LCFI17:
 1566              		.cfi_def_cfa_offset 8
 1567              		.cfi_offset 3, -8
 1568              		.cfi_offset 14, -4
 1569              	.LBB113:
 1570              	.LBB114:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1571              		.loc 2 237 0
 1572              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1573 0002 4FF05003 			mov r3, #80												
 1574 0006 83F31188 		msr basepri, r3											
 1575 000a BFF36F8F 		isb														
 1576 000e BFF34F8F 		dsb														
 1577              	
 1578              	@ 0 "" 2
 1579              	.LVL136:
 1580              		.thumb
 1581              	.LBE114:
 1582              	.LBE113:
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 1583              		.loc 1 1939 0
 1584 0012 0022     		movs	r2, #0
 1585 0014 024B     		ldr	r3, .L130
 1586 0016 1A60     		str	r2, [r3]
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1587              		.loc 1 1940 0
 1588 0018 FFF7FEFF 		bl	vPortEndScheduler
 1589              	.LVL137:
 1590 001c 08BD     		pop	{r3, pc}
 1591              	.L131:
 1592 001e 00BF     		.align	2
 1593              	.L130:
 1594 0020 00000000 		.word	.LANCHOR11
 1595              		.cfi_endproc
 1596              	.LFE18:
 1598              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1599              		.align	2
 1600              		.global	vTaskSuspendAll
 1601              		.thumb
 1602              		.thumb_func
 1604              	vTaskSuspendAll:
 1605              	.LFB19:
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
 1606              		.loc 1 1945 0
ARM GAS  /tmp/ccu6CPJi.s 			page 120


 1607              		.cfi_startproc
 1608              		@ args = 0, pretend = 0, frame = 0
 1609              		@ frame_needed = 0, uses_anonymous_args = 0
 1610              		@ link register save eliminated.
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1611              		.loc 1 1950 0
 1612 0000 024A     		ldr	r2, .L133
 1613 0002 1368     		ldr	r3, [r2]
 1614 0004 0133     		adds	r3, r3, #1
 1615 0006 1360     		str	r3, [r2]
 1616 0008 7047     		bx	lr
 1617              	.L134:
 1618 000a 00BF     		.align	2
 1619              	.L133:
 1620 000c 00000000 		.word	.LANCHOR16
 1621              		.cfi_endproc
 1622              	.LFE19:
 1624              		.section	.text.xTaskGetTickCount,"ax",%progbits
 1625              		.align	2
 1626              		.global	xTaskGetTickCount
 1627              		.thumb
 1628              		.thumb_func
 1630              	xTaskGetTickCount:
 1631              	.LFB21:
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
 1632              		.loc 1 2128 0
 1633              		.cfi_startproc
 1634              		@ args = 0, pretend = 0, frame = 0
 1635              		@ frame_needed = 0, uses_anonymous_args = 0
 1636              		@ link register save eliminated.
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1637              		.loc 1 2134 0
 1638 0000 014B     		ldr	r3, .L136
 1639 0002 1868     		ldr	r0, [r3]
 1640              	.LVL138:
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1641              		.loc 1 2139 0
 1642 0004 7047     		bx	lr
 1643              	.L137:
 1644 0006 00BF     		.align	2
 1645              	.L136:
 1646 0008 00000000 		.word	.LANCHOR14
 1647              		.cfi_endproc
 1648              	.LFE21:
 1650              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 1651              		.align	2
 1652              		.global	xTaskGetTickCountFromISR
 1653              		.thumb
 1654              		.thumb_func
 1656              	xTaskGetTickCountFromISR:
 1657              	.LFB22:
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
 1658              		.loc 1 2143 0
 1659              		.cfi_startproc
 1660              		@ args = 0, pretend = 0, frame = 0
 1661              		@ frame_needed = 0, uses_anonymous_args = 0
 1662 0000 08B5     		push	{r3, lr}
ARM GAS  /tmp/ccu6CPJi.s 			page 121


 1663              	.LCFI18:
 1664              		.cfi_def_cfa_offset 8
 1665              		.cfi_offset 3, -8
 1666              		.cfi_offset 14, -4
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1667              		.loc 1 2161 0
 1668 0002 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1669              	.LVL139:
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1670              		.loc 1 2165 0
 1671 0006 014B     		ldr	r3, .L140
 1672 0008 1868     		ldr	r0, [r3]
 1673              	.LVL140:
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1674              		.loc 1 2170 0
 1675 000a 08BD     		pop	{r3, pc}
 1676              	.L141:
 1677              		.align	2
 1678              	.L140:
 1679 000c 00000000 		.word	.LANCHOR14
 1680              		.cfi_endproc
 1681              	.LFE22:
 1683              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 1684              		.align	2
 1685              		.global	uxTaskGetNumberOfTasks
 1686              		.thumb
 1687              		.thumb_func
 1689              	uxTaskGetNumberOfTasks:
 1690              	.LFB23:
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
 1691              		.loc 1 2174 0
 1692              		.cfi_startproc
 1693              		@ args = 0, pretend = 0, frame = 0
 1694              		@ frame_needed = 0, uses_anonymous_args = 0
 1695              		@ link register save eliminated.
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 1696              		.loc 1 2177 0
 1697 0000 014B     		ldr	r3, .L143
 1698 0002 1868     		ldr	r0, [r3]
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1699              		.loc 1 2178 0
 1700 0004 7047     		bx	lr
 1701              	.L144:
 1702 0006 00BF     		.align	2
 1703              	.L143:
 1704 0008 00000000 		.word	.LANCHOR9
 1705              		.cfi_endproc
 1706              	.LFE23:
 1708              		.section	.text.pcTaskGetName,"ax",%progbits
 1709              		.align	2
 1710              		.global	pcTaskGetName
 1711              		.thumb
 1712              		.thumb_func
 1714              	pcTaskGetName:
 1715              	.LFB24:
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
 1716              		.loc 1 2182 0
ARM GAS  /tmp/ccu6CPJi.s 			page 122


 1717              		.cfi_startproc
 1718              		@ args = 0, pretend = 0, frame = 0
 1719              		@ frame_needed = 0, uses_anonymous_args = 0
 1720              		@ link register save eliminated.
 1721              	.LVL141:
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 1722              		.loc 1 2187 0
 1723 0000 0346     		mov	r3, r0
 1724 0002 08B9     		cbnz	r0, .L146
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 1725              		.loc 1 2187 0 is_stmt 0 discriminator 1
 1726 0004 074B     		ldr	r3, .L149
 1727 0006 1B68     		ldr	r3, [r3]
 1728              	.LVL142:
 1729              	.L146:
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 1730              		.loc 1 2188 0 is_stmt 1 discriminator 4
 1731 0008 43B9     		cbnz	r3, .L147
 1732              	.LBB115:
 1733              	.LBB116:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1734              		.loc 2 237 0
 1735              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1736 000a 4FF05003 			mov r3, #80												
 1737 000e 83F31188 		msr basepri, r3											
 1738 0012 BFF36F8F 		isb														
 1739 0016 BFF34F8F 		dsb														
 1740              	
 1741              	@ 0 "" 2
 1742              	.LVL143:
 1743              		.thumb
 1744              	.L148:
 1745              	.LBE116:
 1746              	.LBE115:
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 1747              		.loc 1 2188 0 discriminator 1
 1748 001a FEE7     		b	.L148
 1749              	.LVL144:
 1750              	.L147:
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1751              		.loc 1 2190 0
 1752 001c 03F13400 		add	r0, r3, #52
 1753 0020 7047     		bx	lr
 1754              	.L150:
 1755 0022 00BF     		.align	2
 1756              	.L149:
 1757 0024 00000000 		.word	.LANCHOR10
 1758              		.cfi_endproc
 1759              	.LFE24:
 1761              		.section	.text.xTaskIncrementTick,"ax",%progbits
 1762              		.align	2
 1763              		.global	xTaskIncrementTick
 1764              		.thumb
 1765              		.thumb_func
 1767              	xTaskIncrementTick:
 1768              	.LFB25:
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
ARM GAS  /tmp/ccu6CPJi.s 			page 123


 1769              		.loc 1 2500 0
 1770              		.cfi_startproc
 1771              		@ args = 0, pretend = 0, frame = 0
 1772              		@ frame_needed = 0, uses_anonymous_args = 0
 1773 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1774              	.LCFI19:
 1775              		.cfi_def_cfa_offset 24
 1776              		.cfi_offset 3, -24
 1777              		.cfi_offset 4, -20
 1778              		.cfi_offset 5, -16
 1779              		.cfi_offset 6, -12
 1780              		.cfi_offset 7, -8
 1781              		.cfi_offset 14, -4
 1782              	.LVL145:
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 1783              		.loc 1 2509 0
 1784 0002 3D4B     		ldr	r3, .L172
 1785 0004 1B68     		ldr	r3, [r3]
 1786 0006 002B     		cmp	r3, #0
 1787 0008 69D1     		bne	.L152
 1788              	.LBB117:
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1789              		.loc 1 2513 0
 1790 000a 3C4B     		ldr	r3, .L172+4
 1791 000c 1D68     		ldr	r5, [r3]
 1792 000e 0135     		adds	r5, r5, #1
 1793              	.LVL146:
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1794              		.loc 1 2517 0
 1795 0010 1D60     		str	r5, [r3]
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1796              		.loc 1 2519 0
 1797 0012 C5B9     		cbnz	r5, .L153
 1798              	.LBB118:
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1799              		.loc 1 2521 0
 1800 0014 3A4B     		ldr	r3, .L172+8
 1801 0016 1B68     		ldr	r3, [r3]
 1802 0018 1B68     		ldr	r3, [r3]
 1803 001a 43B1     		cbz	r3, .L154
 1804              	.LBB119:
 1805              	.LBB120:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1806              		.loc 2 237 0
 1807              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1808 001c 4FF05003 			mov r3, #80												
 1809 0020 83F31188 		msr basepri, r3											
 1810 0024 BFF36F8F 		isb														
 1811 0028 BFF34F8F 		dsb														
 1812              	
 1813              	@ 0 "" 2
 1814              	.LVL147:
 1815              		.thumb
 1816              	.L155:
 1817              	.LBE120:
 1818              	.LBE119:
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  /tmp/ccu6CPJi.s 			page 124


 1819              		.loc 1 2521 0 discriminator 1
 1820 002c FEE7     		b	.L155
 1821              	.L154:
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1822              		.loc 1 2521 0 is_stmt 0 discriminator 2
 1823 002e 344A     		ldr	r2, .L172+8
 1824 0030 1168     		ldr	r1, [r2]
 1825              	.LVL148:
 1826 0032 344B     		ldr	r3, .L172+12
 1827 0034 1868     		ldr	r0, [r3]
 1828 0036 1060     		str	r0, [r2]
 1829 0038 1960     		str	r1, [r3]
 1830 003a 334A     		ldr	r2, .L172+16
 1831 003c 1368     		ldr	r3, [r2]
 1832 003e 0133     		adds	r3, r3, #1
 1833 0040 1360     		str	r3, [r2]
 1834 0042 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1835              	.LVL149:
 1836              	.L153:
 1837              	.LBE118:
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1838              		.loc 1 2532 0 is_stmt 1
 1839 0046 314B     		ldr	r3, .L172+20
 1840 0048 1B68     		ldr	r3, [r3]
 1841 004a 9D42     		cmp	r5, r3
 1842 004c 03D2     		bcs	.L166
 1843              	.LBE117:
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1844              		.loc 1 2503 0
 1845 004e 0024     		movs	r4, #0
 1846 0050 3AE0     		b	.L157
 1847              	.LVL150:
 1848              	.L168:
 1849              	.LBB121:
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 1850              		.loc 1 2598 0
 1851 0052 0124     		movs	r4, #1
 1852              	.LVL151:
 1853 0054 00E0     		b	.L156
 1854              	.LVL152:
 1855              	.L166:
 1856 0056 0024     		movs	r4, #0
 1857              	.LVL153:
 1858              	.L156:
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1859              		.loc 1 2536 0
 1860 0058 294B     		ldr	r3, .L172+8
 1861 005a 1B68     		ldr	r3, [r3]
 1862 005c 1B68     		ldr	r3, [r3]
 1863 005e 0BB9     		cbnz	r3, .L167
 1864 0060 0123     		movs	r3, #1
 1865 0062 00E0     		b	.L158
 1866              	.L167:
 1867 0064 0023     		movs	r3, #0
 1868              	.L158:
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1869              		.loc 1 2536 0 is_stmt 0 discriminator 4
ARM GAS  /tmp/ccu6CPJi.s 			page 125


 1870 0066 23B1     		cbz	r3, .L159
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 1871              		.loc 1 2543 0 is_stmt 1
 1872 0068 4FF0FF32 		mov	r2, #-1
 1873 006c 274B     		ldr	r3, .L172+20
 1874 006e 1A60     		str	r2, [r3]
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1875              		.loc 1 2544 0
 1876 0070 2AE0     		b	.L157
 1877              	.L159:
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 1878              		.loc 1 2552 0
 1879 0072 234B     		ldr	r3, .L172+8
 1880 0074 1B68     		ldr	r3, [r3]
 1881 0076 DB68     		ldr	r3, [r3, #12]
 1882 0078 DE68     		ldr	r6, [r3, #12]
 1883              	.LVL154:
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1884              		.loc 1 2553 0
 1885 007a 7368     		ldr	r3, [r6, #4]
 1886              	.LVL155:
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1887              		.loc 1 2555 0
 1888 007c 9D42     		cmp	r5, r3
 1889 007e 02D2     		bcs	.L160
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
 1890              		.loc 1 2562 0
 1891 0080 224A     		ldr	r2, .L172+20
 1892 0082 1360     		str	r3, [r2]
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1893              		.loc 1 2563 0
 1894 0084 20E0     		b	.L157
 1895              	.L160:
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1896              		.loc 1 2571 0
 1897 0086 371D     		adds	r7, r6, #4
 1898 0088 3846     		mov	r0, r7
 1899 008a FFF7FEFF 		bl	uxListRemove
 1900              	.LVL156:
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1901              		.loc 1 2575 0
 1902 008e B36A     		ldr	r3, [r6, #40]
 1903 0090 1BB1     		cbz	r3, .L161
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1904              		.loc 1 2577 0
 1905 0092 06F11800 		add	r0, r6, #24
 1906 0096 FFF7FEFF 		bl	uxListRemove
 1907              	.LVL157:
 1908              	.L161:
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1909              		.loc 1 2586 0
 1910 009a F36A     		ldr	r3, [r6, #44]
 1911 009c 0122     		movs	r2, #1
 1912 009e 02FA03F1 		lsl	r1, r2, r3
 1913 00a2 1B48     		ldr	r0, .L172+24
 1914 00a4 0268     		ldr	r2, [r0]
 1915 00a6 0A43     		orrs	r2, r2, r1
ARM GAS  /tmp/ccu6CPJi.s 			page 126


 1916 00a8 0260     		str	r2, [r0]
 1917 00aa 03EB8303 		add	r3, r3, r3, lsl #2
 1918 00ae 9B00     		lsls	r3, r3, #2
 1919 00b0 1848     		ldr	r0, .L172+28
 1920 00b2 1844     		add	r0, r0, r3
 1921 00b4 3946     		mov	r1, r7
 1922 00b6 FFF7FEFF 		bl	vListInsertEnd
 1923              	.LVL158:
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 1924              		.loc 1 2596 0
 1925 00ba F26A     		ldr	r2, [r6, #44]
 1926 00bc 164B     		ldr	r3, .L172+32
 1927 00be 1B68     		ldr	r3, [r3]
 1928 00c0 DB6A     		ldr	r3, [r3, #44]
 1929 00c2 9A42     		cmp	r2, r3
 1930 00c4 C5D2     		bcs	.L168
 1931 00c6 C7E7     		b	.L156
 1932              	.LVL159:
 1933              	.L157:
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1934              		.loc 1 2615 0
 1935 00c8 134B     		ldr	r3, .L172+32
 1936 00ca 1B68     		ldr	r3, [r3]
 1937 00cc DB6A     		ldr	r3, [r3, #44]
 1938 00ce 03EB8303 		add	r3, r3, r3, lsl #2
 1939 00d2 9B00     		lsls	r3, r3, #2
 1940 00d4 0F4A     		ldr	r2, .L172+28
 1941 00d6 D358     		ldr	r3, [r2, r3]
 1942 00d8 012B     		cmp	r3, #1
 1943 00da 06D8     		bhi	.L169
 1944 00dc 06E0     		b	.L164
 1945              	.LVL160:
 1946              	.L152:
 1947              	.LBE121:
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1948              		.loc 1 2643 0
 1949 00de 0F4A     		ldr	r2, .L172+36
 1950 00e0 1368     		ldr	r3, [r2]
 1951 00e2 0133     		adds	r3, r3, #1
 1952 00e4 1360     		str	r3, [r2]
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1953              		.loc 1 2503 0
 1954 00e6 0024     		movs	r4, #0
 1955 00e8 00E0     		b	.L164
 1956              	.LVL161:
 1957              	.L169:
 1958              	.LBB122:
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1959              		.loc 1 2617 0
 1960 00ea 0124     		movs	r4, #1
 1961              	.LVL162:
 1962              	.L164:
 1963              	.LBE122:
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1964              		.loc 1 2656 0
 1965 00ec 0C4B     		ldr	r3, .L172+40
 1966 00ee 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccu6CPJi.s 			page 127


 1967 00f0 03B1     		cbz	r3, .L165
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1968              		.loc 1 2658 0
 1969 00f2 0124     		movs	r4, #1
 1970              	.LVL163:
 1971              	.L165:
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1972              		.loc 1 2668 0
 1973 00f4 2046     		mov	r0, r4
 1974 00f6 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1975              	.LVL164:
 1976              	.L173:
 1977              		.align	2
 1978              	.L172:
 1979 00f8 00000000 		.word	.LANCHOR16
 1980 00fc 00000000 		.word	.LANCHOR14
 1981 0100 00000000 		.word	.LANCHOR2
 1982 0104 00000000 		.word	.LANCHOR8
 1983 0108 00000000 		.word	.LANCHOR18
 1984 010c 00000000 		.word	.LANCHOR3
 1985 0110 00000000 		.word	.LANCHOR13
 1986 0114 00000000 		.word	.LANCHOR4
 1987 0118 00000000 		.word	.LANCHOR10
 1988 011c 00000000 		.word	.LANCHOR19
 1989 0120 00000000 		.word	.LANCHOR20
 1990              		.cfi_endproc
 1991              	.LFE25:
 1993              		.section	.text.xTaskResumeAll,"ax",%progbits
 1994              		.align	2
 1995              		.global	xTaskResumeAll
 1996              		.thumb
 1997              		.thumb_func
 1999              	xTaskResumeAll:
 2000              	.LFB20:
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2001              		.loc 1 2018 0
 2002              		.cfi_startproc
 2003              		@ args = 0, pretend = 0, frame = 0
 2004              		@ frame_needed = 0, uses_anonymous_args = 0
 2005 0000 38B5     		push	{r3, r4, r5, lr}
 2006              	.LCFI20:
 2007              		.cfi_def_cfa_offset 16
 2008              		.cfi_offset 3, -16
 2009              		.cfi_offset 4, -12
 2010              		.cfi_offset 5, -8
 2011              		.cfi_offset 14, -4
 2012              	.LVL165:
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2013              		.loc 1 2024 0
 2014 0002 344B     		ldr	r3, .L189
 2015 0004 1B68     		ldr	r3, [r3]
 2016 0006 43B9     		cbnz	r3, .L175
 2017              	.LBB123:
 2018              	.LBB124:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2019              		.loc 2 237 0
 2020              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  /tmp/ccu6CPJi.s 			page 128


 2021 0008 4FF05003 			mov r3, #80												
 2022 000c 83F31188 		msr basepri, r3											
 2023 0010 BFF36F8F 		isb														
 2024 0014 BFF34F8F 		dsb														
 2025              	
 2026              	@ 0 "" 2
 2027              	.LVL166:
 2028              		.thumb
 2029              	.L176:
 2030              	.LBE124:
 2031              	.LBE123:
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2032              		.loc 1 2024 0 discriminator 1
 2033 0018 FEE7     		b	.L176
 2034              	.L175:
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2035              		.loc 1 2031 0
 2036 001a FFF7FEFF 		bl	vPortEnterCritical
 2037              	.LVL167:
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2038              		.loc 1 2033 0
 2039 001e 2D4B     		ldr	r3, .L189
 2040 0020 1A68     		ldr	r2, [r3]
 2041 0022 013A     		subs	r2, r2, #1
 2042 0024 1A60     		str	r2, [r3]
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2043              		.loc 1 2035 0
 2044 0026 1B68     		ldr	r3, [r3]
 2045 0028 002B     		cmp	r3, #0
 2046 002a 4CD1     		bne	.L185
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2047              		.loc 1 2037 0
 2048 002c 2A4B     		ldr	r3, .L189+4
 2049 002e 1B68     		ldr	r3, [r3]
 2050 0030 33BB     		cbnz	r3, .L186
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2051              		.loc 1 2020 0
 2052 0032 0024     		movs	r4, #0
 2053 0034 4AE0     		b	.L177
 2054              	.LVL168:
 2055              	.L180:
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2056              		.loc 1 2043 0
 2057 0036 294B     		ldr	r3, .L189+8
 2058 0038 DB68     		ldr	r3, [r3, #12]
 2059 003a DC68     		ldr	r4, [r3, #12]
 2060              	.LVL169:
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2061              		.loc 1 2044 0
 2062 003c 04F11800 		add	r0, r4, #24
 2063 0040 FFF7FEFF 		bl	uxListRemove
 2064              	.LVL170:
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2065              		.loc 1 2045 0
 2066 0044 251D     		adds	r5, r4, #4
 2067 0046 2846     		mov	r0, r5
 2068 0048 FFF7FEFF 		bl	uxListRemove
ARM GAS  /tmp/ccu6CPJi.s 			page 129


 2069              	.LVL171:
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2070              		.loc 1 2046 0
 2071 004c E36A     		ldr	r3, [r4, #44]
 2072 004e 0122     		movs	r2, #1
 2073 0050 02FA03F1 		lsl	r1, r2, r3
 2074 0054 2248     		ldr	r0, .L189+12
 2075 0056 0268     		ldr	r2, [r0]
 2076 0058 0A43     		orrs	r2, r2, r1
 2077 005a 0260     		str	r2, [r0]
 2078 005c 03EB8303 		add	r3, r3, r3, lsl #2
 2079 0060 9B00     		lsls	r3, r3, #2
 2080 0062 2048     		ldr	r0, .L189+16
 2081 0064 1844     		add	r0, r0, r3
 2082 0066 2946     		mov	r1, r5
 2083 0068 FFF7FEFF 		bl	vListInsertEnd
 2084              	.LVL172:
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2085              		.loc 1 2050 0
 2086 006c E26A     		ldr	r2, [r4, #44]
 2087 006e 1E4B     		ldr	r3, .L189+20
 2088 0070 1B68     		ldr	r3, [r3]
 2089 0072 DB6A     		ldr	r3, [r3, #44]
 2090 0074 9A42     		cmp	r2, r3
 2091 0076 04D3     		bcc	.L178
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2092              		.loc 1 2052 0
 2093 0078 0122     		movs	r2, #1
 2094 007a 1C4B     		ldr	r3, .L189+24
 2095 007c 1A60     		str	r2, [r3]
 2096 007e 00E0     		b	.L178
 2097              	.LVL173:
 2098              	.L186:
 2099 0080 0024     		movs	r4, #0
 2100              	.LVL174:
 2101              	.L178:
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2102              		.loc 1 2041 0
 2103 0082 164B     		ldr	r3, .L189+8
 2104 0084 1B68     		ldr	r3, [r3]
 2105 0086 002B     		cmp	r3, #0
 2106 0088 D5D1     		bne	.L180
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2107              		.loc 1 2060 0
 2108 008a 0CB1     		cbz	r4, .L181
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2109              		.loc 1 2068 0
 2110 008c FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2111              	.LVL175:
 2112              	.L181:
 2113              	.LBB125:
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2114              		.loc 1 2076 0
 2115 0090 174B     		ldr	r3, .L189+28
 2116 0092 1C68     		ldr	r4, [r3]
 2117              	.LVL176:
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
ARM GAS  /tmp/ccu6CPJi.s 			page 130


 2118              		.loc 1 2078 0
 2119 0094 54B1     		cbz	r4, .L182
 2120              	.L184:
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 2121              		.loc 1 2082 0
 2122 0096 FFF7FEFF 		bl	xTaskIncrementTick
 2123              	.LVL177:
 2124 009a 10B1     		cbz	r0, .L183
2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 2125              		.loc 1 2084 0
 2126 009c 0122     		movs	r2, #1
 2127 009e 134B     		ldr	r3, .L189+24
 2128 00a0 1A60     		str	r2, [r3]
 2129              	.L183:
 2130              	.LVL178:
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2131              		.loc 1 2091 0
 2132 00a2 013C     		subs	r4, r4, #1
 2133              	.LVL179:
 2134 00a4 F7D1     		bne	.L184
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2135              		.loc 1 2093 0
 2136 00a6 0022     		movs	r2, #0
 2137 00a8 114B     		ldr	r3, .L189+28
 2138 00aa 1A60     		str	r2, [r3]
 2139              	.L182:
 2140              	.LBE125:
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2141              		.loc 1 2101 0
 2142 00ac 0F4B     		ldr	r3, .L189+24
 2143 00ae 1B68     		ldr	r3, [r3]
 2144 00b0 5BB1     		cbz	r3, .L187
 2145              	.LVL180:
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2146              		.loc 1 2108 0
 2147 00b2 4FF08052 		mov	r2, #268435456
 2148 00b6 0F4B     		ldr	r3, .L189+32
 2149 00b8 1A60     		str	r2, [r3]
 2150              	@ 2108 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2151 00ba BFF34F8F 		dsb
 2152              	@ 0 "" 2
 2153              	@ 2108 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2154 00be BFF36F8F 		isb
 2155              	@ 0 "" 2
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2156              		.loc 1 2105 0
 2157              		.thumb
 2158 00c2 0124     		movs	r4, #1
 2159              	.LVL181:
 2160 00c4 02E0     		b	.L177
 2161              	.LVL182:
 2162              	.L185:
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2163              		.loc 1 2020 0
 2164 00c6 0024     		movs	r4, #0
 2165 00c8 00E0     		b	.L177
 2166              	.LVL183:
ARM GAS  /tmp/ccu6CPJi.s 			page 131


 2167              	.L187:
 2168 00ca 0024     		movs	r4, #0
 2169              	.LVL184:
 2170              	.L177:
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2171              		.loc 1 2121 0
 2172 00cc FFF7FEFF 		bl	vPortExitCritical
 2173              	.LVL185:
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2174              		.loc 1 2124 0
 2175 00d0 2046     		mov	r0, r4
 2176 00d2 38BD     		pop	{r3, r4, r5, pc}
 2177              	.LVL186:
 2178              	.L190:
 2179              		.align	2
 2180              	.L189:
 2181 00d4 00000000 		.word	.LANCHOR16
 2182 00d8 00000000 		.word	.LANCHOR9
 2183 00dc 00000000 		.word	.LANCHOR1
 2184 00e0 00000000 		.word	.LANCHOR13
 2185 00e4 00000000 		.word	.LANCHOR4
 2186 00e8 00000000 		.word	.LANCHOR10
 2187 00ec 00000000 		.word	.LANCHOR20
 2188 00f0 00000000 		.word	.LANCHOR19
 2189 00f4 04ED00E0 		.word	-536810236
 2190              		.cfi_endproc
 2191              	.LFE20:
 2193              		.section	.text.vTaskDelay,"ax",%progbits
 2194              		.align	2
 2195              		.global	vTaskDelay
 2196              		.thumb
 2197              		.thumb_func
 2199              	vTaskDelay:
 2200              	.LFB9:
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2201              		.loc 1 1225 0
 2202              		.cfi_startproc
 2203              		@ args = 0, pretend = 0, frame = 0
 2204              		@ frame_needed = 0, uses_anonymous_args = 0
 2205              	.LVL187:
 2206 0000 10B5     		push	{r4, lr}
 2207              	.LCFI21:
 2208              		.cfi_def_cfa_offset 8
 2209              		.cfi_offset 4, -8
 2210              		.cfi_offset 14, -4
 2211              	.LVL188:
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2212              		.loc 1 1229 0
 2213 0002 A8B1     		cbz	r0, .L196
 2214 0004 0446     		mov	r4, r0
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 2215              		.loc 1 1231 0
 2216 0006 104B     		ldr	r3, .L198
 2217 0008 1B68     		ldr	r3, [r3]
 2218 000a 43B1     		cbz	r3, .L193
 2219              	.LBB126:
 2220              	.LBB127:
ARM GAS  /tmp/ccu6CPJi.s 			page 132


 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2221              		.loc 2 237 0
 2222              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2223 000c 4FF05003 			mov r3, #80												
 2224 0010 83F31188 		msr basepri, r3											
 2225 0014 BFF36F8F 		isb														
 2226 0018 BFF34F8F 		dsb														
 2227              	
 2228              	@ 0 "" 2
 2229              	.LVL189:
 2230              		.thumb
 2231              	.L194:
 2232              	.LBE127:
 2233              	.LBE126:
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 2234              		.loc 1 1231 0 discriminator 1
 2235 001c FEE7     		b	.L194
 2236              	.L193:
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2237              		.loc 1 1232 0
 2238 001e FFF7FEFF 		bl	vTaskSuspendAll
 2239              	.LVL190:
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2240              		.loc 1 1243 0
 2241 0022 2046     		mov	r0, r4
 2242 0024 0021     		movs	r1, #0
 2243 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2244              	.LVL191:
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2245              		.loc 1 1245 0
 2246 002a FFF7FEFF 		bl	xTaskResumeAll
 2247              	.LVL192:
 2248 002e 00E0     		b	.L192
 2249              	.LVL193:
 2250              	.L196:
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2251              		.loc 1 1226 0
 2252 0030 0020     		movs	r0, #0
 2253              	.LVL194:
 2254              	.L192:
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2255              		.loc 1 1254 0
 2256 0032 38B9     		cbnz	r0, .L191
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2257              		.loc 1 1256 0
 2258 0034 4FF08052 		mov	r2, #268435456
 2259 0038 044B     		ldr	r3, .L198+4
 2260 003a 1A60     		str	r2, [r3]
 2261              	@ 1256 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2262 003c BFF34F8F 		dsb
 2263              	@ 0 "" 2
 2264              	@ 1256 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2265 0040 BFF36F8F 		isb
 2266              	@ 0 "" 2
 2267              		.thumb
 2268              	.L191:
 2269 0044 10BD     		pop	{r4, pc}
ARM GAS  /tmp/ccu6CPJi.s 			page 133


 2270              	.L199:
 2271 0046 00BF     		.align	2
 2272              	.L198:
 2273 0048 00000000 		.word	.LANCHOR16
 2274 004c 04ED00E0 		.word	-536810236
 2275              		.cfi_endproc
 2276              	.LFE9:
 2278              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 2279              		.align	2
 2280              		.thumb
 2281              		.thumb_func
 2283              	prvCheckTasksWaitingTermination:
 2284              	.LFB36:
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2285              		.loc 1 3366 0
 2286              		.cfi_startproc
 2287              		@ args = 0, pretend = 0, frame = 0
 2288              		@ frame_needed = 0, uses_anonymous_args = 0
 2289 0000 10B5     		push	{r4, lr}
 2290              	.LCFI22:
 2291              		.cfi_def_cfa_offset 8
 2292              		.cfi_offset 4, -8
 2293              		.cfi_offset 14, -4
 2294              	.LBB128:
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2295              		.loc 1 3376 0
 2296 0002 1BE0     		b	.L202
 2297              	.L203:
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2298              		.loc 1 3378 0
 2299 0004 FFF7FEFF 		bl	vTaskSuspendAll
 2300              	.LVL195:
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2301              		.loc 1 3380 0
 2302 0008 0F4B     		ldr	r3, .L205
 2303 000a 1C68     		ldr	r4, [r3]
 2304              	.LVL196:
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2305              		.loc 1 3382 0
 2306 000c FFF7FEFF 		bl	xTaskResumeAll
 2307              	.LVL197:
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2308              		.loc 1 3384 0
 2309 0010 A4B1     		cbz	r4, .L202
 2310              	.LBB129:
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2311              		.loc 1 3388 0
 2312 0012 FFF7FEFF 		bl	vPortEnterCritical
 2313              	.LVL198:
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2314              		.loc 1 3390 0
 2315 0016 0C4B     		ldr	r3, .L205
 2316 0018 DB68     		ldr	r3, [r3, #12]
 2317 001a DC68     		ldr	r4, [r3, #12]
 2318              	.LVL199:
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxCurrentNumberOfTasks;
 2319              		.loc 1 3391 0
ARM GAS  /tmp/ccu6CPJi.s 			page 134


 2320 001c 201D     		adds	r0, r4, #4
 2321 001e FFF7FEFF 		bl	uxListRemove
 2322              	.LVL200:
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					--uxDeletedTasksWaitingCleanUp;
 2323              		.loc 1 3392 0
 2324 0022 0A4A     		ldr	r2, .L205+4
 2325 0024 1368     		ldr	r3, [r2]
 2326 0026 013B     		subs	r3, r3, #1
 2327 0028 1360     		str	r3, [r2]
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2328              		.loc 1 3393 0
 2329 002a 094A     		ldr	r2, .L205+8
 2330 002c 1368     		ldr	r3, [r2]
 2331 002e 013B     		subs	r3, r3, #1
 2332 0030 1360     		str	r3, [r2]
3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2333              		.loc 1 3395 0
 2334 0032 FFF7FEFF 		bl	vPortExitCritical
 2335              	.LVL201:
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2336              		.loc 1 3397 0
 2337 0036 2046     		mov	r0, r4
 2338 0038 FFF7FEFF 		bl	prvDeleteTCB
 2339              	.LVL202:
 2340              	.L202:
 2341              	.LBE129:
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2342              		.loc 1 3376 0
 2343 003c 044B     		ldr	r3, .L205+8
 2344 003e 1B68     		ldr	r3, [r3]
 2345 0040 002B     		cmp	r3, #0
 2346 0042 DFD1     		bne	.L203
 2347              	.LBE128:
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2348              		.loc 1 3406 0
 2349 0044 10BD     		pop	{r4, pc}
 2350              	.L206:
 2351 0046 00BF     		.align	2
 2352              	.L205:
 2353 0048 00000000 		.word	.LANCHOR7
 2354 004c 00000000 		.word	.LANCHOR9
 2355 0050 00000000 		.word	.LANCHOR15
 2356              		.cfi_endproc
 2357              	.LFE36:
 2359              		.section	.text.prvIdleTask,"ax",%progbits
 2360              		.align	2
 2361              		.thumb
 2362              		.thumb_func
 2364              	prvIdleTask:
 2365              	.LFB34:
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
 2366              		.loc 1 3132 0
 2367              		.cfi_startproc
 2368              		@ Volatile: function does not return.
 2369              		@ args = 0, pretend = 0, frame = 0
 2370              		@ frame_needed = 0, uses_anonymous_args = 0
 2371              	.LVL203:
ARM GAS  /tmp/ccu6CPJi.s 			page 135


 2372 0000 08B5     		push	{r3, lr}
 2373              	.LCFI23:
 2374              		.cfi_def_cfa_offset 8
 2375              		.cfi_offset 3, -8
 2376              		.cfi_offset 14, -4
 2377              	.LVL204:
 2378              	.L208:
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2379              		.loc 1 3143 0
 2380 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 2381              	.LVL205:
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2382              		.loc 1 3166 0
 2383 0006 064B     		ldr	r3, .L211
 2384 0008 1B68     		ldr	r3, [r3]
 2385 000a 012B     		cmp	r3, #1
 2386 000c F9D9     		bls	.L208
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2387              		.loc 1 3168 0
 2388 000e 4FF08052 		mov	r2, #268435456
 2389 0012 044B     		ldr	r3, .L211+4
 2390 0014 1A60     		str	r2, [r3]
 2391              	@ 3168 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2392 0016 BFF34F8F 		dsb
 2393              	@ 0 "" 2
 2394              	@ 3168 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2395 001a BFF36F8F 		isb
 2396              	@ 0 "" 2
 2397              		.thumb
 2398 001e F0E7     		b	.L208
 2399              	.L212:
 2400              		.align	2
 2401              	.L211:
 2402 0020 00000000 		.word	.LANCHOR4
 2403 0024 04ED00E0 		.word	-536810236
 2404              		.cfi_endproc
 2405              	.LFE34:
 2407              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2408              		.align	2
 2409              		.global	vTaskSwitchContext
 2410              		.thumb
 2411              		.thumb_func
 2413              	vTaskSwitchContext:
 2414              	.LFB26:
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2415              		.loc 1 2762 0
 2416              		.cfi_startproc
 2417              		@ args = 0, pretend = 0, frame = 0
 2418              		@ frame_needed = 0, uses_anonymous_args = 0
 2419              		@ link register save eliminated.
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2420              		.loc 1 2763 0
 2421 0000 204B     		ldr	r3, .L220
 2422 0002 1B68     		ldr	r3, [r3]
 2423 0004 1BB1     		cbz	r3, .L214
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2424              		.loc 1 2767 0
ARM GAS  /tmp/ccu6CPJi.s 			page 136


 2425 0006 0122     		movs	r2, #1
 2426 0008 1F4B     		ldr	r3, .L220+4
 2427 000a 1A60     		str	r2, [r3]
 2428 000c 7047     		bx	lr
 2429              	.L214:
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2430              		.loc 1 2771 0
 2431 000e 0022     		movs	r2, #0
 2432 0010 1D4B     		ldr	r3, .L220+4
 2433 0012 1A60     		str	r2, [r3]
 2434              	.LBB130:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2435              		.loc 1 2806 0
 2436 0014 1D4B     		ldr	r3, .L220+8
 2437 0016 1B68     		ldr	r3, [r3]
 2438              	.LVL206:
 2439              	.LBB131:
 2440              	.LBB132:
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 2441              		.loc 2 176 0
 2442              	@ 176 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2443 0018 B3FA83F3 		clz r3, r3
 2444              	@ 0 "" 2
 2445              	.LVL207:
 2446              		.thumb
 2447 001c DBB2     		uxtb	r3, r3
 2448              	.LVL208:
 2449              	.LBE132:
 2450              	.LBE131:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2451              		.loc 1 2806 0
 2452 001e C3F11F03 		rsb	r3, r3, #31
 2453              	.LVL209:
 2454 0022 03EB8302 		add	r2, r3, r3, lsl #2
 2455 0026 9200     		lsls	r2, r2, #2
 2456 0028 1949     		ldr	r1, .L220+12
 2457 002a 8A58     		ldr	r2, [r1, r2]
 2458 002c 42B9     		cbnz	r2, .L216
 2459              	.LBB133:
 2460              	.LBB134:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2461              		.loc 2 237 0
 2462              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2463 002e 4FF05003 			mov r3, #80												
 2464 0032 83F31188 		msr basepri, r3											
 2465 0036 BFF36F8F 		isb														
 2466 003a BFF34F8F 		dsb														
 2467              	
 2468              	@ 0 "" 2
 2469              	.LVL210:
 2470              		.thumb
 2471              	.L217:
 2472              	.LBE134:
 2473              	.LBE133:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2474              		.loc 1 2806 0 discriminator 1
 2475 003e FEE7     		b	.L217
ARM GAS  /tmp/ccu6CPJi.s 			page 137


 2476              	.LVL211:
 2477              	.L216:
 2478              	.LBE130:
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2479              		.loc 1 2762 0 discriminator 2
 2480 0040 10B4     		push	{r4}
 2481              	.LCFI24:
 2482              		.cfi_def_cfa_offset 4
 2483              		.cfi_offset 4, -4
 2484              	.LVL212:
 2485              	.LBB136:
 2486              	.LBB135:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2487              		.loc 1 2806 0 discriminator 2
 2488 0042 134C     		ldr	r4, .L220+12
 2489 0044 9A00     		lsls	r2, r3, #2
 2490 0046 D118     		adds	r1, r2, r3
 2491 0048 8900     		lsls	r1, r1, #2
 2492 004a 2144     		add	r1, r1, r4
 2493 004c 4868     		ldr	r0, [r1, #4]
 2494 004e 4068     		ldr	r0, [r0, #4]
 2495 0050 4860     		str	r0, [r1, #4]
 2496 0052 1A44     		add	r2, r2, r3
 2497 0054 9200     		lsls	r2, r2, #2
 2498 0056 0832     		adds	r2, r2, #8
 2499 0058 2244     		add	r2, r2, r4
 2500 005a 9042     		cmp	r0, r2
 2501 005c 05D1     		bne	.L218
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2502              		.loc 1 2806 0 is_stmt 0 discriminator 3
 2503 005e 4168     		ldr	r1, [r0, #4]
 2504 0060 03EB8302 		add	r2, r3, r3, lsl #2
 2505 0064 9200     		lsls	r2, r2, #2
 2506 0066 2244     		add	r2, r2, r4
 2507 0068 5160     		str	r1, [r2, #4]
 2508              	.L218:
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2509              		.loc 1 2806 0 discriminator 5
 2510 006a 03EB8303 		add	r3, r3, r3, lsl #2
 2511              	.LVL213:
 2512 006e 9B00     		lsls	r3, r3, #2
 2513 0070 074A     		ldr	r2, .L220+12
 2514 0072 1344     		add	r3, r3, r2
 2515 0074 5B68     		ldr	r3, [r3, #4]
 2516 0076 DA68     		ldr	r2, [r3, #12]
 2517 0078 064B     		ldr	r3, .L220+16
 2518 007a 1A60     		str	r2, [r3]
 2519              	.LBE135:
 2520              	.LBE136:
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2521              		.loc 1 2817 0 is_stmt 1 discriminator 5
 2522 007c 5DF8044B 		ldr	r4, [sp], #4
 2523              	.LCFI25:
 2524              		.cfi_restore 4
 2525              		.cfi_def_cfa_offset 0
 2526 0080 7047     		bx	lr
 2527              	.L221:
ARM GAS  /tmp/ccu6CPJi.s 			page 138


 2528 0082 00BF     		.align	2
 2529              	.L220:
 2530 0084 00000000 		.word	.LANCHOR16
 2531 0088 00000000 		.word	.LANCHOR20
 2532 008c 00000000 		.word	.LANCHOR13
 2533 0090 00000000 		.word	.LANCHOR4
 2534 0094 00000000 		.word	.LANCHOR10
 2535              		.cfi_endproc
 2536              	.LFE26:
 2538              		.section	.text.vTaskSuspend,"ax",%progbits
 2539              		.align	2
 2540              		.global	vTaskSuspend
 2541              		.thumb
 2542              		.thumb_func
 2544              	vTaskSuspend:
 2545              	.LFB13:
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 2546              		.loc 1 1567 0
 2547              		.cfi_startproc
 2548              		@ args = 0, pretend = 0, frame = 0
 2549              		@ frame_needed = 0, uses_anonymous_args = 0
 2550              	.LVL214:
 2551 0000 38B5     		push	{r3, r4, r5, lr}
 2552              	.LCFI26:
 2553              		.cfi_def_cfa_offset 16
 2554              		.cfi_offset 3, -16
 2555              		.cfi_offset 4, -12
 2556              		.cfi_offset 5, -8
 2557              		.cfi_offset 14, -4
 2558 0002 0446     		mov	r4, r0
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2559              		.loc 1 1570 0
 2560 0004 FFF7FEFF 		bl	vPortEnterCritical
 2561              	.LVL215:
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2562              		.loc 1 1574 0
 2563 0008 0CB9     		cbnz	r4, .L223
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2564              		.loc 1 1574 0 is_stmt 0 discriminator 1
 2565 000a 2A4B     		ldr	r3, .L233
 2566 000c 1C68     		ldr	r4, [r3]
 2567              	.LVL216:
 2568              	.L223:
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2569              		.loc 1 1580 0 is_stmt 1 discriminator 4
 2570 000e 251D     		adds	r5, r4, #4
 2571 0010 2846     		mov	r0, r5
 2572 0012 FFF7FEFF 		bl	uxListRemove
 2573              	.LVL217:
 2574 0016 70B9     		cbnz	r0, .L224
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2575              		.loc 1 1582 0
 2576 0018 E26A     		ldr	r2, [r4, #44]
 2577 001a 02EB8203 		add	r3, r2, r2, lsl #2
 2578 001e 9B00     		lsls	r3, r3, #2
 2579 0020 2549     		ldr	r1, .L233+4
 2580 0022 CB58     		ldr	r3, [r1, r3]
ARM GAS  /tmp/ccu6CPJi.s 			page 139


 2581 0024 3BB9     		cbnz	r3, .L224
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2582              		.loc 1 1582 0 is_stmt 0 discriminator 1
 2583 0026 0123     		movs	r3, #1
 2584 0028 03FA02F2 		lsl	r2, r3, r2
 2585 002c 2349     		ldr	r1, .L233+8
 2586 002e 0B68     		ldr	r3, [r1]
 2587 0030 23EA0203 		bic	r3, r3, r2
 2588 0034 0B60     		str	r3, [r1]
 2589              	.L224:
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2590              		.loc 1 1590 0 is_stmt 1
 2591 0036 A36A     		ldr	r3, [r4, #40]
 2592 0038 1BB1     		cbz	r3, .L225
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2593              		.loc 1 1592 0
 2594 003a 04F11800 		add	r0, r4, #24
 2595 003e FFF7FEFF 		bl	uxListRemove
 2596              	.LVL218:
 2597              	.L225:
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2598              		.loc 1 1599 0
 2599 0042 1F48     		ldr	r0, .L233+12
 2600 0044 2946     		mov	r1, r5
 2601 0046 FFF7FEFF 		bl	vListInsertEnd
 2602              	.LVL219:
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2603              		.loc 1 1601 0
 2604 004a FFF7FEFF 		bl	vPortExitCritical
 2605              	.LVL220:
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2606              		.loc 1 1603 0
 2607 004e 1D4B     		ldr	r3, .L233+16
 2608 0050 1B68     		ldr	r3, [r3]
 2609 0052 2BB1     		cbz	r3, .L226
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2610              		.loc 1 1607 0
 2611 0054 FFF7FEFF 		bl	vPortEnterCritical
 2612              	.LVL221:
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2613              		.loc 1 1609 0
 2614 0058 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2615              	.LVL222:
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2616              		.loc 1 1611 0
 2617 005c FFF7FEFF 		bl	vPortExitCritical
 2618              	.LVL223:
 2619              	.L226:
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2620              		.loc 1 1618 0
 2621 0060 144B     		ldr	r3, .L233
 2622 0062 1B68     		ldr	r3, [r3]
 2623 0064 9C42     		cmp	r4, r3
 2624 0066 23D1     		bne	.L222
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2625              		.loc 1 1620 0
 2626 0068 164B     		ldr	r3, .L233+16
ARM GAS  /tmp/ccu6CPJi.s 			page 140


 2627 006a 1B68     		ldr	r3, [r3]
 2628 006c A3B1     		cbz	r3, .L228
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 2629              		.loc 1 1623 0
 2630 006e 164B     		ldr	r3, .L233+20
 2631 0070 1B68     		ldr	r3, [r3]
 2632 0072 43B1     		cbz	r3, .L229
 2633              	.LBB137:
 2634              	.LBB138:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2635              		.loc 2 237 0
 2636              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2637 0074 4FF05003 			mov r3, #80												
 2638 0078 83F31188 		msr basepri, r3											
 2639 007c BFF36F8F 		isb														
 2640 0080 BFF34F8F 		dsb														
 2641              	
 2642              	@ 0 "" 2
 2643              	.LVL224:
 2644              		.thumb
 2645              	.L230:
 2646              	.LBE138:
 2647              	.LBE137:
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 2648              		.loc 1 1623 0 discriminator 1
 2649 0084 FEE7     		b	.L230
 2650              	.L229:
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2651              		.loc 1 1624 0
 2652 0086 4FF08052 		mov	r2, #268435456
 2653 008a 104B     		ldr	r3, .L233+24
 2654 008c 1A60     		str	r2, [r3]
 2655              	@ 1624 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2656 008e BFF34F8F 		dsb
 2657              	@ 0 "" 2
 2658              	@ 1624 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2659 0092 BFF36F8F 		isb
 2660              	@ 0 "" 2
 2661              		.thumb
 2662 0096 38BD     		pop	{r3, r4, r5, pc}
 2663              	.LVL225:
 2664              	.L228:
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2665              		.loc 1 1631 0
 2666 0098 094B     		ldr	r3, .L233+12
 2667 009a 1A68     		ldr	r2, [r3]
 2668 009c 0C4B     		ldr	r3, .L233+28
 2669 009e 1B68     		ldr	r3, [r3]
 2670 00a0 9A42     		cmp	r2, r3
 2671 00a2 03D1     		bne	.L231
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2672              		.loc 1 1637 0
 2673 00a4 0022     		movs	r2, #0
 2674 00a6 034B     		ldr	r3, .L233
 2675 00a8 1A60     		str	r2, [r3]
 2676 00aa 38BD     		pop	{r3, r4, r5, pc}
 2677              	.LVL226:
ARM GAS  /tmp/ccu6CPJi.s 			page 141


 2678              	.L231:
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2679              		.loc 1 1641 0
 2680 00ac FFF7FEFF 		bl	vTaskSwitchContext
 2681              	.LVL227:
 2682              	.L222:
 2683 00b0 38BD     		pop	{r3, r4, r5, pc}
 2684              	.LVL228:
 2685              	.L234:
 2686 00b2 00BF     		.align	2
 2687              	.L233:
 2688 00b4 00000000 		.word	.LANCHOR10
 2689 00b8 00000000 		.word	.LANCHOR4
 2690 00bc 00000000 		.word	.LANCHOR13
 2691 00c0 00000000 		.word	.LANCHOR0
 2692 00c4 00000000 		.word	.LANCHOR11
 2693 00c8 00000000 		.word	.LANCHOR16
 2694 00cc 04ED00E0 		.word	-536810236
 2695 00d0 00000000 		.word	.LANCHOR9
 2696              		.cfi_endproc
 2697              	.LFE13:
 2699              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 2700              		.align	2
 2701              		.global	vTaskPlaceOnEventList
 2702              		.thumb
 2703              		.thumb_func
 2705              	vTaskPlaceOnEventList:
 2706              	.LFB27:
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2707              		.loc 1 2821 0
 2708              		.cfi_startproc
 2709              		@ args = 0, pretend = 0, frame = 0
 2710              		@ frame_needed = 0, uses_anonymous_args = 0
 2711              	.LVL229:
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2712              		.loc 1 2822 0
 2713 0000 40B9     		cbnz	r0, .L236
 2714              	.LBB139:
 2715              	.LBB140:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2716              		.loc 2 237 0
 2717              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2718 0002 4FF05003 			mov r3, #80												
 2719 0006 83F31188 		msr basepri, r3											
 2720 000a BFF36F8F 		isb														
 2721 000e BFF34F8F 		dsb														
 2722              	
 2723              	@ 0 "" 2
 2724              	.LVL230:
 2725              		.thumb
 2726              	.L237:
 2727              	.LBE140:
 2728              	.LBE139:
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2729              		.loc 1 2822 0 discriminator 1
 2730 0012 FEE7     		b	.L237
 2731              	.L236:
ARM GAS  /tmp/ccu6CPJi.s 			page 142


2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2732              		.loc 1 2821 0
 2733 0014 10B5     		push	{r4, lr}
 2734              	.LCFI27:
 2735              		.cfi_def_cfa_offset 8
 2736              		.cfi_offset 4, -8
 2737              		.cfi_offset 14, -4
 2738 0016 0C46     		mov	r4, r1
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2739              		.loc 1 2831 0
 2740 0018 044B     		ldr	r3, .L239
 2741 001a 1968     		ldr	r1, [r3]
 2742              	.LVL231:
 2743 001c 1831     		adds	r1, r1, #24
 2744 001e FFF7FEFF 		bl	vListInsert
 2745              	.LVL232:
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2746              		.loc 1 2833 0
 2747 0022 2046     		mov	r0, r4
 2748 0024 0121     		movs	r1, #1
 2749 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2750              	.LVL233:
 2751 002a 10BD     		pop	{r4, pc}
 2752              	.LVL234:
 2753              	.L240:
 2754              		.align	2
 2755              	.L239:
 2756 002c 00000000 		.word	.LANCHOR10
 2757              		.cfi_endproc
 2758              	.LFE27:
 2760              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 2761              		.align	2
 2762              		.global	vTaskPlaceOnUnorderedEventList
 2763              		.thumb
 2764              		.thumb_func
 2766              	vTaskPlaceOnUnorderedEventList:
 2767              	.LFB28:
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2768              		.loc 1 2838 0
 2769              		.cfi_startproc
 2770              		@ args = 0, pretend = 0, frame = 0
 2771              		@ frame_needed = 0, uses_anonymous_args = 0
 2772              	.LVL235:
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2773              		.loc 1 2839 0
 2774 0000 40B9     		cbnz	r0, .L242
 2775              	.LBB141:
 2776              	.LBB142:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2777              		.loc 2 237 0
 2778              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2779 0002 4FF05003 			mov r3, #80												
 2780 0006 83F31188 		msr basepri, r3											
 2781 000a BFF36F8F 		isb														
 2782 000e BFF34F8F 		dsb														
 2783              	
 2784              	@ 0 "" 2
ARM GAS  /tmp/ccu6CPJi.s 			page 143


 2785              	.LVL236:
 2786              		.thumb
 2787              	.L243:
 2788              	.LBE142:
 2789              	.LBE141:
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2790              		.loc 1 2839 0 discriminator 1
 2791 0012 FEE7     		b	.L243
 2792              	.L242:
 2793 0014 0346     		mov	r3, r0
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2794              		.loc 1 2843 0
 2795 0016 0F48     		ldr	r0, .L247
 2796              	.LVL237:
 2797 0018 0068     		ldr	r0, [r0]
 2798 001a 40B9     		cbnz	r0, .L244
 2799              	.LBB143:
 2800              	.LBB144:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2801              		.loc 2 237 0
 2802              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2803 001c 4FF05003 			mov r3, #80												
 2804 0020 83F31188 		msr basepri, r3											
 2805 0024 BFF36F8F 		isb														
 2806 0028 BFF34F8F 		dsb														
 2807              	
 2808              	@ 0 "" 2
 2809              	.LVL238:
 2810              		.thumb
 2811              	.L245:
 2812              	.LBE144:
 2813              	.LBE143:
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2814              		.loc 1 2843 0 discriminator 2
 2815 002c FEE7     		b	.L245
 2816              	.LVL239:
 2817              	.L244:
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 2818              		.loc 1 2838 0
 2819 002e 10B5     		push	{r4, lr}
 2820              	.LCFI28:
 2821              		.cfi_def_cfa_offset 8
 2822              		.cfi_offset 4, -8
 2823              		.cfi_offset 14, -4
 2824 0030 1846     		mov	r0, r3
 2825 0032 1446     		mov	r4, r2
 2826 0034 0B46     		mov	r3, r1
 2827              	.LVL240:
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2828              		.loc 1 2848 0
 2829 0036 084A     		ldr	r2, .L247+4
 2830              	.LVL241:
 2831 0038 1168     		ldr	r1, [r2]
 2832              	.LVL242:
 2833 003a 43F00043 		orr	r3, r3, #-2147483648
 2834              	.LVL243:
 2835 003e 8B61     		str	r3, [r1, #24]
ARM GAS  /tmp/ccu6CPJi.s 			page 144


2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2836              		.loc 1 2855 0
 2837 0040 1168     		ldr	r1, [r2]
 2838 0042 1831     		adds	r1, r1, #24
 2839 0044 FFF7FEFF 		bl	vListInsertEnd
 2840              	.LVL244:
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2841              		.loc 1 2857 0
 2842 0048 2046     		mov	r0, r4
 2843 004a 0121     		movs	r1, #1
 2844 004c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2845              	.LVL245:
 2846 0050 10BD     		pop	{r4, pc}
 2847              	.LVL246:
 2848              	.L248:
 2849 0052 00BF     		.align	2
 2850              	.L247:
 2851 0054 00000000 		.word	.LANCHOR16
 2852 0058 00000000 		.word	.LANCHOR10
 2853              		.cfi_endproc
 2854              	.LFE28:
 2856              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 2857              		.align	2
 2858              		.global	xTaskRemoveFromEventList
 2859              		.thumb
 2860              		.thumb_func
 2862              	xTaskRemoveFromEventList:
 2863              	.LFB29:
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 2864              		.loc 1 2895 0
 2865              		.cfi_startproc
 2866              		@ args = 0, pretend = 0, frame = 0
 2867              		@ frame_needed = 0, uses_anonymous_args = 0
 2868              	.LVL247:
 2869 0000 38B5     		push	{r3, r4, r5, lr}
 2870              	.LCFI29:
 2871              		.cfi_def_cfa_offset 16
 2872              		.cfi_offset 3, -16
 2873              		.cfi_offset 4, -12
 2874              		.cfi_offset 5, -8
 2875              		.cfi_offset 14, -4
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 2876              		.loc 1 2912 0
 2877 0002 C368     		ldr	r3, [r0, #12]
 2878 0004 DC68     		ldr	r4, [r3, #12]
 2879              	.LVL248:
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 2880              		.loc 1 2913 0
 2881 0006 44B9     		cbnz	r4, .L250
 2882              	.LBB145:
 2883              	.LBB146:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2884              		.loc 2 237 0
 2885              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2886 0008 4FF05003 			mov r3, #80												
 2887 000c 83F31188 		msr basepri, r3											
 2888 0010 BFF36F8F 		isb														
ARM GAS  /tmp/ccu6CPJi.s 			page 145


 2889 0014 BFF34F8F 		dsb														
 2890              	
 2891              	@ 0 "" 2
 2892              	.LVL249:
 2893              		.thumb
 2894              	.L251:
 2895              	.LBE146:
 2896              	.LBE145:
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 2897              		.loc 1 2913 0 discriminator 1
 2898 0018 FEE7     		b	.L251
 2899              	.L250:
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2900              		.loc 1 2914 0
 2901 001a 04F11805 		add	r5, r4, #24
 2902 001e 2846     		mov	r0, r5
 2903              	.LVL250:
 2904 0020 FFF7FEFF 		bl	uxListRemove
 2905              	.LVL251:
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2906              		.loc 1 2916 0
 2907 0024 134B     		ldr	r3, .L257
 2908 0026 1B68     		ldr	r3, [r3]
 2909 0028 A3B9     		cbnz	r3, .L252
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 2910              		.loc 1 2918 0
 2911 002a 251D     		adds	r5, r4, #4
 2912 002c 2846     		mov	r0, r5
 2913 002e FFF7FEFF 		bl	uxListRemove
 2914              	.LVL252:
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2915              		.loc 1 2919 0
 2916 0032 E36A     		ldr	r3, [r4, #44]
 2917 0034 0122     		movs	r2, #1
 2918 0036 02FA03F1 		lsl	r1, r2, r3
 2919 003a 0F48     		ldr	r0, .L257+4
 2920 003c 0268     		ldr	r2, [r0]
 2921 003e 0A43     		orrs	r2, r2, r1
 2922 0040 0260     		str	r2, [r0]
 2923 0042 03EB8303 		add	r3, r3, r3, lsl #2
 2924 0046 9B00     		lsls	r3, r3, #2
 2925 0048 0C48     		ldr	r0, .L257+8
 2926 004a 1844     		add	r0, r0, r3
 2927 004c 2946     		mov	r1, r5
 2928 004e FFF7FEFF 		bl	vListInsertEnd
 2929              	.LVL253:
 2930 0052 03E0     		b	.L253
 2931              	.L252:
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2932              		.loc 1 2925 0
 2933 0054 0A48     		ldr	r0, .L257+12
 2934 0056 2946     		mov	r1, r5
 2935 0058 FFF7FEFF 		bl	vListInsertEnd
 2936              	.LVL254:
 2937              	.L253:
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2938              		.loc 1 2928 0
ARM GAS  /tmp/ccu6CPJi.s 			page 146


 2939 005c E26A     		ldr	r2, [r4, #44]
 2940 005e 094B     		ldr	r3, .L257+16
 2941 0060 1B68     		ldr	r3, [r3]
 2942 0062 DB6A     		ldr	r3, [r3, #44]
 2943 0064 9A42     		cmp	r2, r3
 2944 0066 03D9     		bls	.L255
 2945              	.LVL255:
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2946              		.loc 1 2937 0
 2947 0068 0120     		movs	r0, #1
 2948 006a 074B     		ldr	r3, .L257+20
 2949 006c 1860     		str	r0, [r3]
 2950 006e 38BD     		pop	{r3, r4, r5, pc}
 2951              	.LVL256:
 2952              	.L255:
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2953              		.loc 1 2941 0
 2954 0070 0020     		movs	r0, #0
 2955              	.LVL257:
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2956              		.loc 1 2959 0
 2957 0072 38BD     		pop	{r3, r4, r5, pc}
 2958              	.LVL258:
 2959              	.L258:
 2960              		.align	2
 2961              	.L257:
 2962 0074 00000000 		.word	.LANCHOR16
 2963 0078 00000000 		.word	.LANCHOR13
 2964 007c 00000000 		.word	.LANCHOR4
 2965 0080 00000000 		.word	.LANCHOR1
 2966 0084 00000000 		.word	.LANCHOR10
 2967 0088 00000000 		.word	.LANCHOR20
 2968              		.cfi_endproc
 2969              	.LFE29:
 2971              		.section	.text.xTaskRemoveFromUnorderedEventList,"ax",%progbits
 2972              		.align	2
 2973              		.global	xTaskRemoveFromUnorderedEventList
 2974              		.thumb
 2975              		.thumb_func
 2977              	xTaskRemoveFromUnorderedEventList:
 2978              	.LFB30:
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 2979              		.loc 1 2963 0
 2980              		.cfi_startproc
 2981              		@ args = 0, pretend = 0, frame = 0
 2982              		@ frame_needed = 0, uses_anonymous_args = 0
 2983              	.LVL259:
 2984 0000 38B5     		push	{r3, r4, r5, lr}
 2985              	.LCFI30:
 2986              		.cfi_def_cfa_offset 16
 2987              		.cfi_offset 3, -16
 2988              		.cfi_offset 4, -12
 2989              		.cfi_offset 5, -8
 2990              		.cfi_offset 14, -4
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2991              		.loc 1 2969 0
 2992 0002 1E4B     		ldr	r3, .L267
ARM GAS  /tmp/ccu6CPJi.s 			page 147


 2993 0004 1B68     		ldr	r3, [r3]
 2994 0006 43B9     		cbnz	r3, .L260
 2995              	.LBB147:
 2996              	.LBB148:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2997              		.loc 2 237 0
 2998              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2999 0008 4FF05003 			mov r3, #80												
 3000 000c 83F31188 		msr basepri, r3											
 3001 0010 BFF36F8F 		isb														
 3002 0014 BFF34F8F 		dsb														
 3003              	
 3004              	@ 0 "" 2
 3005              	.LVL260:
 3006              		.thumb
 3007              	.L261:
 3008              	.LBE148:
 3009              	.LBE147:
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3010              		.loc 1 2969 0 discriminator 1
 3011 0018 FEE7     		b	.L261
 3012              	.L260:
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3013              		.loc 1 2972 0
 3014 001a 41F00043 		orr	r3, r1, #-2147483648
 3015 001e 0360     		str	r3, [r0]
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3016              		.loc 1 2976 0
 3017 0020 C468     		ldr	r4, [r0, #12]
 3018              	.LVL261:
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3019              		.loc 1 2977 0
 3020 0022 44B9     		cbnz	r4, .L262
 3021              	.LBB149:
 3022              	.LBB150:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3023              		.loc 2 237 0
 3024              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3025 0024 4FF05003 			mov r3, #80												
 3026 0028 83F31188 		msr basepri, r3											
 3027 002c BFF36F8F 		isb														
 3028 0030 BFF34F8F 		dsb														
 3029              	
 3030              	@ 0 "" 2
 3031              	.LVL262:
 3032              		.thumb
 3033              	.L263:
 3034              	.LBE150:
 3035              	.LBE149:
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3036              		.loc 1 2977 0 discriminator 2
 3037 0034 FEE7     		b	.L263
 3038              	.L262:
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3039              		.loc 1 2978 0
 3040 0036 FFF7FEFF 		bl	uxListRemove
 3041              	.LVL263:
ARM GAS  /tmp/ccu6CPJi.s 			page 148


2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3042              		.loc 1 2983 0
 3043 003a 251D     		adds	r5, r4, #4
 3044 003c 2846     		mov	r0, r5
 3045 003e FFF7FEFF 		bl	uxListRemove
 3046              	.LVL264:
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3047              		.loc 1 2984 0
 3048 0042 E36A     		ldr	r3, [r4, #44]
 3049 0044 0122     		movs	r2, #1
 3050 0046 02FA03F1 		lsl	r1, r2, r3
 3051 004a 0D48     		ldr	r0, .L267+4
 3052 004c 0268     		ldr	r2, [r0]
 3053 004e 0A43     		orrs	r2, r2, r1
 3054 0050 0260     		str	r2, [r0]
 3055 0052 03EB8303 		add	r3, r3, r3, lsl #2
 3056 0056 9B00     		lsls	r3, r3, #2
 3057 0058 0A48     		ldr	r0, .L267+8
 3058 005a 1844     		add	r0, r0, r3
 3059 005c 2946     		mov	r1, r5
 3060 005e FFF7FEFF 		bl	vListInsertEnd
 3061              	.LVL265:
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3062              		.loc 1 2986 0
 3063 0062 E26A     		ldr	r2, [r4, #44]
 3064 0064 084B     		ldr	r3, .L267+12
 3065 0066 1B68     		ldr	r3, [r3]
 3066 0068 DB6A     		ldr	r3, [r3, #44]
 3067 006a 9A42     		cmp	r2, r3
 3068 006c 03D9     		bls	.L265
 3069              	.LVL266:
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3070              		.loc 1 2996 0
 3071 006e 0120     		movs	r0, #1
 3072 0070 064B     		ldr	r3, .L267+16
 3073 0072 1860     		str	r0, [r3]
 3074 0074 38BD     		pop	{r3, r4, r5, pc}
 3075              	.LVL267:
 3076              	.L265:
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3077              		.loc 1 3000 0
 3078 0076 0020     		movs	r0, #0
 3079              	.LVL268:
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3080              		.loc 1 3004 0
 3081 0078 38BD     		pop	{r3, r4, r5, pc}
 3082              	.LVL269:
 3083              	.L268:
 3084 007a 00BF     		.align	2
 3085              	.L267:
 3086 007c 00000000 		.word	.LANCHOR16
 3087 0080 00000000 		.word	.LANCHOR13
 3088 0084 00000000 		.word	.LANCHOR4
 3089 0088 00000000 		.word	.LANCHOR10
 3090 008c 00000000 		.word	.LANCHOR20
 3091              		.cfi_endproc
 3092              	.LFE30:
ARM GAS  /tmp/ccu6CPJi.s 			page 149


 3094              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3095              		.align	2
 3096              		.global	vTaskSetTimeOutState
 3097              		.thumb
 3098              		.thumb_func
 3100              	vTaskSetTimeOutState:
 3101              	.LFB31:
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3102              		.loc 1 3008 0
 3103              		.cfi_startproc
 3104              		@ args = 0, pretend = 0, frame = 0
 3105              		@ frame_needed = 0, uses_anonymous_args = 0
 3106              		@ link register save eliminated.
 3107              	.LVL270:
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 3108              		.loc 1 3009 0
 3109 0000 40B9     		cbnz	r0, .L270
 3110              	.LBB151:
 3111              	.LBB152:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3112              		.loc 2 237 0
 3113              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3114 0002 4FF05003 			mov r3, #80												
 3115 0006 83F31188 		msr basepri, r3											
 3116 000a BFF36F8F 		isb														
 3117 000e BFF34F8F 		dsb														
 3118              	
 3119              	@ 0 "" 2
 3120              	.LVL271:
 3121              		.thumb
 3122              	.L271:
 3123              	.LBE152:
 3124              	.LBE151:
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
 3125              		.loc 1 3009 0 discriminator 1
 3126 0012 FEE7     		b	.L271
 3127              	.L270:
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3128              		.loc 1 3010 0
 3129 0014 034A     		ldr	r2, .L272
 3130 0016 1268     		ldr	r2, [r2]
 3131 0018 0260     		str	r2, [r0]
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3132              		.loc 1 3011 0
 3133 001a 034A     		ldr	r2, .L272+4
 3134 001c 1268     		ldr	r2, [r2]
 3135 001e 4260     		str	r2, [r0, #4]
 3136 0020 7047     		bx	lr
 3137              	.L273:
 3138 0022 00BF     		.align	2
 3139              	.L272:
 3140 0024 00000000 		.word	.LANCHOR18
 3141 0028 00000000 		.word	.LANCHOR14
 3142              		.cfi_endproc
 3143              	.LFE31:
 3145              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3146              		.align	2
ARM GAS  /tmp/ccu6CPJi.s 			page 150


 3147              		.global	xTaskCheckForTimeOut
 3148              		.thumb
 3149              		.thumb_func
 3151              	xTaskCheckForTimeOut:
 3152              	.LFB32:
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 3153              		.loc 1 3016 0
 3154              		.cfi_startproc
 3155              		@ args = 0, pretend = 0, frame = 0
 3156              		@ frame_needed = 0, uses_anonymous_args = 0
 3157              	.LVL272:
 3158 0000 38B5     		push	{r3, r4, r5, lr}
 3159              	.LCFI31:
 3160              		.cfi_def_cfa_offset 16
 3161              		.cfi_offset 3, -16
 3162              		.cfi_offset 4, -12
 3163              		.cfi_offset 5, -8
 3164              		.cfi_offset 14, -4
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 3165              		.loc 1 3019 0
 3166 0002 40B9     		cbnz	r0, .L275
 3167              	.LBB153:
 3168              	.LBB154:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3169              		.loc 2 237 0
 3170              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3171 0004 4FF05003 			mov r3, #80												
 3172 0008 83F31188 		msr basepri, r3											
 3173 000c BFF36F8F 		isb														
 3174 0010 BFF34F8F 		dsb														
 3175              	
 3176              	@ 0 "" 2
 3177              	.LVL273:
 3178              		.thumb
 3179              	.L276:
 3180              	.LBE154:
 3181              	.LBE153:
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 3182              		.loc 1 3019 0 discriminator 1
 3183 0014 FEE7     		b	.L276
 3184              	.L275:
 3185 0016 0446     		mov	r4, r0
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3186              		.loc 1 3020 0
 3187 0018 41B9     		cbnz	r1, .L277
 3188              	.LBB155:
 3189              	.LBB156:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3190              		.loc 2 237 0
 3191              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3192 001a 4FF05003 			mov r3, #80												
 3193 001e 83F31188 		msr basepri, r3											
 3194 0022 BFF36F8F 		isb														
 3195 0026 BFF34F8F 		dsb														
 3196              	
 3197              	@ 0 "" 2
 3198              	.LVL274:
ARM GAS  /tmp/ccu6CPJi.s 			page 151


 3199              		.thumb
 3200              	.L278:
 3201              	.LBE156:
 3202              	.LBE155:
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3203              		.loc 1 3020 0 discriminator 2
 3204 002a FEE7     		b	.L278
 3205              	.L277:
 3206 002c 0D46     		mov	r5, r1
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3207              		.loc 1 3022 0
 3208 002e FFF7FEFF 		bl	vPortEnterCritical
 3209              	.LVL275:
 3210              	.LBB157:
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3211              		.loc 1 3025 0
 3212 0032 114B     		ldr	r3, .L285
 3213 0034 1968     		ldr	r1, [r3]
 3214              	.LVL276:
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3215              		.loc 1 3039 0
 3216 0036 2A68     		ldr	r2, [r5]
 3217 0038 B2F1FF3F 		cmp	r2, #-1
 3218 003c 13D0     		beq	.L281
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3219              		.loc 1 3049 0
 3220 003e 2068     		ldr	r0, [r4]
 3221 0040 0E4B     		ldr	r3, .L285+4
 3222 0042 1B68     		ldr	r3, [r3]
 3223 0044 9842     		cmp	r0, r3
 3224 0046 02D0     		beq	.L280
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3225              		.loc 1 3049 0 is_stmt 0 discriminator 1
 3226 0048 6368     		ldr	r3, [r4, #4]
 3227 004a 8B42     		cmp	r3, r1
 3228 004c 0DD9     		bls	.L282
 3229              	.L280:
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3230              		.loc 1 3058 0 is_stmt 1
 3231 004e 6368     		ldr	r3, [r4, #4]
 3232 0050 C81A     		subs	r0, r1, r3
 3233 0052 8242     		cmp	r2, r0
 3234 0054 0BD9     		bls	.L283
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOutState( pxTimeOut );
 3235              		.loc 1 3061 0
 3236 0056 5B1A     		subs	r3, r3, r1
 3237 0058 1344     		add	r3, r3, r2
 3238 005a 2B60     		str	r3, [r5]
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 3239              		.loc 1 3062 0
 3240 005c 2046     		mov	r0, r4
 3241 005e FFF7FEFF 		bl	vTaskSetTimeOutState
 3242              	.LVL277:
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3243              		.loc 1 3063 0
 3244 0062 0024     		movs	r4, #0
 3245              	.LVL278:
ARM GAS  /tmp/ccu6CPJi.s 			page 152


 3246 0064 04E0     		b	.L279
 3247              	.LVL279:
 3248              	.L281:
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3249              		.loc 1 3044 0
 3250 0066 0024     		movs	r4, #0
 3251              	.LVL280:
 3252 0068 02E0     		b	.L279
 3253              	.LVL281:
 3254              	.L282:
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3255              		.loc 1 3056 0
 3256 006a 0124     		movs	r4, #1
 3257              	.LVL282:
 3258 006c 00E0     		b	.L279
 3259              	.LVL283:
 3260              	.L283:
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3261              		.loc 1 3067 0
 3262 006e 0124     		movs	r4, #1
 3263              	.LVL284:
 3264              	.L279:
 3265              	.LBE157:
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3266              		.loc 1 3070 0
 3267 0070 FFF7FEFF 		bl	vPortExitCritical
 3268              	.LVL285:
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3269              		.loc 1 3073 0
 3270 0074 2046     		mov	r0, r4
 3271 0076 38BD     		pop	{r3, r4, r5, pc}
 3272              	.LVL286:
 3273              	.L286:
 3274              		.align	2
 3275              	.L285:
 3276 0078 00000000 		.word	.LANCHOR14
 3277 007c 00000000 		.word	.LANCHOR18
 3278              		.cfi_endproc
 3279              	.LFE32:
 3281              		.section	.text.vTaskMissedYield,"ax",%progbits
 3282              		.align	2
 3283              		.global	vTaskMissedYield
 3284              		.thumb
 3285              		.thumb_func
 3287              	vTaskMissedYield:
 3288              	.LFB33:
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 3289              		.loc 1 3077 0
 3290              		.cfi_startproc
 3291              		@ args = 0, pretend = 0, frame = 0
 3292              		@ frame_needed = 0, uses_anonymous_args = 0
 3293              		@ link register save eliminated.
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3294              		.loc 1 3078 0
 3295 0000 0122     		movs	r2, #1
 3296 0002 014B     		ldr	r3, .L288
 3297 0004 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccu6CPJi.s 			page 153


 3298 0006 7047     		bx	lr
 3299              	.L289:
 3300              		.align	2
 3301              	.L288:
 3302 0008 00000000 		.word	.LANCHOR20
 3303              		.cfi_endproc
 3304              	.LFE33:
 3306              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 3307              		.align	2
 3308              		.global	xTaskGetCurrentTaskHandle
 3309              		.thumb
 3310              		.thumb_func
 3312              	xTaskGetCurrentTaskHandle:
 3313              	.LFB39:
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 3314              		.loc 1 3662 0
 3315              		.cfi_startproc
 3316              		@ args = 0, pretend = 0, frame = 0
 3317              		@ frame_needed = 0, uses_anonymous_args = 0
 3318              		@ link register save eliminated.
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3319              		.loc 1 3668 0
 3320 0000 014B     		ldr	r3, .L291
 3321 0002 1868     		ldr	r0, [r3]
 3322              	.LVL287:
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3323              		.loc 1 3671 0
 3324 0004 7047     		bx	lr
 3325              	.L292:
 3326 0006 00BF     		.align	2
 3327              	.L291:
 3328 0008 00000000 		.word	.LANCHOR10
 3329              		.cfi_endproc
 3330              	.LFE39:
 3332              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 3333              		.align	2
 3334              		.global	xTaskGetSchedulerState
 3335              		.thumb
 3336              		.thumb_func
 3338              	xTaskGetSchedulerState:
 3339              	.LFB40:
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 3340              		.loc 1 3679 0
 3341              		.cfi_startproc
 3342              		@ args = 0, pretend = 0, frame = 0
 3343              		@ frame_needed = 0, uses_anonymous_args = 0
 3344              		@ link register save eliminated.
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3345              		.loc 1 3682 0
 3346 0000 054B     		ldr	r3, .L297
 3347 0002 1B68     		ldr	r3, [r3]
 3348 0004 23B1     		cbz	r3, .L295
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3349              		.loc 1 3688 0
 3350 0006 054B     		ldr	r3, .L297+4
 3351 0008 1B68     		ldr	r3, [r3]
 3352 000a 1BB9     		cbnz	r3, .L296
ARM GAS  /tmp/ccu6CPJi.s 			page 154


3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3353              		.loc 1 3690 0
 3354 000c 0220     		movs	r0, #2
 3355 000e 7047     		bx	lr
 3356              	.L295:
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3357              		.loc 1 3684 0
 3358 0010 0120     		movs	r0, #1
 3359 0012 7047     		bx	lr
 3360              	.L296:
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3361              		.loc 1 3694 0
 3362 0014 0020     		movs	r0, #0
 3363              	.LVL288:
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3364              		.loc 1 3699 0
 3365 0016 7047     		bx	lr
 3366              	.L298:
 3367              		.align	2
 3368              	.L297:
 3369 0018 00000000 		.word	.LANCHOR11
 3370 001c 00000000 		.word	.LANCHOR16
 3371              		.cfi_endproc
 3372              	.LFE40:
 3374              		.section	.text.vTaskPriorityInherit,"ax",%progbits
 3375              		.align	2
 3376              		.global	vTaskPriorityInherit
 3377              		.thumb
 3378              		.thumb_func
 3380              	vTaskPriorityInherit:
 3381              	.LFB41:
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3382              		.loc 1 3707 0
 3383              		.cfi_startproc
 3384              		@ args = 0, pretend = 0, frame = 0
 3385              		@ frame_needed = 0, uses_anonymous_args = 0
 3386              	.LVL289:
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3387              		.loc 1 3712 0
 3388 0000 0028     		cmp	r0, #0
 3389 0002 49D0     		beq	.L307
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3390              		.loc 1 3707 0
 3391 0004 38B5     		push	{r3, r4, r5, lr}
 3392              	.LCFI32:
 3393              		.cfi_def_cfa_offset 16
 3394              		.cfi_offset 3, -16
 3395              		.cfi_offset 4, -12
 3396              		.cfi_offset 5, -8
 3397              		.cfi_offset 14, -4
 3398 0006 0346     		mov	r3, r0
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3399              		.loc 1 3717 0
 3400 0008 C16A     		ldr	r1, [r0, #44]
 3401 000a 244A     		ldr	r2, .L308
 3402 000c 1268     		ldr	r2, [r2]
 3403 000e D26A     		ldr	r2, [r2, #44]
ARM GAS  /tmp/ccu6CPJi.s 			page 155


 3404 0010 9142     		cmp	r1, r2
 3405 0012 40D2     		bcs	.L299
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3406              		.loc 1 3722 0
 3407 0014 8269     		ldr	r2, [r0, #24]
 3408 0016 002A     		cmp	r2, #0
 3409 0018 05DB     		blt	.L301
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3410              		.loc 1 3724 0
 3411 001a 204A     		ldr	r2, .L308
 3412 001c 1268     		ldr	r2, [r2]
 3413 001e D26A     		ldr	r2, [r2, #44]
 3414 0020 C2F10702 		rsb	r2, r2, #7
 3415 0024 8261     		str	r2, [r0, #24]
 3416              	.L301:
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3417              		.loc 1 3733 0
 3418 0026 5969     		ldr	r1, [r3, #20]
 3419 0028 DA6A     		ldr	r2, [r3, #44]
 3420 002a 02EB8202 		add	r2, r2, r2, lsl #2
 3421 002e 9200     		lsls	r2, r2, #2
 3422 0030 1B48     		ldr	r0, .L308+4
 3423              	.LVL290:
 3424 0032 0244     		add	r2, r2, r0
 3425 0034 9142     		cmp	r1, r2
 3426 0036 01D1     		bne	.L305
 3427 0038 0122     		movs	r2, #1
 3428 003a 00E0     		b	.L302
 3429              	.L305:
 3430 003c 0022     		movs	r2, #0
 3431              	.L302:
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3432              		.loc 1 3733 0 is_stmt 0 discriminator 4
 3433 003e 32B3     		cbz	r2, .L303
 3434 0040 1C46     		mov	r4, r3
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 3435              		.loc 1 3735 0 is_stmt 1
 3436 0042 1D1D     		adds	r5, r3, #4
 3437 0044 2846     		mov	r0, r5
 3438 0046 FFF7FEFF 		bl	uxListRemove
 3439              	.LVL291:
 3440 004a 68B9     		cbnz	r0, .L304
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3441              		.loc 1 3737 0
 3442 004c E26A     		ldr	r2, [r4, #44]
 3443 004e 02EB8203 		add	r3, r2, r2, lsl #2
 3444 0052 9B00     		lsls	r3, r3, #2
 3445 0054 1249     		ldr	r1, .L308+4
 3446 0056 CB58     		ldr	r3, [r1, r3]
 3447 0058 33B9     		cbnz	r3, .L304
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3448              		.loc 1 3737 0 is_stmt 0 discriminator 1
 3449 005a 0123     		movs	r3, #1
 3450 005c 9340     		lsls	r3, r3, r2
 3451 005e 1149     		ldr	r1, .L308+8
 3452 0060 0A68     		ldr	r2, [r1]
 3453 0062 22EA0303 		bic	r3, r2, r3
ARM GAS  /tmp/ccu6CPJi.s 			page 156


 3454 0066 0B60     		str	r3, [r1]
 3455              	.L304:
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3456              		.loc 1 3745 0 is_stmt 1
 3457 0068 0C4B     		ldr	r3, .L308
 3458 006a 1B68     		ldr	r3, [r3]
 3459 006c D86A     		ldr	r0, [r3, #44]
 3460 006e E062     		str	r0, [r4, #44]
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3461              		.loc 1 3746 0
 3462 0070 0123     		movs	r3, #1
 3463 0072 8340     		lsls	r3, r3, r0
 3464 0074 0B49     		ldr	r1, .L308+8
 3465 0076 0A68     		ldr	r2, [r1]
 3466 0078 1343     		orrs	r3, r3, r2
 3467 007a 0B60     		str	r3, [r1]
 3468 007c 00EB8000 		add	r0, r0, r0, lsl #2
 3469 0080 8000     		lsls	r0, r0, #2
 3470 0082 074B     		ldr	r3, .L308+4
 3471 0084 1844     		add	r0, r0, r3
 3472 0086 2946     		mov	r1, r5
 3473 0088 FFF7FEFF 		bl	vListInsertEnd
 3474              	.LVL292:
 3475 008c 38BD     		pop	{r3, r4, r5, pc}
 3476              	.LVL293:
 3477              	.L303:
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3478              		.loc 1 3751 0
 3479 008e 034A     		ldr	r2, .L308
 3480 0090 1268     		ldr	r2, [r2]
 3481 0092 D26A     		ldr	r2, [r2, #44]
 3482 0094 DA62     		str	r2, [r3, #44]
 3483              	.L299:
 3484 0096 38BD     		pop	{r3, r4, r5, pc}
 3485              	.LVL294:
 3486              	.L307:
 3487              	.LCFI33:
 3488              		.cfi_def_cfa_offset 0
 3489              		.cfi_restore 3
 3490              		.cfi_restore 4
 3491              		.cfi_restore 5
 3492              		.cfi_restore 14
 3493 0098 7047     		bx	lr
 3494              	.L309:
 3495 009a 00BF     		.align	2
 3496              	.L308:
 3497 009c 00000000 		.word	.LANCHOR10
 3498 00a0 00000000 		.word	.LANCHOR4
 3499 00a4 00000000 		.word	.LANCHOR13
 3500              		.cfi_endproc
 3501              	.LFE41:
 3503              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 3504              		.align	2
 3505              		.global	xTaskPriorityDisinherit
 3506              		.thumb
 3507              		.thumb_func
 3509              	xTaskPriorityDisinherit:
ARM GAS  /tmp/ccu6CPJi.s 			page 157


 3510              	.LFB42:
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3511              		.loc 1 3773 0
 3512              		.cfi_startproc
 3513              		@ args = 0, pretend = 0, frame = 0
 3514              		@ frame_needed = 0, uses_anonymous_args = 0
 3515              	.LVL295:
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3516              		.loc 1 3777 0
 3517 0000 0028     		cmp	r0, #0
 3518 0002 4BD0     		beq	.L317
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 3519              		.loc 1 3773 0
 3520 0004 38B5     		push	{r3, r4, r5, lr}
 3521              	.LCFI34:
 3522              		.cfi_def_cfa_offset 16
 3523              		.cfi_offset 3, -16
 3524              		.cfi_offset 4, -12
 3525              		.cfi_offset 5, -8
 3526              		.cfi_offset 14, -4
 3527 0006 0346     		mov	r3, r0
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3528              		.loc 1 3783 0
 3529 0008 274A     		ldr	r2, .L321
 3530 000a 1268     		ldr	r2, [r2]
 3531 000c 9042     		cmp	r0, r2
 3532 000e 08D0     		beq	.L312
 3533              	.LBB158:
 3534              	.LBB159:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3535              		.loc 2 237 0
 3536              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3537 0010 4FF05003 			mov r3, #80												
 3538 0014 83F31188 		msr basepri, r3											
 3539 0018 BFF36F8F 		isb														
 3540 001c BFF34F8F 		dsb														
 3541              	
 3542              	@ 0 "" 2
 3543              	.LVL296:
 3544              		.thumb
 3545              	.L313:
 3546              	.LBE159:
 3547              	.LBE158:
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3548              		.loc 1 3783 0 discriminator 1
 3549 0020 FEE7     		b	.L313
 3550              	.L312:
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 3551              		.loc 1 3785 0
 3552 0022 826C     		ldr	r2, [r0, #72]
 3553 0024 42B9     		cbnz	r2, .L314
 3554              	.LBB160:
 3555              	.LBB161:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3556              		.loc 2 237 0
 3557              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3558 0026 4FF05003 			mov r3, #80												
ARM GAS  /tmp/ccu6CPJi.s 			page 158


 3559 002a 83F31188 		msr basepri, r3											
 3560 002e BFF36F8F 		isb														
 3561 0032 BFF34F8F 		dsb														
 3562              	
 3563              	@ 0 "" 2
 3564              	.LVL297:
 3565              		.thumb
 3566              	.L315:
 3567              	.LBE161:
 3568              	.LBE160:
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 3569              		.loc 1 3785 0 discriminator 2
 3570 0036 FEE7     		b	.L315
 3571              	.L314:
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3572              		.loc 1 3786 0
 3573 0038 013A     		subs	r2, r2, #1
 3574 003a 8264     		str	r2, [r0, #72]
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3575              		.loc 1 3790 0
 3576 003c C06A     		ldr	r0, [r0, #44]
 3577              	.LVL298:
 3578 003e 596C     		ldr	r1, [r3, #68]
 3579 0040 8842     		cmp	r0, r1
 3580 0042 2DD0     		beq	.L318
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3581              		.loc 1 3793 0
 3582 0044 72BB     		cbnz	r2, .L319
 3583 0046 1C46     		mov	r4, r3
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 3584              		.loc 1 3800 0
 3585 0048 1D1D     		adds	r5, r3, #4
 3586 004a 2846     		mov	r0, r5
 3587 004c FFF7FEFF 		bl	uxListRemove
 3588              	.LVL299:
 3589 0050 70B9     		cbnz	r0, .L316
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3590              		.loc 1 3802 0
 3591 0052 E26A     		ldr	r2, [r4, #44]
 3592 0054 02EB8203 		add	r3, r2, r2, lsl #2
 3593 0058 9B00     		lsls	r3, r3, #2
 3594 005a 1449     		ldr	r1, .L321+4
 3595 005c CB58     		ldr	r3, [r1, r3]
 3596 005e 3BB9     		cbnz	r3, .L316
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 3597              		.loc 1 3802 0 is_stmt 0 discriminator 1
 3598 0060 0123     		movs	r3, #1
 3599 0062 03FA02F2 		lsl	r2, r3, r2
 3600 0066 1249     		ldr	r1, .L321+8
 3601 0068 0B68     		ldr	r3, [r1]
 3602 006a 23EA0203 		bic	r3, r3, r2
 3603 006e 0B60     		str	r3, [r1]
 3604              	.L316:
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3605              		.loc 1 3812 0 is_stmt 1
 3606 0070 606C     		ldr	r0, [r4, #68]
 3607 0072 E062     		str	r0, [r4, #44]
ARM GAS  /tmp/ccu6CPJi.s 			page 159


3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 3608              		.loc 1 3817 0
 3609 0074 C0F10703 		rsb	r3, r0, #7
 3610 0078 A361     		str	r3, [r4, #24]
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3611              		.loc 1 3818 0
 3612 007a 0124     		movs	r4, #1
 3613              	.LVL300:
 3614 007c 04FA00F1 		lsl	r1, r4, r0
 3615 0080 0B4A     		ldr	r2, .L321+8
 3616 0082 1368     		ldr	r3, [r2]
 3617 0084 0B43     		orrs	r3, r3, r1
 3618 0086 1360     		str	r3, [r2]
 3619 0088 00EB8000 		add	r0, r0, r0, lsl #2
 3620 008c 8000     		lsls	r0, r0, #2
 3621 008e 074B     		ldr	r3, .L321+4
 3622 0090 1844     		add	r0, r0, r3
 3623 0092 2946     		mov	r1, r5
 3624 0094 FFF7FEFF 		bl	vListInsertEnd
 3625              	.LVL301:
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3626              		.loc 1 3828 0
 3627 0098 2046     		mov	r0, r4
 3628 009a 38BD     		pop	{r3, r4, r5, pc}
 3629              	.LVL302:
 3630              	.L317:
 3631              	.LCFI35:
 3632              		.cfi_def_cfa_offset 0
 3633              		.cfi_restore 3
 3634              		.cfi_restore 4
 3635              		.cfi_restore 5
 3636              		.cfi_restore 14
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3637              		.loc 1 3775 0
 3638 009c 0020     		movs	r0, #0
 3639              	.LVL303:
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3640              		.loc 1 3846 0
 3641 009e 7047     		bx	lr
 3642              	.LVL304:
 3643              	.L318:
 3644              	.LCFI36:
 3645              		.cfi_def_cfa_offset 16
 3646              		.cfi_offset 3, -16
 3647              		.cfi_offset 4, -12
 3648              		.cfi_offset 5, -8
 3649              		.cfi_offset 14, -4
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3650              		.loc 1 3775 0
 3651 00a0 0020     		movs	r0, #0
 3652 00a2 38BD     		pop	{r3, r4, r5, pc}
 3653              	.LVL305:
 3654              	.L319:
 3655 00a4 0020     		movs	r0, #0
 3656              	.LVL306:
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3657              		.loc 1 3846 0
ARM GAS  /tmp/ccu6CPJi.s 			page 160


 3658 00a6 38BD     		pop	{r3, r4, r5, pc}
 3659              	.LVL307:
 3660              	.L322:
 3661              		.align	2
 3662              	.L321:
 3663 00a8 00000000 		.word	.LANCHOR10
 3664 00ac 00000000 		.word	.LANCHOR4
 3665 00b0 00000000 		.word	.LANCHOR13
 3666              		.cfi_endproc
 3667              	.LFE42:
 3669              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 3670              		.align	2
 3671              		.global	uxTaskResetEventItemValue
 3672              		.thumb
 3673              		.thumb_func
 3675              	uxTaskResetEventItemValue:
 3676              	.LFB43:
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
 3677              		.loc 1 4163 0
 3678              		.cfi_startproc
 3679              		@ args = 0, pretend = 0, frame = 0
 3680              		@ frame_needed = 0, uses_anonymous_args = 0
 3681              		@ link register save eliminated.
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3682              		.loc 1 4166 0
 3683 0000 044B     		ldr	r3, .L324
 3684 0002 1A68     		ldr	r2, [r3]
 3685 0004 9069     		ldr	r0, [r2, #24]
 3686              	.LVL308:
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3687              		.loc 1 4170 0
 3688 0006 1A68     		ldr	r2, [r3]
 3689 0008 1B68     		ldr	r3, [r3]
 3690 000a DB6A     		ldr	r3, [r3, #44]
 3691 000c C3F10703 		rsb	r3, r3, #7
 3692 0010 9361     		str	r3, [r2, #24]
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3693              		.loc 1 4173 0
 3694 0012 7047     		bx	lr
 3695              	.L325:
 3696              		.align	2
 3697              	.L324:
 3698 0014 00000000 		.word	.LANCHOR10
 3699              		.cfi_endproc
 3700              	.LFE43:
 3702              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 3703              		.align	2
 3704              		.global	pvTaskIncrementMutexHeldCount
 3705              		.thumb
 3706              		.thumb_func
 3708              	pvTaskIncrementMutexHeldCount:
 3709              	.LFB44:
4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 3710              		.loc 1 4179 0
 3711              		.cfi_startproc
 3712              		@ args = 0, pretend = 0, frame = 0
 3713              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccu6CPJi.s 			page 161


 3714              		@ link register save eliminated.
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3715              		.loc 1 4182 0
 3716 0000 054B     		ldr	r3, .L328
 3717 0002 1B68     		ldr	r3, [r3]
 3718 0004 23B1     		cbz	r3, .L327
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3719              		.loc 1 4184 0
 3720 0006 044B     		ldr	r3, .L328
 3721 0008 1A68     		ldr	r2, [r3]
 3722 000a 936C     		ldr	r3, [r2, #72]
 3723 000c 0133     		adds	r3, r3, #1
 3724 000e 9364     		str	r3, [r2, #72]
 3725              	.L327:
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3726              		.loc 1 4187 0
 3727 0010 014B     		ldr	r3, .L328
 3728 0012 1868     		ldr	r0, [r3]
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3729              		.loc 1 4188 0
 3730 0014 7047     		bx	lr
 3731              	.L329:
 3732 0016 00BF     		.align	2
 3733              	.L328:
 3734 0018 00000000 		.word	.LANCHOR10
 3735              		.cfi_endproc
 3736              	.LFE44:
 3738              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 3739              		.align	2
 3740              		.global	ulTaskNotifyTake
 3741              		.thumb
 3742              		.thumb_func
 3744              	ulTaskNotifyTake:
 3745              	.LFB45:
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
 3746              		.loc 1 4196 0
 3747              		.cfi_startproc
 3748              		@ args = 0, pretend = 0, frame = 0
 3749              		@ frame_needed = 0, uses_anonymous_args = 0
 3750              	.LVL309:
 3751 0000 38B5     		push	{r3, r4, r5, lr}
 3752              	.LCFI37:
 3753              		.cfi_def_cfa_offset 16
 3754              		.cfi_offset 3, -16
 3755              		.cfi_offset 4, -12
 3756              		.cfi_offset 5, -8
 3757              		.cfi_offset 14, -4
 3758 0002 0546     		mov	r5, r0
 3759 0004 0C46     		mov	r4, r1
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3760              		.loc 1 4199 0
 3761 0006 FFF7FEFF 		bl	vPortEnterCritical
 3762              	.LVL310:
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3763              		.loc 1 4202 0
 3764 000a 184B     		ldr	r3, .L335
 3765 000c 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccu6CPJi.s 			page 162


 3766 000e DB6C     		ldr	r3, [r3, #76]
 3767 0010 8BB9     		cbnz	r3, .L331
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3768              		.loc 1 4205 0
 3769 0012 164B     		ldr	r3, .L335
 3770 0014 1B68     		ldr	r3, [r3]
 3771 0016 0122     		movs	r2, #1
 3772 0018 83F85020 		strb	r2, [r3, #80]
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3773              		.loc 1 4207 0
 3774 001c 5CB1     		cbz	r4, .L331
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 3775              		.loc 1 4209 0
 3776 001e 2046     		mov	r0, r4
 3777 0020 1146     		mov	r1, r2
 3778 0022 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3779              	.LVL311:
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3780              		.loc 1 4216 0
 3781 0026 4FF08052 		mov	r2, #268435456
 3782 002a 114B     		ldr	r3, .L335+4
 3783 002c 1A60     		str	r2, [r3]
 3784              	@ 4216 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3785 002e BFF34F8F 		dsb
 3786              	@ 0 "" 2
 3787              	@ 4216 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3788 0032 BFF36F8F 		isb
 3789              	@ 0 "" 2
 3790              		.thumb
 3791              	.L331:
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3792              		.loc 1 4228 0
 3793 0036 FFF7FEFF 		bl	vPortExitCritical
 3794              	.LVL312:
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3795              		.loc 1 4230 0
 3796 003a FFF7FEFF 		bl	vPortEnterCritical
 3797              	.LVL313:
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3798              		.loc 1 4233 0
 3799 003e 0B4B     		ldr	r3, .L335
 3800 0040 1B68     		ldr	r3, [r3]
 3801 0042 DC6C     		ldr	r4, [r3, #76]
 3802              	.LVL314:
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3803              		.loc 1 4235 0
 3804 0044 4CB1     		cbz	r4, .L332
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3805              		.loc 1 4237 0
 3806 0046 25B1     		cbz	r5, .L333
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3807              		.loc 1 4239 0
 3808 0048 084B     		ldr	r3, .L335
 3809 004a 1B68     		ldr	r3, [r3]
 3810 004c 0022     		movs	r2, #0
 3811 004e DA64     		str	r2, [r3, #76]
 3812 0050 03E0     		b	.L332
ARM GAS  /tmp/ccu6CPJi.s 			page 163


 3813              	.L333:
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3814              		.loc 1 4243 0
 3815 0052 064B     		ldr	r3, .L335
 3816 0054 1B68     		ldr	r3, [r3]
 3817 0056 621E     		subs	r2, r4, #1
 3818 0058 DA64     		str	r2, [r3, #76]
 3819              	.L332:
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3820              		.loc 1 4251 0
 3821 005a 044B     		ldr	r3, .L335
 3822 005c 1B68     		ldr	r3, [r3]
 3823 005e 0022     		movs	r2, #0
 3824 0060 83F85020 		strb	r2, [r3, #80]
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3825              		.loc 1 4253 0
 3826 0064 FFF7FEFF 		bl	vPortExitCritical
 3827              	.LVL315:
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3828              		.loc 1 4256 0
 3829 0068 2046     		mov	r0, r4
 3830 006a 38BD     		pop	{r3, r4, r5, pc}
 3831              	.LVL316:
 3832              	.L336:
 3833              		.align	2
 3834              	.L335:
 3835 006c 00000000 		.word	.LANCHOR10
 3836 0070 04ED00E0 		.word	-536810236
 3837              		.cfi_endproc
 3838              	.LFE45:
 3840              		.section	.text.xTaskNotifyWait,"ax",%progbits
 3841              		.align	2
 3842              		.global	xTaskNotifyWait
 3843              		.thumb
 3844              		.thumb_func
 3846              	xTaskNotifyWait:
 3847              	.LFB46:
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 3848              		.loc 1 4264 0
 3849              		.cfi_startproc
 3850              		@ args = 0, pretend = 0, frame = 0
 3851              		@ frame_needed = 0, uses_anonymous_args = 0
 3852              	.LVL317:
 3853 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3854              	.LCFI38:
 3855              		.cfi_def_cfa_offset 24
 3856              		.cfi_offset 3, -24
 3857              		.cfi_offset 4, -20
 3858              		.cfi_offset 5, -16
 3859              		.cfi_offset 6, -12
 3860              		.cfi_offset 7, -8
 3861              		.cfi_offset 14, -4
 3862 0002 0746     		mov	r7, r0
 3863 0004 0C46     		mov	r4, r1
 3864 0006 1546     		mov	r5, r2
 3865 0008 1E46     		mov	r6, r3
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  /tmp/ccu6CPJi.s 			page 164


 3866              		.loc 1 4267 0
 3867 000a FFF7FEFF 		bl	vPortEnterCritical
 3868              	.LVL318:
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3869              		.loc 1 4270 0
 3870 000e 204B     		ldr	r3, .L343
 3871 0010 1B68     		ldr	r3, [r3]
 3872 0012 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 3873 0016 DBB2     		uxtb	r3, r3
 3874 0018 022B     		cmp	r3, #2
 3875 001a 16D0     		beq	.L338
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3876              		.loc 1 4275 0
 3877 001c 1C4B     		ldr	r3, .L343
 3878 001e 1A68     		ldr	r2, [r3]
 3879 0020 D06C     		ldr	r0, [r2, #76]
 3880 0022 20EA0700 		bic	r0, r0, r7
 3881 0026 D064     		str	r0, [r2, #76]
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3882              		.loc 1 4278 0
 3883 0028 1B68     		ldr	r3, [r3]
 3884 002a 0122     		movs	r2, #1
 3885 002c 83F85020 		strb	r2, [r3, #80]
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3886              		.loc 1 4280 0
 3887 0030 5EB1     		cbz	r6, .L338
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 3888              		.loc 1 4282 0
 3889 0032 3046     		mov	r0, r6
 3890 0034 1146     		mov	r1, r2
 3891 0036 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3892              	.LVL319:
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3893              		.loc 1 4289 0
 3894 003a 4FF08052 		mov	r2, #268435456
 3895 003e 154B     		ldr	r3, .L343+4
 3896 0040 1A60     		str	r2, [r3]
 3897              	@ 4289 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3898 0042 BFF34F8F 		dsb
 3899              	@ 0 "" 2
 3900              	@ 4289 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3901 0046 BFF36F8F 		isb
 3902              	@ 0 "" 2
 3903              		.thumb
 3904              	.L338:
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3905              		.loc 1 4301 0
 3906 004a FFF7FEFF 		bl	vPortExitCritical
 3907              	.LVL320:
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3908              		.loc 1 4303 0
 3909 004e FFF7FEFF 		bl	vPortEnterCritical
 3910              	.LVL321:
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3911              		.loc 1 4307 0
 3912 0052 1DB1     		cbz	r5, .L339
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccu6CPJi.s 			page 165


 3913              		.loc 1 4311 0
 3914 0054 0E4B     		ldr	r3, .L343
 3915 0056 1B68     		ldr	r3, [r3]
 3916 0058 DB6C     		ldr	r3, [r3, #76]
 3917 005a 2B60     		str	r3, [r5]
 3918              	.L339:
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3919              		.loc 1 4318 0
 3920 005c 0C4B     		ldr	r3, .L343
 3921 005e 1B68     		ldr	r3, [r3]
 3922 0060 93F85030 		ldrb	r3, [r3, #80]	@ zero_extendqisi2
 3923 0064 DBB2     		uxtb	r3, r3
 3924 0066 012B     		cmp	r3, #1
 3925 0068 07D0     		beq	.L341
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 3926              		.loc 1 4327 0
 3927 006a 094B     		ldr	r3, .L343
 3928 006c 1B68     		ldr	r3, [r3]
 3929 006e D96C     		ldr	r1, [r3, #76]
 3930 0070 21EA0401 		bic	r1, r1, r4
 3931 0074 D964     		str	r1, [r3, #76]
 3932              	.LVL322:
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3933              		.loc 1 4328 0
 3934 0076 0124     		movs	r4, #1
 3935              	.LVL323:
 3936 0078 00E0     		b	.L340
 3937              	.LVL324:
 3938              	.L341:
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3939              		.loc 1 4321 0
 3940 007a 0024     		movs	r4, #0
 3941              	.LVL325:
 3942              	.L340:
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3943              		.loc 1 4331 0
 3944 007c 044B     		ldr	r3, .L343
 3945 007e 1B68     		ldr	r3, [r3]
 3946 0080 0022     		movs	r2, #0
 3947 0082 83F85020 		strb	r2, [r3, #80]
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3948              		.loc 1 4333 0
 3949 0086 FFF7FEFF 		bl	vPortExitCritical
 3950              	.LVL326:
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3951              		.loc 1 4336 0
 3952 008a 2046     		mov	r0, r4
 3953 008c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3954              	.LVL327:
 3955              	.L344:
 3956 008e 00BF     		.align	2
 3957              	.L343:
 3958 0090 00000000 		.word	.LANCHOR10
 3959 0094 04ED00E0 		.word	-536810236
 3960              		.cfi_endproc
 3961              	.LFE46:
 3963              		.section	.text.xTaskGenericNotify,"ax",%progbits
ARM GAS  /tmp/ccu6CPJi.s 			page 166


 3964              		.align	2
 3965              		.global	xTaskGenericNotify
 3966              		.thumb
 3967              		.thumb_func
 3969              	xTaskGenericNotify:
 3970              	.LFB47:
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 3971              		.loc 1 4344 0
 3972              		.cfi_startproc
 3973              		@ args = 0, pretend = 0, frame = 0
 3974              		@ frame_needed = 0, uses_anonymous_args = 0
 3975              	.LVL328:
 3976 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3977              	.LCFI39:
 3978              		.cfi_def_cfa_offset 24
 3979              		.cfi_offset 3, -24
 3980              		.cfi_offset 4, -20
 3981              		.cfi_offset 5, -16
 3982              		.cfi_offset 6, -12
 3983              		.cfi_offset 7, -8
 3984              		.cfi_offset 14, -4
 3985              	.LVL329:
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 3986              		.loc 1 4349 0
 3987 0002 40B9     		cbnz	r0, .L346
 3988              	.LBB162:
 3989              	.LBB163:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3990              		.loc 2 237 0
 3991              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3992 0004 4FF05003 			mov r3, #80												
 3993 0008 83F31188 		msr basepri, r3											
 3994 000c BFF36F8F 		isb														
 3995 0010 BFF34F8F 		dsb														
 3996              	
 3997              	@ 0 "" 2
 3998              	.LVL330:
 3999              		.thumb
 4000              	.L347:
 4001              	.LBE163:
 4002              	.LBE162:
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 4003              		.loc 1 4349 0 discriminator 1
 4004 0014 FEE7     		b	.L347
 4005              	.LVL331:
 4006              	.L346:
 4007 0016 0446     		mov	r4, r0
 4008 0018 1F46     		mov	r7, r3
 4009 001a 1546     		mov	r5, r2
 4010 001c 0E46     		mov	r6, r1
 4011              	.LVL332:
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4012              		.loc 1 4352 0
 4013 001e FFF7FEFF 		bl	vPortEnterCritical
 4014              	.LVL333:
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4015              		.loc 1 4354 0
ARM GAS  /tmp/ccu6CPJi.s 			page 167


 4016 0022 0FB1     		cbz	r7, .L348
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4017              		.loc 1 4356 0
 4018 0024 E36C     		ldr	r3, [r4, #76]
 4019 0026 3B60     		str	r3, [r7]
 4020              	.L348:
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4021              		.loc 1 4359 0
 4022 0028 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 4023 002c DBB2     		uxtb	r3, r3
 4024              	.LVL334:
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4025              		.loc 1 4361 0
 4026 002e 0222     		movs	r2, #2
 4027 0030 84F85020 		strb	r2, [r4, #80]
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4028              		.loc 1 4363 0
 4029 0034 6A1E     		subs	r2, r5, #1
 4030 0036 032A     		cmp	r2, #3
 4031 0038 15D8     		bhi	.L358
 4032 003a DFE802F0 		tbb	[pc, r2]
 4033              	.L351:
 4034 003e 02       		.byte	(.L350-.L351)/2
 4035 003f 07       		.byte	(.L352-.L351)/2
 4036 0040 0C       		.byte	(.L353-.L351)/2
 4037 0041 0F       		.byte	(.L354-.L351)/2
 4038              		.p2align 1
 4039              	.L350:
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4040              		.loc 1 4366 0
 4041 0042 E26C     		ldr	r2, [r4, #76]
 4042 0044 1643     		orrs	r6, r6, r2
 4043              	.LVL335:
 4044 0046 E664     		str	r6, [r4, #76]
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4045              		.loc 1 4346 0
 4046 0048 0125     		movs	r5, #1
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4047              		.loc 1 4367 0
 4048 004a 0FE0     		b	.L349
 4049              	.LVL336:
 4050              	.L352:
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4051              		.loc 1 4370 0
 4052 004c E26C     		ldr	r2, [r4, #76]
 4053 004e 0132     		adds	r2, r2, #1
 4054 0050 E264     		str	r2, [r4, #76]
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4055              		.loc 1 4346 0
 4056 0052 0125     		movs	r5, #1
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4057              		.loc 1 4371 0
 4058 0054 0AE0     		b	.L349
 4059              	.L353:
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4060              		.loc 1 4374 0
 4061 0056 E664     		str	r6, [r4, #76]
ARM GAS  /tmp/ccu6CPJi.s 			page 168


4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4062              		.loc 1 4346 0
 4063 0058 0125     		movs	r5, #1
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4064              		.loc 1 4375 0
 4065 005a 07E0     		b	.L349
 4066              	.L354:
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4067              		.loc 1 4378 0
 4068 005c 022B     		cmp	r3, #2
 4069 005e 04D0     		beq	.L359
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4070              		.loc 1 4380 0
 4071 0060 E664     		str	r6, [r4, #76]
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 4072              		.loc 1 4346 0
 4073 0062 0125     		movs	r5, #1
 4074 0064 02E0     		b	.L349
 4075              	.L358:
 4076 0066 0125     		movs	r5, #1
 4077 0068 00E0     		b	.L349
 4078              	.L359:
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4079              		.loc 1 4385 0
 4080 006a 0025     		movs	r5, #0
 4081              	.LVL337:
 4082              	.L349:
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4083              		.loc 1 4399 0
 4084 006c 012B     		cmp	r3, #1
 4085 006e 2CD1     		bne	.L355
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 4086              		.loc 1 4401 0
 4087 0070 261D     		adds	r6, r4, #4
 4088 0072 3046     		mov	r0, r6
 4089 0074 FFF7FEFF 		bl	uxListRemove
 4090              	.LVL338:
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4091              		.loc 1 4402 0
 4092 0078 E36A     		ldr	r3, [r4, #44]
 4093 007a 0122     		movs	r2, #1
 4094 007c 02FA03F1 		lsl	r1, r2, r3
 4095 0080 1448     		ldr	r0, .L361
 4096 0082 0268     		ldr	r2, [r0]
 4097 0084 0A43     		orrs	r2, r2, r1
 4098 0086 0260     		str	r2, [r0]
 4099 0088 03EB8303 		add	r3, r3, r3, lsl #2
 4100 008c 9B00     		lsls	r3, r3, #2
 4101 008e 1248     		ldr	r0, .L361+4
 4102 0090 1844     		add	r0, r0, r3
 4103 0092 3146     		mov	r1, r6
 4104 0094 FFF7FEFF 		bl	vListInsertEnd
 4105              	.LVL339:
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4106              		.loc 1 4405 0
 4107 0098 A36A     		ldr	r3, [r4, #40]
 4108 009a 43B1     		cbz	r3, .L356
ARM GAS  /tmp/ccu6CPJi.s 			page 169


 4109              	.LBB164:
 4110              	.LBB165:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4111              		.loc 2 237 0
 4112              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4113 009c 4FF05003 			mov r3, #80												
 4114 00a0 83F31188 		msr basepri, r3											
 4115 00a4 BFF36F8F 		isb														
 4116 00a8 BFF34F8F 		dsb														
 4117              	
 4118              	@ 0 "" 2
 4119              	.LVL340:
 4120              		.thumb
 4121              	.L357:
 4122              	.LBE165:
 4123              	.LBE164:
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4124              		.loc 1 4405 0 discriminator 2
 4125 00ac FEE7     		b	.L357
 4126              	.L356:
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4127              		.loc 1 4423 0
 4128 00ae E26A     		ldr	r2, [r4, #44]
 4129 00b0 0A4B     		ldr	r3, .L361+8
 4130 00b2 1B68     		ldr	r3, [r3]
 4131 00b4 DB6A     		ldr	r3, [r3, #44]
 4132 00b6 9A42     		cmp	r2, r3
 4133 00b8 07D9     		bls	.L355
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4134              		.loc 1 4427 0
 4135 00ba 4FF08052 		mov	r2, #268435456
 4136 00be 084B     		ldr	r3, .L361+12
 4137 00c0 1A60     		str	r2, [r3]
 4138              	@ 4427 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4139 00c2 BFF34F8F 		dsb
 4140              	@ 0 "" 2
 4141              	@ 4427 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 4142 00c6 BFF36F8F 		isb
 4143              	@ 0 "" 2
 4144              		.thumb
 4145              	.L355:
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4146              		.loc 1 4439 0
 4147 00ca FFF7FEFF 		bl	vPortExitCritical
 4148              	.LVL341:
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4149              		.loc 1 4442 0
 4150 00ce 2846     		mov	r0, r5
 4151 00d0 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4152              	.LVL342:
 4153              	.L362:
 4154 00d2 00BF     		.align	2
 4155              	.L361:
 4156 00d4 00000000 		.word	.LANCHOR13
 4157 00d8 00000000 		.word	.LANCHOR4
 4158 00dc 00000000 		.word	.LANCHOR10
 4159 00e0 04ED00E0 		.word	-536810236
ARM GAS  /tmp/ccu6CPJi.s 			page 170


 4160              		.cfi_endproc
 4161              	.LFE47:
 4163              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 4164              		.align	2
 4165              		.global	xTaskGenericNotifyFromISR
 4166              		.thumb
 4167              		.thumb_func
 4169              	xTaskGenericNotifyFromISR:
 4170              	.LFB48:
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 4171              		.loc 1 4450 0
 4172              		.cfi_startproc
 4173              		@ args = 4, pretend = 0, frame = 0
 4174              		@ frame_needed = 0, uses_anonymous_args = 0
 4175              	.LVL343:
 4176 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 4177              	.LCFI40:
 4178              		.cfi_def_cfa_offset 32
 4179              		.cfi_offset 3, -32
 4180              		.cfi_offset 4, -28
 4181              		.cfi_offset 5, -24
 4182              		.cfi_offset 6, -20
 4183              		.cfi_offset 7, -16
 4184              		.cfi_offset 8, -12
 4185              		.cfi_offset 9, -8
 4186              		.cfi_offset 14, -4
 4187 0004 089E     		ldr	r6, [sp, #32]
 4188              	.LVL344:
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4189              		.loc 1 4456 0
 4190 0006 40B9     		cbnz	r0, .L364
 4191              	.LBB166:
 4192              	.LBB167:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4193              		.loc 2 237 0
 4194              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4195 0008 4FF05003 			mov r3, #80												
 4196 000c 83F31188 		msr basepri, r3											
 4197 0010 BFF36F8F 		isb														
 4198 0014 BFF34F8F 		dsb														
 4199              	
 4200              	@ 0 "" 2
 4201              	.LVL345:
 4202              		.thumb
 4203              	.L365:
 4204              	.LBE167:
 4205              	.LBE166:
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4206              		.loc 1 4456 0 discriminator 1
 4207 0018 FEE7     		b	.L365
 4208              	.LVL346:
 4209              	.L364:
 4210 001a 0446     		mov	r4, r0
 4211 001c 9946     		mov	r9, r3
 4212 001e 1546     		mov	r5, r2
 4213 0020 8846     		mov	r8, r1
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  /tmp/ccu6CPJi.s 			page 171


 4214              		.loc 1 4474 0
 4215 0022 FFF7FEFF 		bl	vPortValidateInterruptPriority
 4216              	.LVL347:
 4217              	.LBB168:
 4218              	.LBB169:
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4219              		.loc 2 253 0
 4220              	@ 253 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4221 0026 EFF31187 			mrs r7, basepri											
 4222 002a 4FF05003 		mov r3, #80												
 4223 002e 83F31188 		msr basepri, r3											
 4224 0032 BFF36F8F 		isb														
 4225 0036 BFF34F8F 		dsb														
 4226              	
 4227              	@ 0 "" 2
 4228              	.LVL348:
 4229              		.thumb
 4230              	.LBE169:
 4231              	.LBE168:
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4232              		.loc 1 4480 0
 4233 003a B9F1000F 		cmp	r9, #0
 4234 003e 02D0     		beq	.L366
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4235              		.loc 1 4482 0
 4236 0040 E36C     		ldr	r3, [r4, #76]
 4237 0042 C9F80030 		str	r3, [r9]
 4238              	.L366:
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4239              		.loc 1 4485 0
 4240 0046 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 4241 004a DBB2     		uxtb	r3, r3
 4242              	.LVL349:
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4243              		.loc 1 4486 0
 4244 004c 0222     		movs	r2, #2
 4245 004e 84F85020 		strb	r2, [r4, #80]
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4246              		.loc 1 4488 0
 4247 0052 6A1E     		subs	r2, r5, #1
 4248 0054 032A     		cmp	r2, #3
 4249 0056 18D8     		bhi	.L379
 4250 0058 DFE802F0 		tbb	[pc, r2]
 4251              	.L369:
 4252 005c 02       		.byte	(.L368-.L369)/2
 4253 005d 08       		.byte	(.L370-.L369)/2
 4254 005e 0D       		.byte	(.L371-.L369)/2
 4255 005f 11       		.byte	(.L372-.L369)/2
 4256              		.p2align 1
 4257              	.L368:
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4258              		.loc 1 4491 0
 4259 0060 E26C     		ldr	r2, [r4, #76]
 4260 0062 42EA0802 		orr	r2, r2, r8
 4261 0066 E264     		str	r2, [r4, #76]
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4262              		.loc 1 4453 0
ARM GAS  /tmp/ccu6CPJi.s 			page 172


 4263 0068 0125     		movs	r5, #1
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4264              		.loc 1 4492 0
 4265 006a 11E0     		b	.L367
 4266              	.L370:
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4267              		.loc 1 4495 0
 4268 006c E26C     		ldr	r2, [r4, #76]
 4269 006e 0132     		adds	r2, r2, #1
 4270 0070 E264     		str	r2, [r4, #76]
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4271              		.loc 1 4453 0
 4272 0072 0125     		movs	r5, #1
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4273              		.loc 1 4496 0
 4274 0074 0CE0     		b	.L367
 4275              	.L371:
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 4276              		.loc 1 4499 0
 4277 0076 C4F84C80 		str	r8, [r4, #76]
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4278              		.loc 1 4453 0
 4279 007a 0125     		movs	r5, #1
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4280              		.loc 1 4500 0
 4281 007c 08E0     		b	.L367
 4282              	.L372:
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4283              		.loc 1 4503 0
 4284 007e 022B     		cmp	r3, #2
 4285 0080 05D0     		beq	.L380
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4286              		.loc 1 4505 0
 4287 0082 C4F84C80 		str	r8, [r4, #76]
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 4288              		.loc 1 4453 0
 4289 0086 0125     		movs	r5, #1
 4290 0088 02E0     		b	.L367
 4291              	.L379:
 4292 008a 0125     		movs	r5, #1
 4293 008c 00E0     		b	.L367
 4294              	.L380:
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4295              		.loc 1 4510 0
 4296 008e 0025     		movs	r5, #0
 4297              	.L367:
 4298              	.LVL350:
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4299              		.loc 1 4524 0
 4300 0090 012B     		cmp	r3, #1
 4301 0092 35D1     		bne	.L373
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4302              		.loc 1 4527 0
 4303 0094 A36A     		ldr	r3, [r4, #40]
 4304              	.LVL351:
 4305 0096 43B1     		cbz	r3, .L374
 4306              	.LBB170:
ARM GAS  /tmp/ccu6CPJi.s 			page 173


 4307              	.LBB171:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4308              		.loc 2 237 0
 4309              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4310 0098 4FF05003 			mov r3, #80												
 4311 009c 83F31188 		msr basepri, r3											
 4312 00a0 BFF36F8F 		isb														
 4313 00a4 BFF34F8F 		dsb														
 4314              	
 4315              	@ 0 "" 2
 4316              	.LVL352:
 4317              		.thumb
 4318              	.L375:
 4319              	.LBE171:
 4320              	.LBE170:
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4321              		.loc 1 4527 0 discriminator 2
 4322 00a8 FEE7     		b	.L375
 4323              	.L374:
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4324              		.loc 1 4529 0
 4325 00aa 184B     		ldr	r3, .L382
 4326 00ac 1B68     		ldr	r3, [r3]
 4327 00ae ABB9     		cbnz	r3, .L376
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4328              		.loc 1 4531 0
 4329 00b0 04F10408 		add	r8, r4, #4
 4330              	.LVL353:
 4331 00b4 4046     		mov	r0, r8
 4332 00b6 FFF7FEFF 		bl	uxListRemove
 4333              	.LVL354:
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4334              		.loc 1 4532 0
 4335 00ba E36A     		ldr	r3, [r4, #44]
 4336 00bc 0122     		movs	r2, #1
 4337 00be 02FA03F1 		lsl	r1, r2, r3
 4338 00c2 1348     		ldr	r0, .L382+4
 4339 00c4 0268     		ldr	r2, [r0]
 4340 00c6 0A43     		orrs	r2, r2, r1
 4341 00c8 0260     		str	r2, [r0]
 4342 00ca 03EB8303 		add	r3, r3, r3, lsl #2
 4343 00ce 9B00     		lsls	r3, r3, #2
 4344 00d0 1048     		ldr	r0, .L382+8
 4345 00d2 1844     		add	r0, r0, r3
 4346 00d4 4146     		mov	r1, r8
 4347 00d6 FFF7FEFF 		bl	vListInsertEnd
 4348              	.LVL355:
 4349 00da 04E0     		b	.L377
 4350              	.LVL356:
 4351              	.L376:
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4352              		.loc 1 4538 0
 4353 00dc 0E48     		ldr	r0, .L382+12
 4354 00de 04F11801 		add	r1, r4, #24
 4355 00e2 FFF7FEFF 		bl	vListInsertEnd
 4356              	.LVL357:
 4357              	.L377:
ARM GAS  /tmp/ccu6CPJi.s 			page 174


4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4358              		.loc 1 4541 0
 4359 00e6 E26A     		ldr	r2, [r4, #44]
 4360 00e8 0C4B     		ldr	r3, .L382+16
 4361 00ea 1B68     		ldr	r3, [r3]
 4362 00ec DB6A     		ldr	r3, [r3, #44]
 4363 00ee 9A42     		cmp	r2, r3
 4364 00f0 06D9     		bls	.L373
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4365              		.loc 1 4545 0
 4366 00f2 16B1     		cbz	r6, .L378
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4367              		.loc 1 4547 0
 4368 00f4 0123     		movs	r3, #1
 4369 00f6 3360     		str	r3, [r6]
 4370 00f8 02E0     		b	.L373
 4371              	.L378:
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4372              		.loc 1 4554 0
 4373 00fa 0122     		movs	r2, #1
 4374 00fc 084B     		ldr	r3, .L382+20
 4375 00fe 1A60     		str	r2, [r3]
 4376              	.L373:
 4377              	.LVL358:
 4378              	.LBB172:
 4379              	.LBB173:
 4380              		.loc 2 271 0
 4381              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4382 0100 87F31188 			msr basepri, r7	
 4383              	@ 0 "" 2
 4384              		.thumb
 4385              	.LBE173:
 4386              	.LBE172:
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4387              		.loc 1 4566 0
 4388 0104 2846     		mov	r0, r5
 4389 0106 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 4390              	.LVL359:
 4391              	.L383:
 4392 010a 00BF     		.align	2
 4393              	.L382:
 4394 010c 00000000 		.word	.LANCHOR16
 4395 0110 00000000 		.word	.LANCHOR13
 4396 0114 00000000 		.word	.LANCHOR4
 4397 0118 00000000 		.word	.LANCHOR1
 4398 011c 00000000 		.word	.LANCHOR10
 4399 0120 00000000 		.word	.LANCHOR20
 4400              		.cfi_endproc
 4401              	.LFE48:
 4403              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 4404              		.align	2
 4405              		.global	vTaskNotifyGiveFromISR
 4406              		.thumb
 4407              		.thumb_func
 4409              	vTaskNotifyGiveFromISR:
 4410              	.LFB49:
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
ARM GAS  /tmp/ccu6CPJi.s 			page 175


 4411              		.loc 1 4574 0
 4412              		.cfi_startproc
 4413              		@ args = 0, pretend = 0, frame = 0
 4414              		@ frame_needed = 0, uses_anonymous_args = 0
 4415              	.LVL360:
 4416 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4417              	.LCFI41:
 4418              		.cfi_def_cfa_offset 24
 4419              		.cfi_offset 3, -24
 4420              		.cfi_offset 4, -20
 4421              		.cfi_offset 5, -16
 4422              		.cfi_offset 6, -12
 4423              		.cfi_offset 7, -8
 4424              		.cfi_offset 14, -4
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4425              		.loc 1 4579 0
 4426 0002 40B9     		cbnz	r0, .L385
 4427              	.LBB174:
 4428              	.LBB175:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4429              		.loc 2 237 0
 4430              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4431 0004 4FF05003 			mov r3, #80												
 4432 0008 83F31188 		msr basepri, r3											
 4433 000c BFF36F8F 		isb														
 4434 0010 BFF34F8F 		dsb														
 4435              	
 4436              	@ 0 "" 2
 4437              	.LVL361:
 4438              		.thumb
 4439              	.L386:
 4440              	.LBE175:
 4441              	.LBE174:
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4442              		.loc 1 4579 0 discriminator 1
 4443 0014 FEE7     		b	.L386
 4444              	.L385:
 4445 0016 0446     		mov	r4, r0
 4446 0018 0D46     		mov	r5, r1
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4447              		.loc 1 4597 0
 4448 001a FFF7FEFF 		bl	vPortValidateInterruptPriority
 4449              	.LVL362:
 4450              	.LBB176:
 4451              	.LBB177:
 253:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4452              		.loc 2 253 0
 4453              	@ 253 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4454 001e EFF31187 			mrs r7, basepri											
 4455 0022 4FF05003 		mov r3, #80												
 4456 0026 83F31188 		msr basepri, r3											
 4457 002a BFF36F8F 		isb														
 4458 002e BFF34F8F 		dsb														
 4459              	
 4460              	@ 0 "" 2
 4461              	.LVL363:
 4462              		.thumb
ARM GAS  /tmp/ccu6CPJi.s 			page 176


 4463              	.LBE177:
 4464              	.LBE176:
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 4465              		.loc 1 4603 0
 4466 0032 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 4467 0036 DBB2     		uxtb	r3, r3
 4468              	.LVL364:
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4469              		.loc 1 4604 0
 4470 0038 0222     		movs	r2, #2
 4471 003a 84F85020 		strb	r2, [r4, #80]
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4472              		.loc 1 4608 0
 4473 003e E26C     		ldr	r2, [r4, #76]
 4474 0040 0132     		adds	r2, r2, #1
 4475 0042 E264     		str	r2, [r4, #76]
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4476              		.loc 1 4614 0
 4477 0044 012B     		cmp	r3, #1
 4478 0046 34D1     		bne	.L387
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4479              		.loc 1 4617 0
 4480 0048 A36A     		ldr	r3, [r4, #40]
 4481              	.LVL365:
 4482 004a 43B1     		cbz	r3, .L388
 4483              	.LBB178:
 4484              	.LBB179:
 237:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4485              		.loc 2 237 0
 4486              	@ 237 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4487 004c 4FF05003 			mov r3, #80												
 4488 0050 83F31188 		msr basepri, r3											
 4489 0054 BFF36F8F 		isb														
 4490 0058 BFF34F8F 		dsb														
 4491              	
 4492              	@ 0 "" 2
 4493              	.LVL366:
 4494              		.thumb
 4495              	.L389:
 4496              	.LBE179:
 4497              	.LBE178:
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4498              		.loc 1 4617 0 discriminator 2
 4499 005c FEE7     		b	.L389
 4500              	.L388:
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4501              		.loc 1 4619 0
 4502 005e 164B     		ldr	r3, .L394
 4503 0060 1B68     		ldr	r3, [r3]
 4504 0062 A3B9     		cbnz	r3, .L390
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4505              		.loc 1 4621 0
 4506 0064 261D     		adds	r6, r4, #4
 4507 0066 3046     		mov	r0, r6
 4508 0068 FFF7FEFF 		bl	uxListRemove
 4509              	.LVL367:
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  /tmp/ccu6CPJi.s 			page 177


 4510              		.loc 1 4622 0
 4511 006c E36A     		ldr	r3, [r4, #44]
 4512 006e 0122     		movs	r2, #1
 4513 0070 02FA03F1 		lsl	r1, r2, r3
 4514 0074 1148     		ldr	r0, .L394+4
 4515 0076 0268     		ldr	r2, [r0]
 4516 0078 0A43     		orrs	r2, r2, r1
 4517 007a 0260     		str	r2, [r0]
 4518 007c 03EB8303 		add	r3, r3, r3, lsl #2
 4519 0080 9B00     		lsls	r3, r3, #2
 4520 0082 0F48     		ldr	r0, .L394+8
 4521 0084 1844     		add	r0, r0, r3
 4522 0086 3146     		mov	r1, r6
 4523 0088 FFF7FEFF 		bl	vListInsertEnd
 4524              	.LVL368:
 4525 008c 04E0     		b	.L391
 4526              	.L390:
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4527              		.loc 1 4628 0
 4528 008e 0D48     		ldr	r0, .L394+12
 4529 0090 04F11801 		add	r1, r4, #24
 4530 0094 FFF7FEFF 		bl	vListInsertEnd
 4531              	.LVL369:
 4532              	.L391:
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4533              		.loc 1 4631 0
 4534 0098 E26A     		ldr	r2, [r4, #44]
 4535 009a 0B4B     		ldr	r3, .L394+16
 4536 009c 1B68     		ldr	r3, [r3]
 4537 009e DB6A     		ldr	r3, [r3, #44]
 4538 00a0 9A42     		cmp	r2, r3
 4539 00a2 06D9     		bls	.L387
4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4540              		.loc 1 4635 0
 4541 00a4 15B1     		cbz	r5, .L392
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4542              		.loc 1 4637 0
 4543 00a6 0123     		movs	r3, #1
 4544 00a8 2B60     		str	r3, [r5]
 4545 00aa 02E0     		b	.L387
 4546              	.L392:
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4547              		.loc 1 4644 0
 4548 00ac 0122     		movs	r2, #1
 4549 00ae 074B     		ldr	r3, .L394+20
 4550 00b0 1A60     		str	r2, [r3]
 4551              	.L387:
 4552              	.LVL370:
 4553              	.LBB180:
 4554              	.LBB181:
 4555              		.loc 2 271 0
 4556              	@ 271 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4557 00b2 87F31188 			msr basepri, r7	
 4558              	@ 0 "" 2
 4559              		.thumb
 4560 00b6 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4561              	.LVL371:
ARM GAS  /tmp/ccu6CPJi.s 			page 178


 4562              	.L395:
 4563              		.align	2
 4564              	.L394:
 4565 00b8 00000000 		.word	.LANCHOR16
 4566 00bc 00000000 		.word	.LANCHOR13
 4567 00c0 00000000 		.word	.LANCHOR4
 4568 00c4 00000000 		.word	.LANCHOR1
 4569 00c8 00000000 		.word	.LANCHOR10
 4570 00cc 00000000 		.word	.LANCHOR20
 4571              	.LBE181:
 4572              	.LBE180:
 4573              		.cfi_endproc
 4574              	.LFE49:
 4576              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 4577              		.align	2
 4578              		.global	xTaskNotifyStateClear
 4579              		.thumb
 4580              		.thumb_func
 4582              	xTaskNotifyStateClear:
 4583              	.LFB50:
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 4584              		.loc 1 4663 0
 4585              		.cfi_startproc
 4586              		@ args = 0, pretend = 0, frame = 0
 4587              		@ frame_needed = 0, uses_anonymous_args = 0
 4588              	.LVL372:
 4589 0000 10B5     		push	{r4, lr}
 4590              	.LCFI42:
 4591              		.cfi_def_cfa_offset 8
 4592              		.cfi_offset 4, -8
 4593              		.cfi_offset 14, -4
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4594              		.loc 1 4669 0
 4595 0002 0446     		mov	r4, r0
 4596 0004 08B9     		cbnz	r0, .L397
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4597              		.loc 1 4669 0 is_stmt 0 discriminator 1
 4598 0006 094B     		ldr	r3, .L401
 4599 0008 1C68     		ldr	r4, [r3]
 4600              	.LVL373:
 4601              	.L397:
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4602              		.loc 1 4671 0 is_stmt 1 discriminator 4
 4603 000a FFF7FEFF 		bl	vPortEnterCritical
 4604              	.LVL374:
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4605              		.loc 1 4673 0 discriminator 4
 4606 000e 94F85030 		ldrb	r3, [r4, #80]	@ zero_extendqisi2
 4607 0012 DBB2     		uxtb	r3, r3
 4608 0014 022B     		cmp	r3, #2
 4609 0016 04D1     		bne	.L399
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 4610              		.loc 1 4675 0
 4611 0018 0023     		movs	r3, #0
 4612 001a 84F85030 		strb	r3, [r4, #80]
 4613              	.LVL375:
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  /tmp/ccu6CPJi.s 			page 179


 4614              		.loc 1 4676 0
 4615 001e 0124     		movs	r4, #1
 4616              	.LVL376:
 4617 0020 00E0     		b	.L398
 4618              	.LVL377:
 4619              	.L399:
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4620              		.loc 1 4680 0
 4621 0022 0024     		movs	r4, #0
 4622              	.LVL378:
 4623              	.L398:
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4624              		.loc 1 4683 0
 4625 0024 FFF7FEFF 		bl	vPortExitCritical
 4626              	.LVL379:
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4627              		.loc 1 4686 0
 4628 0028 2046     		mov	r0, r4
 4629 002a 10BD     		pop	{r4, pc}
 4630              	.LVL380:
 4631              	.L402:
 4632              		.align	2
 4633              	.L401:
 4634 002c 00000000 		.word	.LANCHOR10
 4635              		.cfi_endproc
 4636              	.LFE50:
 4638              		.global	pxCurrentTCB
 4639              		.section	.bss.xNumOfOverflows,"aw",%nobits
 4640              		.align	2
 4641              		.set	.LANCHOR18,. + 0
 4644              	xNumOfOverflows:
 4645 0000 00000000 		.space	4
 4646              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 4647              		.align	2
 4648              		.set	.LANCHOR2,. + 0
 4651              	pxDelayedTaskList:
 4652 0000 00000000 		.space	4
 4653              		.section	.bss.xSchedulerRunning,"aw",%nobits
 4654              		.align	2
 4655              		.set	.LANCHOR11,. + 0
 4658              	xSchedulerRunning:
 4659 0000 00000000 		.space	4
 4660              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 4661              		.align	2
 4662              		.set	.LANCHOR7,. + 0
 4665              	xTasksWaitingTermination:
 4666 0000 00000000 		.space	20
 4666      00000000 
 4666      00000000 
 4666      00000000 
 4666      00000000 
 4667              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 4668              		.align	2
 4669              		.set	.LANCHOR8,. + 0
 4672              	pxOverflowDelayedTaskList:
 4673 0000 00000000 		.space	4
 4674              		.section	.bss.uxPendedTicks,"aw",%nobits
ARM GAS  /tmp/ccu6CPJi.s 			page 180


 4675              		.align	2
 4676              		.set	.LANCHOR19,. + 0
 4679              	uxPendedTicks:
 4680 0000 00000000 		.space	4
 4681              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 4682              		.align	2
 4683              		.set	.LANCHOR4,. + 0
 4686              	pxReadyTasksLists:
 4687 0000 00000000 		.space	140
 4687      00000000 
 4687      00000000 
 4687      00000000 
 4687      00000000 
 4688              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 4689              		.align	2
 4690              		.set	.LANCHOR16,. + 0
 4693              	uxSchedulerSuspended:
 4694 0000 00000000 		.space	4
 4695              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 4696              		.align	2
 4697              		.set	.LANCHOR15,. + 0
 4700              	uxDeletedTasksWaitingCleanUp:
 4701 0000 00000000 		.space	4
 4702              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 4703              		.align	2
 4704              		.set	.LANCHOR9,. + 0
 4707              	uxCurrentNumberOfTasks:
 4708 0000 00000000 		.space	4
 4709              		.section	.bss.pxCurrentTCB,"aw",%nobits
 4710              		.align	2
 4711              		.set	.LANCHOR10,. + 0
 4714              	pxCurrentTCB:
 4715 0000 00000000 		.space	4
 4716              		.section	.bss.xPendingReadyList,"aw",%nobits
 4717              		.align	2
 4718              		.set	.LANCHOR1,. + 0
 4721              	xPendingReadyList:
 4722 0000 00000000 		.space	20
 4722      00000000 
 4722      00000000 
 4722      00000000 
 4722      00000000 
 4723              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 4724              		.align	2
 4725              		.set	.LANCHOR17,. + 0
 4728              	xIdleTaskHandle:
 4729 0000 00000000 		.space	4
 4730              		.section	.bss.xTickCount,"aw",%nobits
 4731              		.align	2
 4732              		.set	.LANCHOR14,. + 0
 4735              	xTickCount:
 4736 0000 00000000 		.space	4
 4737              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 4738              		.align	2
 4739              		.set	.LANCHOR3,. + 0
 4742              	xNextTaskUnblockTime:
 4743 0000 00000000 		.space	4
ARM GAS  /tmp/ccu6CPJi.s 			page 181


 4744              		.section	.rodata.str1.4,"aMS",%progbits,1
 4745              		.align	2
 4746              	.LC0:
 4747 0000 49444C45 		.ascii	"IDLE\000"
 4747      00
 4748              		.section	.bss.uxTaskNumber,"aw",%nobits
 4749              		.align	2
 4750              		.set	.LANCHOR12,. + 0
 4753              	uxTaskNumber:
 4754 0000 00000000 		.space	4
 4755              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 4756              		.align	2
 4757              		.set	.LANCHOR5,. + 0
 4760              	xDelayedTaskList1:
 4761 0000 00000000 		.space	20
 4761      00000000 
 4761      00000000 
 4761      00000000 
 4761      00000000 
 4762              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 4763              		.align	2
 4764              		.set	.LANCHOR6,. + 0
 4767              	xDelayedTaskList2:
 4768 0000 00000000 		.space	20
 4768      00000000 
 4768      00000000 
 4768      00000000 
 4768      00000000 
 4769              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 4770              		.align	2
 4771              		.set	.LANCHOR0,. + 0
 4774              	xSuspendedTaskList:
 4775 0000 00000000 		.space	20
 4775      00000000 
 4775      00000000 
 4775      00000000 
 4775      00000000 
 4776              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 4777              		.align	2
 4778              		.set	.LANCHOR13,. + 0
 4781              	uxTopReadyPriority:
 4782 0000 00000000 		.space	4
 4783              		.section	.bss.xYieldPending,"aw",%nobits
 4784              		.align	2
 4785              		.set	.LANCHOR20,. + 0
 4788              	xYieldPending:
 4789 0000 00000000 		.space	4
 4790              		.text
 4791              	.Letext0:
 4792              		.file 3 "/usr/lib/gcc/arm-none-eabi/4.9.3/include/stddef.h"
 4793              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 4794              		.file 5 "/usr/include/newlib/sys/_stdint.h"
 4795              		.file 6 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 4796              		.file 7 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 4797              		.file 8 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 4798              		.file 9 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
ARM GAS  /tmp/ccu6CPJi.s 			page 182


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tasks.c
     /tmp/ccu6CPJi.s:21     .text.prvTaskIsTaskSuspended:0000000000000000 $t
     /tmp/ccu6CPJi.s:25     .text.prvTaskIsTaskSuspended:0000000000000000 prvTaskIsTaskSuspended
     /tmp/ccu6CPJi.s:103    .text.prvTaskIsTaskSuspended:0000000000000044 $d
     /tmp/ccu6CPJi.s:109    .text.prvResetNextTaskUnblockTime:0000000000000000 $t
     /tmp/ccu6CPJi.s:113    .text.prvResetNextTaskUnblockTime:0000000000000000 prvResetNextTaskUnblockTime
     /tmp/ccu6CPJi.s:153    .text.prvResetNextTaskUnblockTime:000000000000002c $d
     /tmp/ccu6CPJi.s:159    .text.prvDeleteTCB:0000000000000000 $t
     /tmp/ccu6CPJi.s:163    .text.prvDeleteTCB:0000000000000000 prvDeleteTCB
     /tmp/ccu6CPJi.s:190    .text.prvInitialiseNewTask:0000000000000000 $t
     /tmp/ccu6CPJi.s:194    .text.prvInitialiseNewTask:0000000000000000 prvInitialiseNewTask
     /tmp/ccu6CPJi.s:304    .text.prvInitialiseTaskLists:0000000000000000 $t
     /tmp/ccu6CPJi.s:308    .text.prvInitialiseTaskLists:0000000000000000 prvInitialiseTaskLists
     /tmp/ccu6CPJi.s:374    .text.prvInitialiseTaskLists:0000000000000048 $d
     /tmp/ccu6CPJi.s:386    .text.prvAddNewTaskToReadyList:0000000000000000 $t
     /tmp/ccu6CPJi.s:390    .text.prvAddNewTaskToReadyList:0000000000000000 prvAddNewTaskToReadyList
     /tmp/ccu6CPJi.s:493    .text.prvAddNewTaskToReadyList:000000000000008c $d
     /tmp/ccu6CPJi.s:504    .text.prvAddCurrentTaskToDelayedList:0000000000000000 $t
     /tmp/ccu6CPJi.s:508    .text.prvAddCurrentTaskToDelayedList:0000000000000000 prvAddCurrentTaskToDelayedList
     /tmp/ccu6CPJi.s:605    .text.prvAddCurrentTaskToDelayedList:0000000000000078 $d
     /tmp/ccu6CPJi.s:616    .text.xTaskCreate:0000000000000000 $t
     /tmp/ccu6CPJi.s:621    .text.xTaskCreate:0000000000000000 xTaskCreate
     /tmp/ccu6CPJi.s:718    .text.vTaskDelete:0000000000000000 $t
     /tmp/ccu6CPJi.s:723    .text.vTaskDelete:0000000000000000 vTaskDelete
     /tmp/ccu6CPJi.s:863    .text.vTaskDelete:00000000000000b4 $d
     /tmp/ccu6CPJi.s:877    .text.uxTaskPriorityGet:0000000000000000 $t
     /tmp/ccu6CPJi.s:882    .text.uxTaskPriorityGet:0000000000000000 uxTaskPriorityGet
     /tmp/ccu6CPJi.s:918    .text.uxTaskPriorityGet:0000000000000018 $d
     /tmp/ccu6CPJi.s:923    .text.uxTaskPriorityGetFromISR:0000000000000000 $t
     /tmp/ccu6CPJi.s:928    .text.uxTaskPriorityGetFromISR:0000000000000000 uxTaskPriorityGetFromISR
     /tmp/ccu6CPJi.s:984    .text.uxTaskPriorityGetFromISR:000000000000002c $d
     /tmp/ccu6CPJi.s:989    .text.vTaskPrioritySet:0000000000000000 $t
     /tmp/ccu6CPJi.s:994    .text.vTaskPrioritySet:0000000000000000 vTaskPrioritySet
     /tmp/ccu6CPJi.s:1184   .text.vTaskPrioritySet:00000000000000e4 $d
     /tmp/ccu6CPJi.s:1192   .text.vTaskResume:0000000000000000 $t
     /tmp/ccu6CPJi.s:1197   .text.vTaskResume:0000000000000000 vTaskResume
     /tmp/ccu6CPJi.s:1296   .text.vTaskResume:0000000000000078 $d
     /tmp/ccu6CPJi.s:1304   .text.xTaskResumeFromISR:0000000000000000 $t
     /tmp/ccu6CPJi.s:1309   .text.xTaskResumeFromISR:0000000000000000 xTaskResumeFromISR
     /tmp/ccu6CPJi.s:1440   .text.xTaskResumeFromISR:0000000000000094 $d
     /tmp/ccu6CPJi.s:1449   .text.vTaskStartScheduler:0000000000000000 $t
     /tmp/ccu6CPJi.s:1454   .text.vTaskStartScheduler:0000000000000000 vTaskStartScheduler
     /tmp/ccu6CPJi.s:1543   .text.vTaskStartScheduler:0000000000000064 $d
     /tmp/ccu6CPJi.s:2364   .text.prvIdleTask:0000000000000000 prvIdleTask
     /tmp/ccu6CPJi.s:1553   .text.vTaskEndScheduler:0000000000000000 $t
     /tmp/ccu6CPJi.s:1558   .text.vTaskEndScheduler:0000000000000000 vTaskEndScheduler
     /tmp/ccu6CPJi.s:1594   .text.vTaskEndScheduler:0000000000000020 $d
     /tmp/ccu6CPJi.s:1599   .text.vTaskSuspendAll:0000000000000000 $t
     /tmp/ccu6CPJi.s:1604   .text.vTaskSuspendAll:0000000000000000 vTaskSuspendAll
     /tmp/ccu6CPJi.s:1620   .text.vTaskSuspendAll:000000000000000c $d
     /tmp/ccu6CPJi.s:1625   .text.xTaskGetTickCount:0000000000000000 $t
     /tmp/ccu6CPJi.s:1630   .text.xTaskGetTickCount:0000000000000000 xTaskGetTickCount
     /tmp/ccu6CPJi.s:1646   .text.xTaskGetTickCount:0000000000000008 $d
     /tmp/ccu6CPJi.s:1651   .text.xTaskGetTickCountFromISR:0000000000000000 $t
     /tmp/ccu6CPJi.s:1656   .text.xTaskGetTickCountFromISR:0000000000000000 xTaskGetTickCountFromISR
     /tmp/ccu6CPJi.s:1679   .text.xTaskGetTickCountFromISR:000000000000000c $d
ARM GAS  /tmp/ccu6CPJi.s 			page 183


     /tmp/ccu6CPJi.s:1684   .text.uxTaskGetNumberOfTasks:0000000000000000 $t
     /tmp/ccu6CPJi.s:1689   .text.uxTaskGetNumberOfTasks:0000000000000000 uxTaskGetNumberOfTasks
     /tmp/ccu6CPJi.s:1704   .text.uxTaskGetNumberOfTasks:0000000000000008 $d
     /tmp/ccu6CPJi.s:1709   .text.pcTaskGetName:0000000000000000 $t
     /tmp/ccu6CPJi.s:1714   .text.pcTaskGetName:0000000000000000 pcTaskGetName
     /tmp/ccu6CPJi.s:1757   .text.pcTaskGetName:0000000000000024 $d
     /tmp/ccu6CPJi.s:1762   .text.xTaskIncrementTick:0000000000000000 $t
     /tmp/ccu6CPJi.s:1767   .text.xTaskIncrementTick:0000000000000000 xTaskIncrementTick
     /tmp/ccu6CPJi.s:1979   .text.xTaskIncrementTick:00000000000000f8 $d
     /tmp/ccu6CPJi.s:1994   .text.xTaskResumeAll:0000000000000000 $t
     /tmp/ccu6CPJi.s:1999   .text.xTaskResumeAll:0000000000000000 xTaskResumeAll
     /tmp/ccu6CPJi.s:2181   .text.xTaskResumeAll:00000000000000d4 $d
     /tmp/ccu6CPJi.s:2194   .text.vTaskDelay:0000000000000000 $t
     /tmp/ccu6CPJi.s:2199   .text.vTaskDelay:0000000000000000 vTaskDelay
     /tmp/ccu6CPJi.s:2273   .text.vTaskDelay:0000000000000048 $d
     /tmp/ccu6CPJi.s:2279   .text.prvCheckTasksWaitingTermination:0000000000000000 $t
     /tmp/ccu6CPJi.s:2283   .text.prvCheckTasksWaitingTermination:0000000000000000 prvCheckTasksWaitingTermination
     /tmp/ccu6CPJi.s:2353   .text.prvCheckTasksWaitingTermination:0000000000000048 $d
     /tmp/ccu6CPJi.s:2360   .text.prvIdleTask:0000000000000000 $t
     /tmp/ccu6CPJi.s:2402   .text.prvIdleTask:0000000000000020 $d
     /tmp/ccu6CPJi.s:2408   .text.vTaskSwitchContext:0000000000000000 $t
     /tmp/ccu6CPJi.s:2413   .text.vTaskSwitchContext:0000000000000000 vTaskSwitchContext
     /tmp/ccu6CPJi.s:2530   .text.vTaskSwitchContext:0000000000000084 $d
     /tmp/ccu6CPJi.s:2539   .text.vTaskSuspend:0000000000000000 $t
     /tmp/ccu6CPJi.s:2544   .text.vTaskSuspend:0000000000000000 vTaskSuspend
     /tmp/ccu6CPJi.s:2688   .text.vTaskSuspend:00000000000000b4 $d
     /tmp/ccu6CPJi.s:2700   .text.vTaskPlaceOnEventList:0000000000000000 $t
     /tmp/ccu6CPJi.s:2705   .text.vTaskPlaceOnEventList:0000000000000000 vTaskPlaceOnEventList
     /tmp/ccu6CPJi.s:2756   .text.vTaskPlaceOnEventList:000000000000002c $d
     /tmp/ccu6CPJi.s:2761   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 $t
     /tmp/ccu6CPJi.s:2766   .text.vTaskPlaceOnUnorderedEventList:0000000000000000 vTaskPlaceOnUnorderedEventList
     /tmp/ccu6CPJi.s:2851   .text.vTaskPlaceOnUnorderedEventList:0000000000000054 $d
     /tmp/ccu6CPJi.s:2857   .text.xTaskRemoveFromEventList:0000000000000000 $t
     /tmp/ccu6CPJi.s:2862   .text.xTaskRemoveFromEventList:0000000000000000 xTaskRemoveFromEventList
     /tmp/ccu6CPJi.s:2962   .text.xTaskRemoveFromEventList:0000000000000074 $d
     /tmp/ccu6CPJi.s:2972   .text.xTaskRemoveFromUnorderedEventList:0000000000000000 $t
     /tmp/ccu6CPJi.s:2977   .text.xTaskRemoveFromUnorderedEventList:0000000000000000 xTaskRemoveFromUnorderedEventList
     /tmp/ccu6CPJi.s:3086   .text.xTaskRemoveFromUnorderedEventList:000000000000007c $d
     /tmp/ccu6CPJi.s:3095   .text.vTaskSetTimeOutState:0000000000000000 $t
     /tmp/ccu6CPJi.s:3100   .text.vTaskSetTimeOutState:0000000000000000 vTaskSetTimeOutState
     /tmp/ccu6CPJi.s:3140   .text.vTaskSetTimeOutState:0000000000000024 $d
     /tmp/ccu6CPJi.s:3146   .text.xTaskCheckForTimeOut:0000000000000000 $t
     /tmp/ccu6CPJi.s:3151   .text.xTaskCheckForTimeOut:0000000000000000 xTaskCheckForTimeOut
     /tmp/ccu6CPJi.s:3276   .text.xTaskCheckForTimeOut:0000000000000078 $d
     /tmp/ccu6CPJi.s:3282   .text.vTaskMissedYield:0000000000000000 $t
     /tmp/ccu6CPJi.s:3287   .text.vTaskMissedYield:0000000000000000 vTaskMissedYield
     /tmp/ccu6CPJi.s:3302   .text.vTaskMissedYield:0000000000000008 $d
     /tmp/ccu6CPJi.s:3307   .text.xTaskGetCurrentTaskHandle:0000000000000000 $t
     /tmp/ccu6CPJi.s:3312   .text.xTaskGetCurrentTaskHandle:0000000000000000 xTaskGetCurrentTaskHandle
     /tmp/ccu6CPJi.s:3328   .text.xTaskGetCurrentTaskHandle:0000000000000008 $d
     /tmp/ccu6CPJi.s:3333   .text.xTaskGetSchedulerState:0000000000000000 $t
     /tmp/ccu6CPJi.s:3338   .text.xTaskGetSchedulerState:0000000000000000 xTaskGetSchedulerState
     /tmp/ccu6CPJi.s:3369   .text.xTaskGetSchedulerState:0000000000000018 $d
     /tmp/ccu6CPJi.s:3375   .text.vTaskPriorityInherit:0000000000000000 $t
     /tmp/ccu6CPJi.s:3380   .text.vTaskPriorityInherit:0000000000000000 vTaskPriorityInherit
     /tmp/ccu6CPJi.s:3497   .text.vTaskPriorityInherit:000000000000009c $d
     /tmp/ccu6CPJi.s:3504   .text.xTaskPriorityDisinherit:0000000000000000 $t
ARM GAS  /tmp/ccu6CPJi.s 			page 184


     /tmp/ccu6CPJi.s:3509   .text.xTaskPriorityDisinherit:0000000000000000 xTaskPriorityDisinherit
     /tmp/ccu6CPJi.s:3663   .text.xTaskPriorityDisinherit:00000000000000a8 $d
     /tmp/ccu6CPJi.s:3670   .text.uxTaskResetEventItemValue:0000000000000000 $t
     /tmp/ccu6CPJi.s:3675   .text.uxTaskResetEventItemValue:0000000000000000 uxTaskResetEventItemValue
     /tmp/ccu6CPJi.s:3698   .text.uxTaskResetEventItemValue:0000000000000014 $d
     /tmp/ccu6CPJi.s:3703   .text.pvTaskIncrementMutexHeldCount:0000000000000000 $t
     /tmp/ccu6CPJi.s:3708   .text.pvTaskIncrementMutexHeldCount:0000000000000000 pvTaskIncrementMutexHeldCount
     /tmp/ccu6CPJi.s:3734   .text.pvTaskIncrementMutexHeldCount:0000000000000018 $d
     /tmp/ccu6CPJi.s:3739   .text.ulTaskNotifyTake:0000000000000000 $t
     /tmp/ccu6CPJi.s:3744   .text.ulTaskNotifyTake:0000000000000000 ulTaskNotifyTake
     /tmp/ccu6CPJi.s:3835   .text.ulTaskNotifyTake:000000000000006c $d
     /tmp/ccu6CPJi.s:3841   .text.xTaskNotifyWait:0000000000000000 $t
     /tmp/ccu6CPJi.s:3846   .text.xTaskNotifyWait:0000000000000000 xTaskNotifyWait
     /tmp/ccu6CPJi.s:3958   .text.xTaskNotifyWait:0000000000000090 $d
     /tmp/ccu6CPJi.s:3964   .text.xTaskGenericNotify:0000000000000000 $t
     /tmp/ccu6CPJi.s:3969   .text.xTaskGenericNotify:0000000000000000 xTaskGenericNotify
     /tmp/ccu6CPJi.s:4034   .text.xTaskGenericNotify:000000000000003e $d
     /tmp/ccu6CPJi.s:4038   .text.xTaskGenericNotify:0000000000000042 $t
     /tmp/ccu6CPJi.s:4156   .text.xTaskGenericNotify:00000000000000d4 $d
     /tmp/ccu6CPJi.s:4164   .text.xTaskGenericNotifyFromISR:0000000000000000 $t
     /tmp/ccu6CPJi.s:4169   .text.xTaskGenericNotifyFromISR:0000000000000000 xTaskGenericNotifyFromISR
     /tmp/ccu6CPJi.s:4252   .text.xTaskGenericNotifyFromISR:000000000000005c $d
     /tmp/ccu6CPJi.s:4256   .text.xTaskGenericNotifyFromISR:0000000000000060 $t
     /tmp/ccu6CPJi.s:4394   .text.xTaskGenericNotifyFromISR:000000000000010c $d
     /tmp/ccu6CPJi.s:4404   .text.vTaskNotifyGiveFromISR:0000000000000000 $t
     /tmp/ccu6CPJi.s:4409   .text.vTaskNotifyGiveFromISR:0000000000000000 vTaskNotifyGiveFromISR
     /tmp/ccu6CPJi.s:4565   .text.vTaskNotifyGiveFromISR:00000000000000b8 $d
     /tmp/ccu6CPJi.s:4577   .text.xTaskNotifyStateClear:0000000000000000 $t
     /tmp/ccu6CPJi.s:4582   .text.xTaskNotifyStateClear:0000000000000000 xTaskNotifyStateClear
     /tmp/ccu6CPJi.s:4634   .text.xTaskNotifyStateClear:000000000000002c $d
     /tmp/ccu6CPJi.s:4714   .bss.pxCurrentTCB:0000000000000000 pxCurrentTCB
     /tmp/ccu6CPJi.s:4640   .bss.xNumOfOverflows:0000000000000000 $d
     /tmp/ccu6CPJi.s:4644   .bss.xNumOfOverflows:0000000000000000 xNumOfOverflows
     /tmp/ccu6CPJi.s:4647   .bss.pxDelayedTaskList:0000000000000000 $d
     /tmp/ccu6CPJi.s:4651   .bss.pxDelayedTaskList:0000000000000000 pxDelayedTaskList
     /tmp/ccu6CPJi.s:4654   .bss.xSchedulerRunning:0000000000000000 $d
     /tmp/ccu6CPJi.s:4658   .bss.xSchedulerRunning:0000000000000000 xSchedulerRunning
     /tmp/ccu6CPJi.s:4661   .bss.xTasksWaitingTermination:0000000000000000 $d
     /tmp/ccu6CPJi.s:4665   .bss.xTasksWaitingTermination:0000000000000000 xTasksWaitingTermination
     /tmp/ccu6CPJi.s:4668   .bss.pxOverflowDelayedTaskList:0000000000000000 $d
     /tmp/ccu6CPJi.s:4672   .bss.pxOverflowDelayedTaskList:0000000000000000 pxOverflowDelayedTaskList
     /tmp/ccu6CPJi.s:4675   .bss.uxPendedTicks:0000000000000000 $d
     /tmp/ccu6CPJi.s:4679   .bss.uxPendedTicks:0000000000000000 uxPendedTicks
     /tmp/ccu6CPJi.s:4682   .bss.pxReadyTasksLists:0000000000000000 $d
     /tmp/ccu6CPJi.s:4686   .bss.pxReadyTasksLists:0000000000000000 pxReadyTasksLists
     /tmp/ccu6CPJi.s:4689   .bss.uxSchedulerSuspended:0000000000000000 $d
     /tmp/ccu6CPJi.s:4693   .bss.uxSchedulerSuspended:0000000000000000 uxSchedulerSuspended
     /tmp/ccu6CPJi.s:4696   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 $d
     /tmp/ccu6CPJi.s:4700   .bss.uxDeletedTasksWaitingCleanUp:0000000000000000 uxDeletedTasksWaitingCleanUp
     /tmp/ccu6CPJi.s:4703   .bss.uxCurrentNumberOfTasks:0000000000000000 $d
     /tmp/ccu6CPJi.s:4707   .bss.uxCurrentNumberOfTasks:0000000000000000 uxCurrentNumberOfTasks
     /tmp/ccu6CPJi.s:4710   .bss.pxCurrentTCB:0000000000000000 $d
     /tmp/ccu6CPJi.s:4717   .bss.xPendingReadyList:0000000000000000 $d
     /tmp/ccu6CPJi.s:4721   .bss.xPendingReadyList:0000000000000000 xPendingReadyList
     /tmp/ccu6CPJi.s:4724   .bss.xIdleTaskHandle:0000000000000000 $d
     /tmp/ccu6CPJi.s:4728   .bss.xIdleTaskHandle:0000000000000000 xIdleTaskHandle
     /tmp/ccu6CPJi.s:4731   .bss.xTickCount:0000000000000000 $d
ARM GAS  /tmp/ccu6CPJi.s 			page 185


     /tmp/ccu6CPJi.s:4735   .bss.xTickCount:0000000000000000 xTickCount
     /tmp/ccu6CPJi.s:4738   .bss.xNextTaskUnblockTime:0000000000000000 $d
     /tmp/ccu6CPJi.s:4742   .bss.xNextTaskUnblockTime:0000000000000000 xNextTaskUnblockTime
     /tmp/ccu6CPJi.s:4745   .rodata.str1.4:0000000000000000 $d
     /tmp/ccu6CPJi.s:4749   .bss.uxTaskNumber:0000000000000000 $d
     /tmp/ccu6CPJi.s:4753   .bss.uxTaskNumber:0000000000000000 uxTaskNumber
     /tmp/ccu6CPJi.s:4756   .bss.xDelayedTaskList1:0000000000000000 $d
     /tmp/ccu6CPJi.s:4760   .bss.xDelayedTaskList1:0000000000000000 xDelayedTaskList1
     /tmp/ccu6CPJi.s:4763   .bss.xDelayedTaskList2:0000000000000000 $d
     /tmp/ccu6CPJi.s:4767   .bss.xDelayedTaskList2:0000000000000000 xDelayedTaskList2
     /tmp/ccu6CPJi.s:4770   .bss.xSuspendedTaskList:0000000000000000 $d
     /tmp/ccu6CPJi.s:4774   .bss.xSuspendedTaskList:0000000000000000 xSuspendedTaskList
     /tmp/ccu6CPJi.s:4777   .bss.uxTopReadyPriority:0000000000000000 $d
     /tmp/ccu6CPJi.s:4781   .bss.uxTopReadyPriority:0000000000000000 uxTopReadyPriority
     /tmp/ccu6CPJi.s:4784   .bss.xYieldPending:0000000000000000 $d
     /tmp/ccu6CPJi.s:4788   .bss.xYieldPending:0000000000000000 xYieldPending
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
vPortFree
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vListInsert
pvPortMalloc
vPortValidateInterruptPriority
xPortStartScheduler
vPortEndScheduler
