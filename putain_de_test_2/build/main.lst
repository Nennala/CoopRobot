ARM GAS  /tmp/cc3KrvMq.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"main.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.MX_GPIO_Init,"ax",%progbits
  22              		.align	2
  23              		.thumb
  24              		.thumb_func
  26              	MX_GPIO_Init:
  27              	.LFB132:
  28              		.file 1 "Src/main.c"
   1:Src/main.c    **** /**
   2:Src/main.c    ****   ******************************************************************************
   3:Src/main.c    ****   * File Name          : main.c
   4:Src/main.c    ****   * Description        : Main program body
   5:Src/main.c    ****   ******************************************************************************
   6:Src/main.c    ****   * This notice applies to any and all portions of this file
   7:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   8:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
   9:Src/main.c    ****   * inserted by the user or by software development tools
  10:Src/main.c    ****   * are owned by their respective copyright owners.
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * Copyright (c) 2017 STMicroelectronics International N.V. 
  13:Src/main.c    ****   * All rights reserved.
  14:Src/main.c    ****   *
  15:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without 
  16:Src/main.c    ****   * modification, are permitted, provided that the following conditions are met:
  17:Src/main.c    ****   *
  18:Src/main.c    ****   * 1. Redistribution of source code must retain the above copyright notice, 
  19:Src/main.c    ****   *    this list of conditions and the following disclaimer.
  20:Src/main.c    ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  21:Src/main.c    ****   *    this list of conditions and the following disclaimer in the documentation
  22:Src/main.c    ****   *    and/or other materials provided with the distribution.
  23:Src/main.c    ****   * 3. Neither the name of STMicroelectronics nor the names of other 
  24:Src/main.c    ****   *    contributors to this software may be used to endorse or promote products 
  25:Src/main.c    ****   *    derived from this software without specific written permission.
  26:Src/main.c    ****   * 4. This software, including modifications and/or derivative works of this 
  27:Src/main.c    ****   *    software, must execute solely and exclusively on microcontroller or
  28:Src/main.c    ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  29:Src/main.c    ****   * 5. Redistribution and use of this software other than as permitted under 
  30:Src/main.c    ****   *    this license is void and will automatically terminate your rights under 
ARM GAS  /tmp/cc3KrvMq.s 			page 2


  31:Src/main.c    ****   *    this license. 
  32:Src/main.c    ****   *
  33:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  34:Src/main.c    ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  35:Src/main.c    ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  36:Src/main.c    ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  37:Src/main.c    ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  38:Src/main.c    ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  39:Src/main.c    ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  40:Src/main.c    ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  41:Src/main.c    ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  42:Src/main.c    ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  43:Src/main.c    ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  44:Src/main.c    ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  45:Src/main.c    ****   *
  46:Src/main.c    ****   ******************************************************************************
  47:Src/main.c    ****   */
  48:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  49:Src/main.c    **** #include "main.h"
  50:Src/main.c    **** #include "stm32f3xx_hal.h"
  51:Src/main.c    **** #include "cmsis_os.h"
  52:Src/main.c    **** 
  53:Src/main.c    **** /* USER CODE BEGIN Includes */
  54:Src/main.c    **** 
  55:Src/main.c    **** /* USER CODE END Includes */
  56:Src/main.c    **** 
  57:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  58:Src/main.c    **** UART_HandleTypeDef huart2;
  59:Src/main.c    **** 
  60:Src/main.c    **** osThreadId defaultTaskHandle;
  61:Src/main.c    **** osThreadId pc_comHandle;
  62:Src/main.c    **** 
  63:Src/main.c    **** /* USER CODE BEGIN PV */
  64:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  65:Src/main.c    **** 
  66:Src/main.c    **** /* USER CODE END PV */
  67:Src/main.c    **** 
  68:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  69:Src/main.c    **** void SystemClock_Config(void);
  70:Src/main.c    **** static void MX_GPIO_Init(void);
  71:Src/main.c    **** static void MX_USART2_UART_Init(void);
  72:Src/main.c    **** void StartDefaultTask(void const * argument);
  73:Src/main.c    **** void pcCOM(void const * argument);
  74:Src/main.c    **** 
  75:Src/main.c    **** /* USER CODE BEGIN PFP */
  76:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  77:Src/main.c    **** 
  78:Src/main.c    **** /* USER CODE END PFP */
  79:Src/main.c    **** 
  80:Src/main.c    **** /* USER CODE BEGIN 0 */
  81:Src/main.c    **** 
  82:Src/main.c    **** /* USER CODE END 0 */
  83:Src/main.c    **** 
  84:Src/main.c    **** int main(void)
  85:Src/main.c    **** {
  86:Src/main.c    **** 
  87:Src/main.c    ****   /* USER CODE BEGIN 1 */
ARM GAS  /tmp/cc3KrvMq.s 			page 3


  88:Src/main.c    **** 
  89:Src/main.c    ****   /* USER CODE END 1 */
  90:Src/main.c    **** 
  91:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
  92:Src/main.c    **** 
  93:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  94:Src/main.c    ****   HAL_Init();
  95:Src/main.c    **** 
  96:Src/main.c    ****   /* USER CODE BEGIN Init */
  97:Src/main.c    **** 
  98:Src/main.c    ****   /* USER CODE END Init */
  99:Src/main.c    **** 
 100:Src/main.c    ****   /* Configure the system clock */
 101:Src/main.c    ****   SystemClock_Config();
 102:Src/main.c    **** 
 103:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 104:Src/main.c    **** 
 105:Src/main.c    ****   /* USER CODE END SysInit */
 106:Src/main.c    **** 
 107:Src/main.c    ****   /* Initialize all configured peripherals */
 108:Src/main.c    ****   MX_GPIO_Init();
 109:Src/main.c    ****   MX_USART2_UART_Init();
 110:Src/main.c    **** 
 111:Src/main.c    ****   /* USER CODE BEGIN 2 */
 112:Src/main.c    **** 
 113:Src/main.c    ****   /* USER CODE END 2 */
 114:Src/main.c    **** 
 115:Src/main.c    ****   /* USER CODE BEGIN RTOS_MUTEX */
 116:Src/main.c    ****   /* add mutexes, ... */
 117:Src/main.c    ****   /* USER CODE END RTOS_MUTEX */
 118:Src/main.c    **** 
 119:Src/main.c    ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 120:Src/main.c    ****   /* add semaphores, ... */
 121:Src/main.c    ****   /* USER CODE END RTOS_SEMAPHORES */
 122:Src/main.c    **** 
 123:Src/main.c    ****   /* USER CODE BEGIN RTOS_TIMERS */
 124:Src/main.c    ****   /* start timers, add new ones, ... */
 125:Src/main.c    ****   /* USER CODE END RTOS_TIMERS */
 126:Src/main.c    **** 
 127:Src/main.c    ****   /* Create the thread(s) */
 128:Src/main.c    ****   /* definition and creation of defaultTask */
 129:Src/main.c    ****   osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 130:Src/main.c    ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 131:Src/main.c    **** 
 132:Src/main.c    ****   /* definition and creation of pc_com */
 133:Src/main.c    ****   osThreadDef(pc_com, pcCOM, osPriorityIdle, 0, 256);
 134:Src/main.c    ****   pc_comHandle = osThreadCreate(osThread(pc_com), NULL);
 135:Src/main.c    **** 
 136:Src/main.c    ****   /* USER CODE BEGIN RTOS_THREADS */
 137:Src/main.c    ****   /* add threads, ... */
 138:Src/main.c    ****   /* USER CODE END RTOS_THREADS */
 139:Src/main.c    **** 
 140:Src/main.c    ****   /* USER CODE BEGIN RTOS_QUEUES */
 141:Src/main.c    ****   /* add queues, ... */
 142:Src/main.c    ****   /* USER CODE END RTOS_QUEUES */
 143:Src/main.c    ****  
 144:Src/main.c    **** 
ARM GAS  /tmp/cc3KrvMq.s 			page 4


 145:Src/main.c    ****   /* Start scheduler */
 146:Src/main.c    ****   osKernelStart();
 147:Src/main.c    ****   
 148:Src/main.c    ****   /* We should never get here as control is now taken by the scheduler */
 149:Src/main.c    **** 
 150:Src/main.c    ****   /* Infinite loop */
 151:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 152:Src/main.c    ****   while (1)
 153:Src/main.c    ****   {
 154:Src/main.c    ****   /* USER CODE END WHILE */
 155:Src/main.c    **** 
 156:Src/main.c    ****   /* USER CODE BEGIN 3 */
 157:Src/main.c    **** 
 158:Src/main.c    ****   }
 159:Src/main.c    ****   /* USER CODE END 3 */
 160:Src/main.c    **** 
 161:Src/main.c    **** }
 162:Src/main.c    **** 
 163:Src/main.c    **** /** System Clock Configuration
 164:Src/main.c    **** */
 165:Src/main.c    **** void SystemClock_Config(void)
 166:Src/main.c    **** {
 167:Src/main.c    **** 
 168:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 169:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 170:Src/main.c    **** 
 171:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 172:Src/main.c    ****     */
 173:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 174:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 175:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 176:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 177:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 178:Src/main.c    ****   {
 179:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 180:Src/main.c    ****   }
 181:Src/main.c    **** 
 182:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 183:Src/main.c    ****     */
 184:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 185:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 186:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 187:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 188:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 189:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 190:Src/main.c    **** 
 191:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 192:Src/main.c    ****   {
 193:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 194:Src/main.c    ****   }
 195:Src/main.c    **** 
 196:Src/main.c    ****     /**Configure the Systick interrupt time 
 197:Src/main.c    ****     */
 198:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 199:Src/main.c    **** 
 200:Src/main.c    ****     /**Configure the Systick 
 201:Src/main.c    ****     */
ARM GAS  /tmp/cc3KrvMq.s 			page 5


 202:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 203:Src/main.c    **** 
 204:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 205:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 206:Src/main.c    **** }
 207:Src/main.c    **** 
 208:Src/main.c    **** /* USART2 init function */
 209:Src/main.c    **** static void MX_USART2_UART_Init(void)
 210:Src/main.c    **** {
 211:Src/main.c    **** 
 212:Src/main.c    ****   huart2.Instance = USART2;
 213:Src/main.c    ****   huart2.Init.BaudRate = 38400;
 214:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 215:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 216:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 217:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 218:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 219:Src/main.c    ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 220:Src/main.c    ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 221:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 222:Src/main.c    ****   {
 223:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 224:Src/main.c    ****   }
 225:Src/main.c    **** 
 226:Src/main.c    **** }
 227:Src/main.c    **** 
 228:Src/main.c    **** /** Configure pins as 
 229:Src/main.c    ****         * Analog 
 230:Src/main.c    ****         * Input 
 231:Src/main.c    ****         * Output
 232:Src/main.c    ****         * EVENT_OUT
 233:Src/main.c    ****         * EXTI
 234:Src/main.c    **** */
 235:Src/main.c    **** static void MX_GPIO_Init(void)
 236:Src/main.c    **** {
  29              		.loc 1 236 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 32
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33 0000 10B5     		push	{r4, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 8
  36              		.cfi_offset 4, -8
  37              		.cfi_offset 14, -4
  38 0002 88B0     		sub	sp, sp, #32
  39              	.LCFI1:
  40              		.cfi_def_cfa_offset 40
  41              	.LBB2:
 237:Src/main.c    **** 
 238:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct;
 239:Src/main.c    **** 
 240:Src/main.c    ****   /* GPIO Ports Clock Enable */
 241:Src/main.c    ****   __HAL_RCC_GPIOF_CLK_ENABLE();
  42              		.loc 1 241 0
  43 0004 174B     		ldr	r3, .L3
  44 0006 5A69     		ldr	r2, [r3, #20]
  45 0008 42F48002 		orr	r2, r2, #4194304
ARM GAS  /tmp/cc3KrvMq.s 			page 6


  46 000c 5A61     		str	r2, [r3, #20]
  47 000e 5A69     		ldr	r2, [r3, #20]
  48 0010 02F48002 		and	r2, r2, #4194304
  49 0014 0092     		str	r2, [sp]
  50 0016 009A     		ldr	r2, [sp]
  51              	.LBE2:
  52              	.LBB3:
 242:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  53              		.loc 1 242 0
  54 0018 5A69     		ldr	r2, [r3, #20]
  55 001a 42F40032 		orr	r2, r2, #131072
  56 001e 5A61     		str	r2, [r3, #20]
  57 0020 5A69     		ldr	r2, [r3, #20]
  58 0022 02F40032 		and	r2, r2, #131072
  59 0026 0192     		str	r2, [sp, #4]
  60 0028 019A     		ldr	r2, [sp, #4]
  61              	.LBE3:
  62              	.LBB4:
 243:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  63              		.loc 1 243 0
  64 002a 5A69     		ldr	r2, [r3, #20]
  65 002c 42F48022 		orr	r2, r2, #262144
  66 0030 5A61     		str	r2, [r3, #20]
  67 0032 5B69     		ldr	r3, [r3, #20]
  68 0034 03F48023 		and	r3, r3, #262144
  69 0038 0293     		str	r3, [sp, #8]
  70 003a 029B     		ldr	r3, [sp, #8]
  71              	.LBE4:
 244:Src/main.c    **** 
 245:Src/main.c    ****   /*Configure GPIO pin Output Level */
 246:Src/main.c    ****   HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
  72              		.loc 1 246 0
  73 003c 0A4C     		ldr	r4, .L3+4
  74 003e 0022     		movs	r2, #0
  75 0040 0821     		movs	r1, #8
  76 0042 2046     		mov	r0, r4
  77 0044 FFF7FEFF 		bl	HAL_GPIO_WritePin
  78              	.LVL0:
 247:Src/main.c    **** 
 248:Src/main.c    ****   /*Configure GPIO pin : led_Pin */
 249:Src/main.c    ****   GPIO_InitStruct.Pin = led_Pin;
  79              		.loc 1 249 0
  80 0048 0823     		movs	r3, #8
  81 004a 0393     		str	r3, [sp, #12]
 250:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  82              		.loc 1 250 0
  83 004c 0123     		movs	r3, #1
  84 004e 0493     		str	r3, [sp, #16]
 251:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  85              		.loc 1 251 0
  86 0050 0023     		movs	r3, #0
  87 0052 0593     		str	r3, [sp, #20]
 252:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  88              		.loc 1 252 0
  89 0054 0693     		str	r3, [sp, #24]
 253:Src/main.c    ****   HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
  90              		.loc 1 253 0
ARM GAS  /tmp/cc3KrvMq.s 			page 7


  91 0056 03A9     		add	r1, sp, #12
  92 0058 2046     		mov	r0, r4
  93 005a FFF7FEFF 		bl	HAL_GPIO_Init
  94              	.LVL1:
 254:Src/main.c    **** 
 255:Src/main.c    **** }
  95              		.loc 1 255 0
  96 005e 08B0     		add	sp, sp, #32
  97              	.LCFI2:
  98              		.cfi_def_cfa_offset 8
  99              		@ sp needed
 100 0060 10BD     		pop	{r4, pc}
 101              	.L4:
 102 0062 00BF     		.align	2
 103              	.L3:
 104 0064 00100240 		.word	1073876992
 105 0068 00040048 		.word	1207960576
 106              		.cfi_endproc
 107              	.LFE132:
 109              		.section	.text.StartDefaultTask,"ax",%progbits
 110              		.align	2
 111              		.global	StartDefaultTask
 112              		.thumb
 113              		.thumb_func
 115              	StartDefaultTask:
 116              	.LFB133:
 256:Src/main.c    **** 
 257:Src/main.c    **** /* USER CODE BEGIN 4 */
 258:Src/main.c    **** 
 259:Src/main.c    **** /* USER CODE END 4 */
 260:Src/main.c    **** 
 261:Src/main.c    **** /* StartDefaultTask function */
 262:Src/main.c    **** void StartDefaultTask(void const * argument)
 263:Src/main.c    **** {
 117              		.loc 1 263 0
 118              		.cfi_startproc
 119              		@ Volatile: function does not return.
 120              		@ args = 0, pretend = 0, frame = 0
 121              		@ frame_needed = 0, uses_anonymous_args = 0
 122              	.LVL2:
 123 0000 08B5     		push	{r3, lr}
 124              	.LCFI3:
 125              		.cfi_def_cfa_offset 8
 126              		.cfi_offset 3, -8
 127              		.cfi_offset 14, -4
 128              	.LVL3:
 129              	.L6:
 264:Src/main.c    **** 
 265:Src/main.c    ****   /* USER CODE BEGIN 5 */
 266:Src/main.c    ****   /* Infinite loop */
 267:Src/main.c    ****   for(;;)
 268:Src/main.c    ****   {
 269:Src/main.c    ****     HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 130              		.loc 1 269 0 discriminator 1
 131 0002 0821     		movs	r1, #8
 132 0004 0348     		ldr	r0, .L8
 133 0006 FFF7FEFF 		bl	HAL_GPIO_TogglePin
ARM GAS  /tmp/cc3KrvMq.s 			page 8


 134              	.LVL4:
 270:Src/main.c    ****     osDelay(1000);
 135              		.loc 1 270 0 discriminator 1
 136 000a 4FF47A70 		mov	r0, #1000
 137 000e FFF7FEFF 		bl	osDelay
 138              	.LVL5:
 139 0012 F6E7     		b	.L6
 140              	.L9:
 141              		.align	2
 142              	.L8:
 143 0014 00040048 		.word	1207960576
 144              		.cfi_endproc
 145              	.LFE133:
 147              		.section	.text.pcCOM,"ax",%progbits
 148              		.align	2
 149              		.weak	pcCOM
 150              		.thumb
 151              		.thumb_func
 153              	pcCOM:
 154              	.LFB134:
 271:Src/main.c    ****   }
 272:Src/main.c    ****   /* USER CODE END 5 */ 
 273:Src/main.c    **** }
 274:Src/main.c    **** 
 275:Src/main.c    **** /* pcCOM function */
 276:Src/main.c    **** __weak void pcCOM(void const * argument)
 277:Src/main.c    **** {
 155              		.loc 1 277 0
 156              		.cfi_startproc
 157              		@ args = 0, pretend = 0, frame = 0
 158              		@ frame_needed = 0, uses_anonymous_args = 0
 159              	.LVL6:
 160 0000 08B5     		push	{r3, lr}
 161              	.LCFI4:
 162              		.cfi_def_cfa_offset 8
 163              		.cfi_offset 3, -8
 164              		.cfi_offset 14, -4
 165              	.LVL7:
 166              	.L11:
 278:Src/main.c    ****   /* USER CODE BEGIN pcCOM */
 279:Src/main.c    ****   /* Infinite loop */
 280:Src/main.c    ****   for(;;)
 281:Src/main.c    ****   {
 282:Src/main.c    ****     osDelay(1);
 167              		.loc 1 282 0 discriminator 1
 168 0002 0120     		movs	r0, #1
 169 0004 FFF7FEFF 		bl	osDelay
 170              	.LVL8:
 171 0008 FBE7     		b	.L11
 172              		.cfi_endproc
 173              	.LFE134:
 175 000a 00BF     		.section	.text._Error_Handler,"ax",%progbits
 176              		.align	2
 177              		.global	_Error_Handler
 178              		.thumb
 179              		.thumb_func
 181              	_Error_Handler:
ARM GAS  /tmp/cc3KrvMq.s 			page 9


 182              	.LFB135:
 283:Src/main.c    ****   }
 284:Src/main.c    ****   /* USER CODE END pcCOM */
 285:Src/main.c    **** }
 286:Src/main.c    **** 
 287:Src/main.c    **** /**
 288:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 289:Src/main.c    ****   * @param  None
 290:Src/main.c    ****   * @retval None
 291:Src/main.c    ****   */
 292:Src/main.c    **** void _Error_Handler(char * file, int line)
 293:Src/main.c    **** {
 183              		.loc 1 293 0
 184              		.cfi_startproc
 185              		@ Volatile: function does not return.
 186              		@ args = 0, pretend = 0, frame = 0
 187              		@ frame_needed = 0, uses_anonymous_args = 0
 188              		@ link register save eliminated.
 189              	.LVL9:
 190              	.L14:
 191 0000 FEE7     		b	.L14
 192              		.cfi_endproc
 193              	.LFE135:
 195 0002 00BF     		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 196              		.align	2
 197              		.thumb
 198              		.thumb_func
 200              	MX_USART2_UART_Init:
 201              	.LFB131:
 210:Src/main.c    **** 
 202              		.loc 1 210 0
 203              		.cfi_startproc
 204              		@ args = 0, pretend = 0, frame = 0
 205              		@ frame_needed = 0, uses_anonymous_args = 0
 210:Src/main.c    **** 
 206              		.loc 1 210 0
 207 0000 08B5     		push	{r3, lr}
 208              	.LCFI5:
 209              		.cfi_def_cfa_offset 8
 210              		.cfi_offset 3, -8
 211              		.cfi_offset 14, -4
 212:Src/main.c    ****   huart2.Init.BaudRate = 38400;
 212              		.loc 1 212 0
 213 0002 0B48     		ldr	r0, .L18
 214 0004 0B4B     		ldr	r3, .L18+4
 215 0006 0360     		str	r3, [r0]
 213:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 216              		.loc 1 213 0
 217 0008 4FF41643 		mov	r3, #38400
 218 000c 4360     		str	r3, [r0, #4]
 214:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 219              		.loc 1 214 0
 220 000e 0023     		movs	r3, #0
 221 0010 C360     		str	r3, [r0, #12]
 215:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 222              		.loc 1 215 0
 223 0012 0361     		str	r3, [r0, #16]
ARM GAS  /tmp/cc3KrvMq.s 			page 10


 216:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 224              		.loc 1 216 0
 225 0014 0C22     		movs	r2, #12
 226 0016 4261     		str	r2, [r0, #20]
 217:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 227              		.loc 1 217 0
 228 0018 8361     		str	r3, [r0, #24]
 218:Src/main.c    ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 229              		.loc 1 218 0
 230 001a C361     		str	r3, [r0, #28]
 219:Src/main.c    ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 231              		.loc 1 219 0
 232 001c 0362     		str	r3, [r0, #32]
 220:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 233              		.loc 1 220 0
 234 001e 4362     		str	r3, [r0, #36]
 221:Src/main.c    ****   {
 235              		.loc 1 221 0
 236 0020 FFF7FEFF 		bl	HAL_UART_Init
 237              	.LVL10:
 238 0024 18B1     		cbz	r0, .L15
 223:Src/main.c    ****   }
 239              		.loc 1 223 0
 240 0026 DF21     		movs	r1, #223
 241 0028 0348     		ldr	r0, .L18+8
 242 002a FFF7FEFF 		bl	_Error_Handler
 243              	.LVL11:
 244              	.L15:
 245 002e 08BD     		pop	{r3, pc}
 246              	.L19:
 247              		.align	2
 248              	.L18:
 249 0030 00000000 		.word	huart2
 250 0034 00440040 		.word	1073759232
 251 0038 00000000 		.word	.LC4
 252              		.cfi_endproc
 253              	.LFE131:
 255              		.section	.text.SystemClock_Config,"ax",%progbits
 256              		.align	2
 257              		.global	SystemClock_Config
 258              		.thumb
 259              		.thumb_func
 261              	SystemClock_Config:
 262              	.LFB130:
 166:Src/main.c    **** 
 263              		.loc 1 166 0
 264              		.cfi_startproc
 265              		@ args = 0, pretend = 0, frame = 64
 266              		@ frame_needed = 0, uses_anonymous_args = 0
 267 0000 00B5     		push	{lr}
 268              	.LCFI6:
 269              		.cfi_def_cfa_offset 4
 270              		.cfi_offset 14, -4
 271 0002 91B0     		sub	sp, sp, #68
 272              	.LCFI7:
 273              		.cfi_def_cfa_offset 72
 173:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
ARM GAS  /tmp/cc3KrvMq.s 			page 11


 274              		.loc 1 173 0
 275 0004 0223     		movs	r3, #2
 276 0006 0693     		str	r3, [sp, #24]
 174:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 277              		.loc 1 174 0
 278 0008 0123     		movs	r3, #1
 279 000a 0A93     		str	r3, [sp, #40]
 175:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 280              		.loc 1 175 0
 281 000c 1023     		movs	r3, #16
 282 000e 0B93     		str	r3, [sp, #44]
 176:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 283              		.loc 1 176 0
 284 0010 0023     		movs	r3, #0
 285 0012 0D93     		str	r3, [sp, #52]
 177:Src/main.c    ****   {
 286              		.loc 1 177 0
 287 0014 06A8     		add	r0, sp, #24
 288 0016 FFF7FEFF 		bl	HAL_RCC_OscConfig
 289              	.LVL12:
 290 001a 18B1     		cbz	r0, .L21
 179:Src/main.c    ****   }
 291              		.loc 1 179 0
 292 001c B321     		movs	r1, #179
 293 001e 1348     		ldr	r0, .L24
 294 0020 FFF7FEFF 		bl	_Error_Handler
 295              	.LVL13:
 296              	.L21:
 184:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 297              		.loc 1 184 0
 298 0024 0F23     		movs	r3, #15
 299 0026 0193     		str	r3, [sp, #4]
 186:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 300              		.loc 1 186 0
 301 0028 0021     		movs	r1, #0
 302 002a 0291     		str	r1, [sp, #8]
 187:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 303              		.loc 1 187 0
 304 002c 0391     		str	r1, [sp, #12]
 188:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 305              		.loc 1 188 0
 306 002e 0491     		str	r1, [sp, #16]
 189:Src/main.c    **** 
 307              		.loc 1 189 0
 308 0030 0591     		str	r1, [sp, #20]
 191:Src/main.c    ****   {
 309              		.loc 1 191 0
 310 0032 01A8     		add	r0, sp, #4
 311 0034 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 312              	.LVL14:
 313 0038 18B1     		cbz	r0, .L22
 193:Src/main.c    ****   }
 314              		.loc 1 193 0
 315 003a C121     		movs	r1, #193
 316 003c 0B48     		ldr	r0, .L24
 317 003e FFF7FEFF 		bl	_Error_Handler
 318              	.LVL15:
ARM GAS  /tmp/cc3KrvMq.s 			page 12


 319              	.L22:
 198:Src/main.c    **** 
 320              		.loc 1 198 0
 321 0042 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 322              	.LVL16:
 323 0046 0A4B     		ldr	r3, .L24+4
 324 0048 A3FB0030 		umull	r3, r0, r3, r0
 325 004c 8009     		lsrs	r0, r0, #6
 326 004e FFF7FEFF 		bl	HAL_SYSTICK_Config
 327              	.LVL17:
 202:Src/main.c    **** 
 328              		.loc 1 202 0
 329 0052 0420     		movs	r0, #4
 330 0054 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 331              	.LVL18:
 205:Src/main.c    **** }
 332              		.loc 1 205 0
 333 0058 0022     		movs	r2, #0
 334 005a 0F21     		movs	r1, #15
 335 005c 4FF0FF30 		mov	r0, #-1
 336 0060 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 337              	.LVL19:
 206:Src/main.c    **** 
 338              		.loc 1 206 0
 339 0064 11B0     		add	sp, sp, #68
 340              	.LCFI8:
 341              		.cfi_def_cfa_offset 4
 342              		@ sp needed
 343 0066 5DF804FB 		ldr	pc, [sp], #4
 344              	.L25:
 345 006a 00BF     		.align	2
 346              	.L24:
 347 006c 00000000 		.word	.LC4
 348 0070 D34D6210 		.word	274877907
 349              		.cfi_endproc
 350              	.LFE130:
 352              		.section	.text.main,"ax",%progbits
 353              		.align	2
 354              		.global	main
 355              		.thumb
 356              		.thumb_func
 358              	main:
 359              	.LFB129:
  85:Src/main.c    **** 
 360              		.loc 1 85 0
 361              		.cfi_startproc
 362              		@ args = 0, pretend = 0, frame = 40
 363              		@ frame_needed = 0, uses_anonymous_args = 0
 364 0000 70B5     		push	{r4, r5, r6, lr}
 365              	.LCFI9:
 366              		.cfi_def_cfa_offset 16
 367              		.cfi_offset 4, -16
 368              		.cfi_offset 5, -12
 369              		.cfi_offset 6, -8
 370              		.cfi_offset 14, -4
 371 0002 8AB0     		sub	sp, sp, #40
 372              	.LCFI10:
ARM GAS  /tmp/cc3KrvMq.s 			page 13


 373              		.cfi_def_cfa_offset 56
  94:Src/main.c    **** 
 374              		.loc 1 94 0
 375 0004 FFF7FEFF 		bl	HAL_Init
 376              	.LVL20:
 101:Src/main.c    **** 
 377              		.loc 1 101 0
 378 0008 FFF7FEFF 		bl	SystemClock_Config
 379              	.LVL21:
 108:Src/main.c    ****   MX_USART2_UART_Init();
 380              		.loc 1 108 0
 381 000c FFF7FEFF 		bl	MX_GPIO_Init
 382              	.LVL22:
 109:Src/main.c    **** 
 383              		.loc 1 109 0
 384 0010 FFF7FEFF 		bl	MX_USART2_UART_Init
 385              	.LVL23:
 129:Src/main.c    ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 386              		.loc 1 129 0
 387 0014 0D4C     		ldr	r4, .L29
 388 0016 05AD     		add	r5, sp, #20
 389 0018 2646     		mov	r6, r4
 390 001a 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 391 001c 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 392 001e 3368     		ldr	r3, [r6]
 393 0020 2B60     		str	r3, [r5]
 130:Src/main.c    **** 
 394              		.loc 1 130 0
 395 0022 0021     		movs	r1, #0
 396 0024 05A8     		add	r0, sp, #20
 397 0026 FFF7FEFF 		bl	osThreadCreate
 398              	.LVL24:
 399 002a 094B     		ldr	r3, .L29+4
 400 002c 1860     		str	r0, [r3]
 133:Src/main.c    ****   pc_comHandle = osThreadCreate(osThread(pc_com), NULL);
 401              		.loc 1 133 0
 402 002e 6D46     		mov	r5, sp
 403 0030 1434     		adds	r4, r4, #20
 404 0032 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 405 0034 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 406 0036 2368     		ldr	r3, [r4]
 407 0038 2B60     		str	r3, [r5]
 134:Src/main.c    **** 
 408              		.loc 1 134 0
 409 003a 0021     		movs	r1, #0
 410 003c 6846     		mov	r0, sp
 411 003e FFF7FEFF 		bl	osThreadCreate
 412              	.LVL25:
 413 0042 044B     		ldr	r3, .L29+8
 414 0044 1860     		str	r0, [r3]
 146:Src/main.c    ****   
 415              		.loc 1 146 0
 416 0046 FFF7FEFF 		bl	osKernelStart
 417              	.LVL26:
 418              	.L27:
 419 004a FEE7     		b	.L27
 420              	.L30:
ARM GAS  /tmp/cc3KrvMq.s 			page 14


 421              		.align	2
 422              	.L29:
 423 004c 00000000 		.word	.LANCHOR0
 424 0050 00000000 		.word	defaultTaskHandle
 425 0054 00000000 		.word	pc_comHandle
 426              		.cfi_endproc
 427              	.LFE129:
 429              		.comm	pc_comHandle,4,4
 430              		.comm	defaultTaskHandle,4,4
 431              		.comm	huart2,112,4
 432              		.section	.rodata
 433              		.align	2
 434              		.set	.LANCHOR0,. + 0
 435              	.LC5:
 436 0000 14000000 		.word	.LC0
 437 0004 00000000 		.word	StartDefaultTask
 438 0008 0000     		.short	0
 439 000a 0000     		.space	2
 440 000c 00000000 		.word	0
 441 0010 80000000 		.word	128
 442              	.LC6:
 443 0014 0C000000 		.word	.LC2
 444 0018 00000000 		.word	pcCOM
 445 001c FDFF     		.short	-3
 446 001e 0000     		.space	2
 447 0020 00000000 		.word	0
 448 0024 00010000 		.word	256
 449              		.section	.rodata.str1.4,"aMS",%progbits,1
 450              		.align	2
 451              	.LC4:
 452 0000 5372632F 		.ascii	"Src/main.c\000"
 452      6D61696E 
 452      2E6300
 453 000b 00       		.space	1
 454              	.LC2:
 455 000c 70635F63 		.ascii	"pc_com\000"
 455      6F6D00
 456 0013 00       		.space	1
 457              	.LC0:
 458 0014 64656661 		.ascii	"defaultTask\000"
 458      756C7454 
 458      61736B00 
 459              		.text
 460              	.Letext0:
 461              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 462              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 463              		.file 4 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303x8.h"
 464              		.file 5 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
 465              		.file 6 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
 466              		.file 7 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_gpio.h"
 467              		.file 8 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
 468              		.file 9 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
 469              		.file 10 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 470              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 471              		.file 12 "Drivers/CMSIS/Include/core_cm4.h"
 472              		.file 13 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_cortex.h"
 473              		.file 14 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
ARM GAS  /tmp/cc3KrvMq.s 			page 15


ARM GAS  /tmp/cc3KrvMq.s 			page 16


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc3KrvMq.s:22     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cc3KrvMq.s:26     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cc3KrvMq.s:104    .text.MX_GPIO_Init:0000000000000064 $d
     /tmp/cc3KrvMq.s:110    .text.StartDefaultTask:0000000000000000 $t
     /tmp/cc3KrvMq.s:115    .text.StartDefaultTask:0000000000000000 StartDefaultTask
     /tmp/cc3KrvMq.s:143    .text.StartDefaultTask:0000000000000014 $d
     /tmp/cc3KrvMq.s:148    .text.pcCOM:0000000000000000 $t
     /tmp/cc3KrvMq.s:153    .text.pcCOM:0000000000000000 pcCOM
     /tmp/cc3KrvMq.s:176    .text._Error_Handler:0000000000000000 $t
     /tmp/cc3KrvMq.s:181    .text._Error_Handler:0000000000000000 _Error_Handler
     /tmp/cc3KrvMq.s:196    .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/cc3KrvMq.s:200    .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/cc3KrvMq.s:249    .text.MX_USART2_UART_Init:0000000000000030 $d
                            *COM*:0000000000000070 huart2
     /tmp/cc3KrvMq.s:256    .text.SystemClock_Config:0000000000000000 $t
     /tmp/cc3KrvMq.s:261    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/cc3KrvMq.s:347    .text.SystemClock_Config:000000000000006c $d
     /tmp/cc3KrvMq.s:353    .text.main:0000000000000000 $t
     /tmp/cc3KrvMq.s:358    .text.main:0000000000000000 main
     /tmp/cc3KrvMq.s:423    .text.main:000000000000004c $d
                            *COM*:0000000000000004 defaultTaskHandle
                            *COM*:0000000000000004 pc_comHandle
     /tmp/cc3KrvMq.s:433    .rodata:0000000000000000 $d
     /tmp/cc3KrvMq.s:450    .rodata.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_GPIO_TogglePin
osDelay
HAL_UART_Init
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
osThreadCreate
osKernelStart
