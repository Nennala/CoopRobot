ARM GAS  /tmp/ccFwl8jH.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"main.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.MX_GPIO_Init,"ax",%progbits
  22              		.align	2
  23              		.thumb
  24              		.thumb_func
  26              	MX_GPIO_Init:
  27              	.LFB132:
  28              		.file 1 "Src/main.c"
   1:Src/main.c    **** /**
   2:Src/main.c    ****   ******************************************************************************
   3:Src/main.c    ****   * File Name          : main.c
   4:Src/main.c    ****   * Description        : Main program body
   5:Src/main.c    ****   ******************************************************************************
   6:Src/main.c    ****   * This notice applies to any and all portions of this file
   7:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   8:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
   9:Src/main.c    ****   * inserted by the user or by software development tools
  10:Src/main.c    ****   * are owned by their respective copyright owners.
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * Copyright (c) 2017 STMicroelectronics International N.V. 
  13:Src/main.c    ****   * All rights reserved.
  14:Src/main.c    ****   *
  15:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without 
  16:Src/main.c    ****   * modification, are permitted, provided that the following conditions are met:
  17:Src/main.c    ****   *
  18:Src/main.c    ****   * 1. Redistribution of source code must retain the above copyright notice, 
  19:Src/main.c    ****   *    this list of conditions and the following disclaimer.
  20:Src/main.c    ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  21:Src/main.c    ****   *    this list of conditions and the following disclaimer in the documentation
  22:Src/main.c    ****   *    and/or other materials provided with the distribution.
  23:Src/main.c    ****   * 3. Neither the name of STMicroelectronics nor the names of other 
  24:Src/main.c    ****   *    contributors to this software may be used to endorse or promote products 
  25:Src/main.c    ****   *    derived from this software without specific written permission.
  26:Src/main.c    ****   * 4. This software, including modifications and/or derivative works of this 
  27:Src/main.c    ****   *    software, must execute solely and exclusively on microcontroller or
  28:Src/main.c    ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  29:Src/main.c    ****   * 5. Redistribution and use of this software other than as permitted under 
  30:Src/main.c    ****   *    this license is void and will automatically terminate your rights under 
ARM GAS  /tmp/ccFwl8jH.s 			page 2


  31:Src/main.c    ****   *    this license. 
  32:Src/main.c    ****   *
  33:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  34:Src/main.c    ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  35:Src/main.c    ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  36:Src/main.c    ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  37:Src/main.c    ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  38:Src/main.c    ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  39:Src/main.c    ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  40:Src/main.c    ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  41:Src/main.c    ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  42:Src/main.c    ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  43:Src/main.c    ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  44:Src/main.c    ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  45:Src/main.c    ****   *
  46:Src/main.c    ****   ******************************************************************************
  47:Src/main.c    ****   */
  48:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  49:Src/main.c    **** #include "main.h"
  50:Src/main.c    **** #include "stm32f3xx_hal.h"
  51:Src/main.c    **** #include "cmsis_os.h"
  52:Src/main.c    **** 
  53:Src/main.c    **** /* USER CODE BEGIN Includes */
  54:Src/main.c    **** 
  55:Src/main.c    **** /* USER CODE END Includes */
  56:Src/main.c    **** 
  57:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  58:Src/main.c    **** TIM_HandleTypeDef htim3;
  59:Src/main.c    **** 
  60:Src/main.c    **** osThreadId defaultTaskHandle;
  61:Src/main.c    **** osThreadId motor_cmdHandle;
  62:Src/main.c    **** 
  63:Src/main.c    **** /* USER CODE BEGIN PV */
  64:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  65:Src/main.c    **** 
  66:Src/main.c    **** /* USER CODE END PV */
  67:Src/main.c    **** 
  68:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  69:Src/main.c    **** void SystemClock_Config(void);
  70:Src/main.c    **** static void MX_GPIO_Init(void);
  71:Src/main.c    **** static void MX_TIM3_Init(void);
  72:Src/main.c    **** void StartDefaultTask(void const * argument);
  73:Src/main.c    **** void motor(void const * argument);                                    
  74:Src/main.c    **** void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
  75:Src/main.c    ****                                 
  76:Src/main.c    **** 
  77:Src/main.c    **** /* USER CODE BEGIN PFP */
  78:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  79:Src/main.c    **** 
  80:Src/main.c    **** /* USER CODE END PFP */
  81:Src/main.c    **** 
  82:Src/main.c    **** /* USER CODE BEGIN 0 */
  83:Src/main.c    **** 
  84:Src/main.c    **** /* USER CODE END 0 */
  85:Src/main.c    **** 
  86:Src/main.c    **** int main(void)
  87:Src/main.c    **** {
ARM GAS  /tmp/ccFwl8jH.s 			page 3


  88:Src/main.c    **** 
  89:Src/main.c    ****   /* USER CODE BEGIN 1 */
  90:Src/main.c    **** 
  91:Src/main.c    ****   /* USER CODE END 1 */
  92:Src/main.c    **** 
  93:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
  94:Src/main.c    **** 
  95:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  96:Src/main.c    ****   HAL_Init();
  97:Src/main.c    **** 
  98:Src/main.c    ****   /* USER CODE BEGIN Init */
  99:Src/main.c    **** 
 100:Src/main.c    ****   /* USER CODE END Init */
 101:Src/main.c    **** 
 102:Src/main.c    ****   /* Configure the system clock */
 103:Src/main.c    ****   SystemClock_Config();
 104:Src/main.c    **** 
 105:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 106:Src/main.c    **** 
 107:Src/main.c    ****   /* USER CODE END SysInit */
 108:Src/main.c    **** 
 109:Src/main.c    ****   /* Initialize all configured peripherals */
 110:Src/main.c    ****   MX_GPIO_Init();
 111:Src/main.c    ****   MX_TIM3_Init();
 112:Src/main.c    **** 
 113:Src/main.c    ****   /* USER CODE BEGIN 2 */
 114:Src/main.c    **** 
 115:Src/main.c    ****   /* USER CODE END 2 */
 116:Src/main.c    **** 
 117:Src/main.c    ****   /* USER CODE BEGIN RTOS_MUTEX */
 118:Src/main.c    ****   /* add mutexes, ... */
 119:Src/main.c    ****   /* USER CODE END RTOS_MUTEX */
 120:Src/main.c    **** 
 121:Src/main.c    ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 122:Src/main.c    ****   /* add semaphores, ... */
 123:Src/main.c    ****   /* USER CODE END RTOS_SEMAPHORES */
 124:Src/main.c    **** 
 125:Src/main.c    ****   /* USER CODE BEGIN RTOS_TIMERS */
 126:Src/main.c    ****   /* start timers, add new ones, ... */
 127:Src/main.c    ****   /* USER CODE END RTOS_TIMERS */
 128:Src/main.c    **** 
 129:Src/main.c    ****   /* Create the thread(s) */
 130:Src/main.c    ****   /* definition and creation of defaultTask */
 131:Src/main.c    ****   osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 132:Src/main.c    ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 133:Src/main.c    **** 
 134:Src/main.c    ****   /* definition and creation of motor_cmd */
 135:Src/main.c    ****   osThreadDef(motor_cmd, motor, osPriorityIdle, 0, 256);
 136:Src/main.c    ****   motor_cmdHandle = osThreadCreate(osThread(motor_cmd), NULL);
 137:Src/main.c    **** 
 138:Src/main.c    ****   /* USER CODE BEGIN RTOS_THREADS */
 139:Src/main.c    ****   /* add threads, ... */
 140:Src/main.c    ****   /* USER CODE END RTOS_THREADS */
 141:Src/main.c    **** 
 142:Src/main.c    ****   /* USER CODE BEGIN RTOS_QUEUES */
 143:Src/main.c    ****   /* add queues, ... */
 144:Src/main.c    ****   /* USER CODE END RTOS_QUEUES */
ARM GAS  /tmp/ccFwl8jH.s 			page 4


 145:Src/main.c    ****  
 146:Src/main.c    **** 
 147:Src/main.c    ****   /* Start scheduler */
 148:Src/main.c    ****   osKernelStart();
 149:Src/main.c    ****   
 150:Src/main.c    ****   /* We should never get here as control is now taken by the scheduler */
 151:Src/main.c    **** 
 152:Src/main.c    ****   /* Infinite loop */
 153:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 154:Src/main.c    ****   while (1)
 155:Src/main.c    ****   {
 156:Src/main.c    ****   /* USER CODE END WHILE */
 157:Src/main.c    **** 
 158:Src/main.c    ****   /* USER CODE BEGIN 3 */
 159:Src/main.c    **** 
 160:Src/main.c    ****   }
 161:Src/main.c    ****   /* USER CODE END 3 */
 162:Src/main.c    **** 
 163:Src/main.c    **** }
 164:Src/main.c    **** 
 165:Src/main.c    **** /** System Clock Configuration
 166:Src/main.c    **** */
 167:Src/main.c    **** void SystemClock_Config(void)
 168:Src/main.c    **** {
 169:Src/main.c    **** 
 170:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 171:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 172:Src/main.c    **** 
 173:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 174:Src/main.c    ****     */
 175:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 176:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 177:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 178:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 179:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 180:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 181:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 182:Src/main.c    ****   {
 183:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 184:Src/main.c    ****   }
 185:Src/main.c    **** 
 186:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 187:Src/main.c    ****     */
 188:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 189:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 190:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 191:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 192:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 193:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 194:Src/main.c    **** 
 195:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 196:Src/main.c    ****   {
 197:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 198:Src/main.c    ****   }
 199:Src/main.c    **** 
 200:Src/main.c    ****     /**Configure the Systick interrupt time 
 201:Src/main.c    ****     */
ARM GAS  /tmp/ccFwl8jH.s 			page 5


 202:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 203:Src/main.c    **** 
 204:Src/main.c    ****     /**Configure the Systick 
 205:Src/main.c    ****     */
 206:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 207:Src/main.c    **** 
 208:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 209:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 210:Src/main.c    **** }
 211:Src/main.c    **** 
 212:Src/main.c    **** /* TIM3 init function */
 213:Src/main.c    **** static void MX_TIM3_Init(void)
 214:Src/main.c    **** {
 215:Src/main.c    **** 
 216:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig;
 217:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC;
 218:Src/main.c    **** 
 219:Src/main.c    ****   htim3.Instance = TIM3;
 220:Src/main.c    ****   htim3.Init.Prescaler = 999;
 221:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 222:Src/main.c    ****   htim3.Init.Period = 639;
 223:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 224:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 225:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 226:Src/main.c    ****   {
 227:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 228:Src/main.c    ****   }
 229:Src/main.c    **** 
 230:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 231:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 232:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 233:Src/main.c    ****   {
 234:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 235:Src/main.c    ****   }
 236:Src/main.c    **** 
 237:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 238:Src/main.c    ****   sConfigOC.Pulse = 319;
 239:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 240:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 241:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 242:Src/main.c    ****   {
 243:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 244:Src/main.c    ****   }
 245:Src/main.c    **** 
 246:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 247:Src/main.c    ****   {
 248:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 249:Src/main.c    ****   }
 250:Src/main.c    **** 
 251:Src/main.c    ****   HAL_TIM_MspPostInit(&htim3);
 252:Src/main.c    **** 
 253:Src/main.c    **** }
 254:Src/main.c    **** 
 255:Src/main.c    **** /** Configure pins as 
 256:Src/main.c    ****         * Analog 
 257:Src/main.c    ****         * Input 
 258:Src/main.c    ****         * Output
ARM GAS  /tmp/ccFwl8jH.s 			page 6


 259:Src/main.c    ****         * EVENT_OUT
 260:Src/main.c    ****         * EXTI
 261:Src/main.c    ****      PA2   ------> USART2_TX
 262:Src/main.c    ****      PA15   ------> USART2_RX
 263:Src/main.c    **** */
 264:Src/main.c    **** static void MX_GPIO_Init(void)
 265:Src/main.c    **** {
  29              		.loc 1 265 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 32
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 24
  36              		.cfi_offset 4, -24
  37              		.cfi_offset 5, -20
  38              		.cfi_offset 6, -16
  39              		.cfi_offset 7, -12
  40              		.cfi_offset 8, -8
  41              		.cfi_offset 14, -4
  42 0004 88B0     		sub	sp, sp, #32
  43              	.LCFI1:
  44              		.cfi_def_cfa_offset 56
  45              	.LBB2:
 266:Src/main.c    **** 
 267:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct;
 268:Src/main.c    **** 
 269:Src/main.c    ****   /* GPIO Ports Clock Enable */
 270:Src/main.c    ****   __HAL_RCC_GPIOF_CLK_ENABLE();
  46              		.loc 1 270 0
  47 0006 304B     		ldr	r3, .L3
  48 0008 5A69     		ldr	r2, [r3, #20]
  49 000a 42F48002 		orr	r2, r2, #4194304
  50 000e 5A61     		str	r2, [r3, #20]
  51 0010 5A69     		ldr	r2, [r3, #20]
  52 0012 02F48002 		and	r2, r2, #4194304
  53 0016 0092     		str	r2, [sp]
  54 0018 009A     		ldr	r2, [sp]
  55              	.LBE2:
  56              	.LBB3:
 271:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  57              		.loc 1 271 0
  58 001a 5A69     		ldr	r2, [r3, #20]
  59 001c 42F40032 		orr	r2, r2, #131072
  60 0020 5A61     		str	r2, [r3, #20]
  61 0022 5A69     		ldr	r2, [r3, #20]
  62 0024 02F40032 		and	r2, r2, #131072
  63 0028 0192     		str	r2, [sp, #4]
  64 002a 019A     		ldr	r2, [sp, #4]
  65              	.LBE3:
  66              	.LBB4:
 272:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  67              		.loc 1 272 0
  68 002c 5A69     		ldr	r2, [r3, #20]
  69 002e 42F48022 		orr	r2, r2, #262144
  70 0032 5A61     		str	r2, [r3, #20]
  71 0034 5B69     		ldr	r3, [r3, #20]
ARM GAS  /tmp/ccFwl8jH.s 			page 7


  72 0036 03F48023 		and	r3, r3, #262144
  73 003a 0293     		str	r3, [sp, #8]
  74 003c 029B     		ldr	r3, [sp, #8]
  75              	.LBE4:
 273:Src/main.c    **** 
 274:Src/main.c    ****   /*Configure GPIO pin Output Level */
 275:Src/main.c    ****   HAL_GPIO_WritePin(GPIOF, ain2_Pin|ain1_Pin, GPIO_PIN_RESET);
  76              		.loc 1 275 0
  77 003e DFF89080 		ldr	r8, .L3+8
  78 0042 0022     		movs	r2, #0
  79 0044 0321     		movs	r1, #3
  80 0046 4046     		mov	r0, r8
  81 0048 FFF7FEFF 		bl	HAL_GPIO_WritePin
  82              	.LVL0:
 276:Src/main.c    **** 
 277:Src/main.c    ****   /*Configure GPIO pin Output Level */
 278:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, stby_Pin|bin1_Pin, GPIO_PIN_RESET);
  83              		.loc 1 278 0
  84 004c 0022     		movs	r2, #0
  85 004e 4FF41061 		mov	r1, #2304
  86 0052 4FF09040 		mov	r0, #1207959552
  87 0056 FFF7FEFF 		bl	HAL_GPIO_WritePin
  88              	.LVL1:
 279:Src/main.c    **** 
 280:Src/main.c    ****   /*Configure GPIO pin Output Level */
 281:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, led_Pin|bin2_Pin, GPIO_PIN_RESET);
  89              		.loc 1 281 0
  90 005a 1C4E     		ldr	r6, .L3+4
  91 005c 0022     		movs	r2, #0
  92 005e 2821     		movs	r1, #40
  93 0060 3046     		mov	r0, r6
  94 0062 FFF7FEFF 		bl	HAL_GPIO_WritePin
  95              	.LVL2:
 282:Src/main.c    **** 
 283:Src/main.c    ****   /*Configure GPIO pins : ain2_Pin ain1_Pin */
 284:Src/main.c    ****   GPIO_InitStruct.Pin = ain2_Pin|ain1_Pin;
  96              		.loc 1 284 0
  97 0066 0327     		movs	r7, #3
  98 0068 0397     		str	r7, [sp, #12]
 285:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  99              		.loc 1 285 0
 100 006a 0125     		movs	r5, #1
 101 006c 0495     		str	r5, [sp, #16]
 286:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 102              		.loc 1 286 0
 103 006e 0024     		movs	r4, #0
 104 0070 0594     		str	r4, [sp, #20]
 287:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 105              		.loc 1 287 0
 106 0072 0694     		str	r4, [sp, #24]
 288:Src/main.c    ****   HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 107              		.loc 1 288 0
 108 0074 03A9     		add	r1, sp, #12
 109 0076 4046     		mov	r0, r8
 110 0078 FFF7FEFF 		bl	HAL_GPIO_Init
 111              	.LVL3:
 289:Src/main.c    **** 
ARM GAS  /tmp/ccFwl8jH.s 			page 8


 290:Src/main.c    ****   /*Configure GPIO pins : VCP_TX_Pin VCP_RX_Pin */
 291:Src/main.c    ****   GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 112              		.loc 1 291 0
 113 007c 48F20403 		movw	r3, #32772
 114 0080 0393     		str	r3, [sp, #12]
 292:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 115              		.loc 1 292 0
 116 0082 0223     		movs	r3, #2
 117 0084 0493     		str	r3, [sp, #16]
 293:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 118              		.loc 1 293 0
 119 0086 0594     		str	r4, [sp, #20]
 294:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 120              		.loc 1 294 0
 121 0088 0697     		str	r7, [sp, #24]
 295:Src/main.c    ****   GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 122              		.loc 1 295 0
 123 008a 0723     		movs	r3, #7
 124 008c 0793     		str	r3, [sp, #28]
 296:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 125              		.loc 1 296 0
 126 008e 03A9     		add	r1, sp, #12
 127 0090 4FF09040 		mov	r0, #1207959552
 128 0094 FFF7FEFF 		bl	HAL_GPIO_Init
 129              	.LVL4:
 297:Src/main.c    **** 
 298:Src/main.c    ****   /*Configure GPIO pins : stby_Pin bin1_Pin */
 299:Src/main.c    ****   GPIO_InitStruct.Pin = stby_Pin|bin1_Pin;
 130              		.loc 1 299 0
 131 0098 4FF41063 		mov	r3, #2304
 132 009c 0393     		str	r3, [sp, #12]
 300:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 133              		.loc 1 300 0
 134 009e 0495     		str	r5, [sp, #16]
 301:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 135              		.loc 1 301 0
 136 00a0 0594     		str	r4, [sp, #20]
 302:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 137              		.loc 1 302 0
 138 00a2 0694     		str	r4, [sp, #24]
 303:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 139              		.loc 1 303 0
 140 00a4 03A9     		add	r1, sp, #12
 141 00a6 4FF09040 		mov	r0, #1207959552
 142 00aa FFF7FEFF 		bl	HAL_GPIO_Init
 143              	.LVL5:
 304:Src/main.c    **** 
 305:Src/main.c    ****   /*Configure GPIO pins : led_Pin bin2_Pin */
 306:Src/main.c    ****   GPIO_InitStruct.Pin = led_Pin|bin2_Pin;
 144              		.loc 1 306 0
 145 00ae 2823     		movs	r3, #40
 146 00b0 0393     		str	r3, [sp, #12]
 307:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 147              		.loc 1 307 0
 148 00b2 0495     		str	r5, [sp, #16]
 308:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 149              		.loc 1 308 0
ARM GAS  /tmp/ccFwl8jH.s 			page 9


 150 00b4 0594     		str	r4, [sp, #20]
 309:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 151              		.loc 1 309 0
 152 00b6 0694     		str	r4, [sp, #24]
 310:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 153              		.loc 1 310 0
 154 00b8 03A9     		add	r1, sp, #12
 155 00ba 3046     		mov	r0, r6
 156 00bc FFF7FEFF 		bl	HAL_GPIO_Init
 157              	.LVL6:
 311:Src/main.c    **** 
 312:Src/main.c    **** }
 158              		.loc 1 312 0
 159 00c0 08B0     		add	sp, sp, #32
 160              	.LCFI2:
 161              		.cfi_def_cfa_offset 24
 162              		@ sp needed
 163 00c2 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 164              	.L4:
 165 00c6 00BF     		.align	2
 166              	.L3:
 167 00c8 00100240 		.word	1073876992
 168 00cc 00040048 		.word	1207960576
 169 00d0 00140048 		.word	1207964672
 170              		.cfi_endproc
 171              	.LFE132:
 173              		.section	.text.StartDefaultTask,"ax",%progbits
 174              		.align	2
 175              		.global	StartDefaultTask
 176              		.thumb
 177              		.thumb_func
 179              	StartDefaultTask:
 180              	.LFB133:
 313:Src/main.c    **** 
 314:Src/main.c    **** /* USER CODE BEGIN 4 */
 315:Src/main.c    **** 
 316:Src/main.c    **** /* USER CODE END 4 */
 317:Src/main.c    **** 
 318:Src/main.c    **** /* StartDefaultTask function */
 319:Src/main.c    **** void StartDefaultTask(void const * argument)
 320:Src/main.c    **** {
 181              		.loc 1 320 0
 182              		.cfi_startproc
 183              		@ Volatile: function does not return.
 184              		@ args = 0, pretend = 0, frame = 0
 185              		@ frame_needed = 0, uses_anonymous_args = 0
 186              	.LVL7:
 187 0000 08B5     		push	{r3, lr}
 188              	.LCFI3:
 189              		.cfi_def_cfa_offset 8
 190              		.cfi_offset 3, -8
 191              		.cfi_offset 14, -4
 192              	.LVL8:
 193              	.L6:
 321:Src/main.c    **** 
 322:Src/main.c    ****   /* USER CODE BEGIN 5 */
 323:Src/main.c    ****   /* Infinite loop */
ARM GAS  /tmp/ccFwl8jH.s 			page 10


 324:Src/main.c    ****   for(;;)
 325:Src/main.c    ****   {
 326:Src/main.c    ****     HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 194              		.loc 1 326 0 discriminator 1
 195 0002 0821     		movs	r1, #8
 196 0004 0348     		ldr	r0, .L8
 197 0006 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 198              	.LVL9:
 327:Src/main.c    ****     osDelay(1000);
 199              		.loc 1 327 0 discriminator 1
 200 000a 4FF47A70 		mov	r0, #1000
 201 000e FFF7FEFF 		bl	osDelay
 202              	.LVL10:
 203 0012 F6E7     		b	.L6
 204              	.L9:
 205              		.align	2
 206              	.L8:
 207 0014 00040048 		.word	1207960576
 208              		.cfi_endproc
 209              	.LFE133:
 211              		.section	.text.motor,"ax",%progbits
 212              		.align	2
 213              		.weak	motor
 214              		.thumb
 215              		.thumb_func
 217              	motor:
 218              	.LFB134:
 328:Src/main.c    ****   }
 329:Src/main.c    ****   /* USER CODE END 5 */ 
 330:Src/main.c    **** }
 331:Src/main.c    **** 
 332:Src/main.c    **** /* motor function */
 333:Src/main.c    **** __weak void motor(void const * argument)
 334:Src/main.c    **** {
 219              		.loc 1 334 0
 220              		.cfi_startproc
 221              		@ args = 0, pretend = 0, frame = 0
 222              		@ frame_needed = 0, uses_anonymous_args = 0
 223              	.LVL11:
 224 0000 08B5     		push	{r3, lr}
 225              	.LCFI4:
 226              		.cfi_def_cfa_offset 8
 227              		.cfi_offset 3, -8
 228              		.cfi_offset 14, -4
 229              	.LVL12:
 230              	.L11:
 335:Src/main.c    ****   /* USER CODE BEGIN motor */
 336:Src/main.c    ****   /* Infinite loop */
 337:Src/main.c    ****   for(;;)
 338:Src/main.c    ****   {
 339:Src/main.c    ****     osDelay(1);
 231              		.loc 1 339 0 discriminator 1
 232 0002 0120     		movs	r0, #1
 233 0004 FFF7FEFF 		bl	osDelay
 234              	.LVL13:
 235 0008 FBE7     		b	.L11
 236              		.cfi_endproc
ARM GAS  /tmp/ccFwl8jH.s 			page 11


 237              	.LFE134:
 239 000a 00BF     		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 240              		.align	2
 241              		.global	HAL_TIM_PeriodElapsedCallback
 242              		.thumb
 243              		.thumb_func
 245              	HAL_TIM_PeriodElapsedCallback:
 246              	.LFB135:
 340:Src/main.c    ****   }
 341:Src/main.c    ****   /* USER CODE END motor */
 342:Src/main.c    **** }
 343:Src/main.c    **** 
 344:Src/main.c    **** /**
 345:Src/main.c    ****   * @brief  Period elapsed callback in non blocking mode
 346:Src/main.c    ****   * @note   This function is called  when TIM15 interrupt took place, inside
 347:Src/main.c    ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 348:Src/main.c    ****   * a global variable "uwTick" used as application time base.
 349:Src/main.c    ****   * @param  htim : TIM handle
 350:Src/main.c    ****   * @retval None
 351:Src/main.c    ****   */
 352:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 353:Src/main.c    **** {
 247              		.loc 1 353 0
 248              		.cfi_startproc
 249              		@ args = 0, pretend = 0, frame = 0
 250              		@ frame_needed = 0, uses_anonymous_args = 0
 251              	.LVL14:
 252 0000 08B5     		push	{r3, lr}
 253              	.LCFI5:
 254              		.cfi_def_cfa_offset 8
 255              		.cfi_offset 3, -8
 256              		.cfi_offset 14, -4
 354:Src/main.c    **** /* USER CODE BEGIN Callback 0 */
 355:Src/main.c    **** 
 356:Src/main.c    **** /* USER CODE END Callback 0 */
 357:Src/main.c    ****   if (htim->Instance == TIM15) {
 257              		.loc 1 357 0
 258 0002 0268     		ldr	r2, [r0]
 259 0004 024B     		ldr	r3, .L16
 260 0006 9A42     		cmp	r2, r3
 261 0008 01D1     		bne	.L13
 358:Src/main.c    ****     HAL_IncTick();
 262              		.loc 1 358 0
 263 000a FFF7FEFF 		bl	HAL_IncTick
 264              	.LVL15:
 265              	.L13:
 266 000e 08BD     		pop	{r3, pc}
 267              	.L17:
 268              		.align	2
 269              	.L16:
 270 0010 00400140 		.word	1073823744
 271              		.cfi_endproc
 272              	.LFE135:
 274              		.section	.text._Error_Handler,"ax",%progbits
 275              		.align	2
 276              		.global	_Error_Handler
 277              		.thumb
ARM GAS  /tmp/ccFwl8jH.s 			page 12


 278              		.thumb_func
 280              	_Error_Handler:
 281              	.LFB136:
 359:Src/main.c    ****   }
 360:Src/main.c    **** /* USER CODE BEGIN Callback 1 */
 361:Src/main.c    **** 
 362:Src/main.c    **** /* USER CODE END Callback 1 */
 363:Src/main.c    **** }
 364:Src/main.c    **** 
 365:Src/main.c    **** /**
 366:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 367:Src/main.c    ****   * @param  None
 368:Src/main.c    ****   * @retval None
 369:Src/main.c    ****   */
 370:Src/main.c    **** void _Error_Handler(char * file, int line)
 371:Src/main.c    **** {
 282              		.loc 1 371 0
 283              		.cfi_startproc
 284              		@ Volatile: function does not return.
 285              		@ args = 0, pretend = 0, frame = 0
 286              		@ frame_needed = 0, uses_anonymous_args = 0
 287              		@ link register save eliminated.
 288              	.LVL16:
 289              	.L19:
 290 0000 FEE7     		b	.L19
 291              		.cfi_endproc
 292              	.LFE136:
 294 0002 00BF     		.section	.text.MX_TIM3_Init,"ax",%progbits
 295              		.align	2
 296              		.thumb
 297              		.thumb_func
 299              	MX_TIM3_Init:
 300              	.LFB131:
 214:Src/main.c    **** 
 301              		.loc 1 214 0
 302              		.cfi_startproc
 303              		@ args = 0, pretend = 0, frame = 40
 304              		@ frame_needed = 0, uses_anonymous_args = 0
 214:Src/main.c    **** 
 305              		.loc 1 214 0
 306 0000 00B5     		push	{lr}
 307              	.LCFI6:
 308              		.cfi_def_cfa_offset 4
 309              		.cfi_offset 14, -4
 310 0002 8BB0     		sub	sp, sp, #44
 311              	.LCFI7:
 312              		.cfi_def_cfa_offset 48
 219:Src/main.c    ****   htim3.Init.Prescaler = 999;
 313              		.loc 1 219 0
 314 0004 2048     		ldr	r0, .L26
 315 0006 214B     		ldr	r3, .L26+4
 316 0008 0360     		str	r3, [r0]
 220:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 317              		.loc 1 220 0
 318 000a 40F2E733 		movw	r3, #999
 319 000e 4360     		str	r3, [r0, #4]
 221:Src/main.c    ****   htim3.Init.Period = 639;
ARM GAS  /tmp/ccFwl8jH.s 			page 13


 320              		.loc 1 221 0
 321 0010 0023     		movs	r3, #0
 322 0012 8360     		str	r3, [r0, #8]
 222:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 323              		.loc 1 222 0
 324 0014 40F27F22 		movw	r2, #639
 325 0018 C260     		str	r2, [r0, #12]
 223:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 326              		.loc 1 223 0
 327 001a 0361     		str	r3, [r0, #16]
 224:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 328              		.loc 1 224 0
 329 001c 8361     		str	r3, [r0, #24]
 225:Src/main.c    ****   {
 330              		.loc 1 225 0
 331 001e FFF7FEFF 		bl	HAL_TIM_PWM_Init
 332              	.LVL17:
 333 0022 18B1     		cbz	r0, .L21
 227:Src/main.c    ****   }
 334              		.loc 1 227 0
 335 0024 E321     		movs	r1, #227
 336 0026 1A48     		ldr	r0, .L26+8
 337 0028 FFF7FEFF 		bl	_Error_Handler
 338              	.LVL18:
 339              	.L21:
 230:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 340              		.loc 1 230 0
 341 002c 0023     		movs	r3, #0
 342 002e 0793     		str	r3, [sp, #28]
 231:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 343              		.loc 1 231 0
 344 0030 0993     		str	r3, [sp, #36]
 232:Src/main.c    ****   {
 345              		.loc 1 232 0
 346 0032 07A9     		add	r1, sp, #28
 347 0034 1448     		ldr	r0, .L26
 348 0036 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 349              	.LVL19:
 350 003a 18B1     		cbz	r0, .L22
 234:Src/main.c    ****   }
 351              		.loc 1 234 0
 352 003c EA21     		movs	r1, #234
 353 003e 1448     		ldr	r0, .L26+8
 354 0040 FFF7FEFF 		bl	_Error_Handler
 355              	.LVL20:
 356              	.L22:
 237:Src/main.c    ****   sConfigOC.Pulse = 319;
 357              		.loc 1 237 0
 358 0044 6023     		movs	r3, #96
 359 0046 0093     		str	r3, [sp]
 238:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 360              		.loc 1 238 0
 361 0048 40F23F13 		movw	r3, #319
 362 004c 0193     		str	r3, [sp, #4]
 239:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 363              		.loc 1 239 0
 364 004e 0022     		movs	r2, #0
ARM GAS  /tmp/ccFwl8jH.s 			page 14


 365 0050 0292     		str	r2, [sp, #8]
 240:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 366              		.loc 1 240 0
 367 0052 0492     		str	r2, [sp, #16]
 241:Src/main.c    ****   {
 368              		.loc 1 241 0
 369 0054 6946     		mov	r1, sp
 370 0056 0C48     		ldr	r0, .L26
 371 0058 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 372              	.LVL21:
 373 005c 18B1     		cbz	r0, .L23
 243:Src/main.c    ****   }
 374              		.loc 1 243 0
 375 005e F321     		movs	r1, #243
 376 0060 0B48     		ldr	r0, .L26+8
 377 0062 FFF7FEFF 		bl	_Error_Handler
 378              	.LVL22:
 379              	.L23:
 246:Src/main.c    ****   {
 380              		.loc 1 246 0
 381 0066 0C22     		movs	r2, #12
 382 0068 6946     		mov	r1, sp
 383 006a 0748     		ldr	r0, .L26
 384 006c FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 385              	.LVL23:
 386 0070 18B1     		cbz	r0, .L24
 248:Src/main.c    ****   }
 387              		.loc 1 248 0
 388 0072 F821     		movs	r1, #248
 389 0074 0648     		ldr	r0, .L26+8
 390 0076 FFF7FEFF 		bl	_Error_Handler
 391              	.LVL24:
 392              	.L24:
 251:Src/main.c    **** 
 393              		.loc 1 251 0
 394 007a 0348     		ldr	r0, .L26
 395 007c FFF7FEFF 		bl	HAL_TIM_MspPostInit
 396              	.LVL25:
 253:Src/main.c    **** 
 397              		.loc 1 253 0
 398 0080 0BB0     		add	sp, sp, #44
 399              	.LCFI8:
 400              		.cfi_def_cfa_offset 4
 401              		@ sp needed
 402 0082 5DF804FB 		ldr	pc, [sp], #4
 403              	.L27:
 404 0086 00BF     		.align	2
 405              	.L26:
 406 0088 00000000 		.word	htim3
 407 008c 00040040 		.word	1073742848
 408 0090 00000000 		.word	.LC4
 409              		.cfi_endproc
 410              	.LFE131:
 412              		.section	.text.SystemClock_Config,"ax",%progbits
 413              		.align	2
 414              		.global	SystemClock_Config
 415              		.thumb
ARM GAS  /tmp/ccFwl8jH.s 			page 15


 416              		.thumb_func
 418              	SystemClock_Config:
 419              	.LFB130:
 168:Src/main.c    **** 
 420              		.loc 1 168 0
 421              		.cfi_startproc
 422              		@ args = 0, pretend = 0, frame = 64
 423              		@ frame_needed = 0, uses_anonymous_args = 0
 424 0000 00B5     		push	{lr}
 425              	.LCFI9:
 426              		.cfi_def_cfa_offset 4
 427              		.cfi_offset 14, -4
 428 0002 91B0     		sub	sp, sp, #68
 429              	.LCFI10:
 430              		.cfi_def_cfa_offset 72
 175:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 431              		.loc 1 175 0
 432 0004 0223     		movs	r3, #2
 433 0006 0693     		str	r3, [sp, #24]
 176:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 434              		.loc 1 176 0
 435 0008 0122     		movs	r2, #1
 436 000a 0A92     		str	r2, [sp, #40]
 177:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 437              		.loc 1 177 0
 438 000c 1022     		movs	r2, #16
 439 000e 0B92     		str	r2, [sp, #44]
 178:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 440              		.loc 1 178 0
 441 0010 0D93     		str	r3, [sp, #52]
 179:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 442              		.loc 1 179 0
 443 0012 0023     		movs	r3, #0
 444 0014 0E93     		str	r3, [sp, #56]
 180:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 445              		.loc 1 180 0
 446 0016 4FF46013 		mov	r3, #3670016
 447 001a 0F93     		str	r3, [sp, #60]
 181:Src/main.c    ****   {
 448              		.loc 1 181 0
 449 001c 06A8     		add	r0, sp, #24
 450 001e FFF7FEFF 		bl	HAL_RCC_OscConfig
 451              	.LVL26:
 452 0022 18B1     		cbz	r0, .L29
 183:Src/main.c    ****   }
 453              		.loc 1 183 0
 454 0024 B721     		movs	r1, #183
 455 0026 1448     		ldr	r0, .L32
 456 0028 FFF7FEFF 		bl	_Error_Handler
 457              	.LVL27:
 458              	.L29:
 188:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 459              		.loc 1 188 0
 460 002c 0F23     		movs	r3, #15
 461 002e 0193     		str	r3, [sp, #4]
 190:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 462              		.loc 1 190 0
ARM GAS  /tmp/ccFwl8jH.s 			page 16


 463 0030 0221     		movs	r1, #2
 464 0032 0291     		str	r1, [sp, #8]
 191:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 465              		.loc 1 191 0
 466 0034 0023     		movs	r3, #0
 467 0036 0393     		str	r3, [sp, #12]
 192:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 468              		.loc 1 192 0
 469 0038 4FF48062 		mov	r2, #1024
 470 003c 0492     		str	r2, [sp, #16]
 193:Src/main.c    **** 
 471              		.loc 1 193 0
 472 003e 0593     		str	r3, [sp, #20]
 195:Src/main.c    ****   {
 473              		.loc 1 195 0
 474 0040 01A8     		add	r0, sp, #4
 475 0042 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 476              	.LVL28:
 477 0046 18B1     		cbz	r0, .L30
 197:Src/main.c    ****   }
 478              		.loc 1 197 0
 479 0048 C521     		movs	r1, #197
 480 004a 0B48     		ldr	r0, .L32
 481 004c FFF7FEFF 		bl	_Error_Handler
 482              	.LVL29:
 483              	.L30:
 202:Src/main.c    **** 
 484              		.loc 1 202 0
 485 0050 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 486              	.LVL30:
 487 0054 094B     		ldr	r3, .L32+4
 488 0056 A3FB0030 		umull	r3, r0, r3, r0
 489 005a 8009     		lsrs	r0, r0, #6
 490 005c FFF7FEFF 		bl	HAL_SYSTICK_Config
 491              	.LVL31:
 206:Src/main.c    **** 
 492              		.loc 1 206 0
 493 0060 0420     		movs	r0, #4
 494 0062 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 495              	.LVL32:
 209:Src/main.c    **** }
 496              		.loc 1 209 0
 497 0066 0022     		movs	r2, #0
 498 0068 0F21     		movs	r1, #15
 499 006a 4FF0FF30 		mov	r0, #-1
 500 006e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 501              	.LVL33:
 210:Src/main.c    **** 
 502              		.loc 1 210 0
 503 0072 11B0     		add	sp, sp, #68
 504              	.LCFI11:
 505              		.cfi_def_cfa_offset 4
 506              		@ sp needed
 507 0074 5DF804FB 		ldr	pc, [sp], #4
 508              	.L33:
 509              		.align	2
 510              	.L32:
ARM GAS  /tmp/ccFwl8jH.s 			page 17


 511 0078 00000000 		.word	.LC4
 512 007c D34D6210 		.word	274877907
 513              		.cfi_endproc
 514              	.LFE130:
 516              		.section	.text.main,"ax",%progbits
 517              		.align	2
 518              		.global	main
 519              		.thumb
 520              		.thumb_func
 522              	main:
 523              	.LFB129:
  87:Src/main.c    **** 
 524              		.loc 1 87 0
 525              		.cfi_startproc
 526              		@ args = 0, pretend = 0, frame = 40
 527              		@ frame_needed = 0, uses_anonymous_args = 0
 528 0000 70B5     		push	{r4, r5, r6, lr}
 529              	.LCFI12:
 530              		.cfi_def_cfa_offset 16
 531              		.cfi_offset 4, -16
 532              		.cfi_offset 5, -12
 533              		.cfi_offset 6, -8
 534              		.cfi_offset 14, -4
 535 0002 8AB0     		sub	sp, sp, #40
 536              	.LCFI13:
 537              		.cfi_def_cfa_offset 56
  96:Src/main.c    **** 
 538              		.loc 1 96 0
 539 0004 FFF7FEFF 		bl	HAL_Init
 540              	.LVL34:
 103:Src/main.c    **** 
 541              		.loc 1 103 0
 542 0008 FFF7FEFF 		bl	SystemClock_Config
 543              	.LVL35:
 110:Src/main.c    ****   MX_TIM3_Init();
 544              		.loc 1 110 0
 545 000c FFF7FEFF 		bl	MX_GPIO_Init
 546              	.LVL36:
 111:Src/main.c    **** 
 547              		.loc 1 111 0
 548 0010 FFF7FEFF 		bl	MX_TIM3_Init
 549              	.LVL37:
 131:Src/main.c    ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 550              		.loc 1 131 0
 551 0014 0D4C     		ldr	r4, .L37
 552 0016 05AD     		add	r5, sp, #20
 553 0018 2646     		mov	r6, r4
 554 001a 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 555 001c 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 556 001e 3368     		ldr	r3, [r6]
 557 0020 2B60     		str	r3, [r5]
 132:Src/main.c    **** 
 558              		.loc 1 132 0
 559 0022 0021     		movs	r1, #0
 560 0024 05A8     		add	r0, sp, #20
 561 0026 FFF7FEFF 		bl	osThreadCreate
 562              	.LVL38:
ARM GAS  /tmp/ccFwl8jH.s 			page 18


 563 002a 094B     		ldr	r3, .L37+4
 564 002c 1860     		str	r0, [r3]
 135:Src/main.c    ****   motor_cmdHandle = osThreadCreate(osThread(motor_cmd), NULL);
 565              		.loc 1 135 0
 566 002e 6D46     		mov	r5, sp
 567 0030 1434     		adds	r4, r4, #20
 568 0032 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 569 0034 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 570 0036 2368     		ldr	r3, [r4]
 571 0038 2B60     		str	r3, [r5]
 136:Src/main.c    **** 
 572              		.loc 1 136 0
 573 003a 0021     		movs	r1, #0
 574 003c 6846     		mov	r0, sp
 575 003e FFF7FEFF 		bl	osThreadCreate
 576              	.LVL39:
 577 0042 044B     		ldr	r3, .L37+8
 578 0044 1860     		str	r0, [r3]
 148:Src/main.c    ****   
 579              		.loc 1 148 0
 580 0046 FFF7FEFF 		bl	osKernelStart
 581              	.LVL40:
 582              	.L35:
 583 004a FEE7     		b	.L35
 584              	.L38:
 585              		.align	2
 586              	.L37:
 587 004c 00000000 		.word	.LANCHOR0
 588 0050 00000000 		.word	defaultTaskHandle
 589 0054 00000000 		.word	motor_cmdHandle
 590              		.cfi_endproc
 591              	.LFE129:
 593              		.comm	motor_cmdHandle,4,4
 594              		.comm	defaultTaskHandle,4,4
 595              		.comm	htim3,64,4
 596              		.section	.rodata
 597              		.align	2
 598              		.set	.LANCHOR0,. + 0
 599              	.LC5:
 600 0000 18000000 		.word	.LC0
 601 0004 00000000 		.word	StartDefaultTask
 602 0008 0000     		.short	0
 603 000a 0000     		.space	2
 604 000c 00000000 		.word	0
 605 0010 80000000 		.word	128
 606              	.LC6:
 607 0014 0C000000 		.word	.LC2
 608 0018 00000000 		.word	motor
 609 001c FDFF     		.short	-3
 610 001e 0000     		.space	2
 611 0020 00000000 		.word	0
 612 0024 00010000 		.word	256
 613              		.section	.rodata.str1.4,"aMS",%progbits,1
 614              		.align	2
 615              	.LC4:
 616 0000 5372632F 		.ascii	"Src/main.c\000"
 616      6D61696E 
ARM GAS  /tmp/ccFwl8jH.s 			page 19


 616      2E6300
 617 000b 00       		.space	1
 618              	.LC2:
 619 000c 6D6F746F 		.ascii	"motor_cmd\000"
 619      725F636D 
 619      6400
 620 0016 0000     		.space	2
 621              	.LC0:
 622 0018 64656661 		.ascii	"defaultTask\000"
 622      756C7454 
 622      61736B00 
 623              		.text
 624              	.Letext0:
 625              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 626              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 627              		.file 4 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303x8.h"
 628              		.file 5 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
 629              		.file 6 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
 630              		.file 7 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_gpio.h"
 631              		.file 8 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
 632              		.file 9 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
 633              		.file 10 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim_ex.h"
 634              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 635              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 636              		.file 13 "Drivers/CMSIS/Include/core_cm4.h"
 637              		.file 14 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
 638              		.file 15 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_cortex.h"
ARM GAS  /tmp/ccFwl8jH.s 			page 20


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccFwl8jH.s:22     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccFwl8jH.s:26     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccFwl8jH.s:167    .text.MX_GPIO_Init:00000000000000c8 $d
     /tmp/ccFwl8jH.s:174    .text.StartDefaultTask:0000000000000000 $t
     /tmp/ccFwl8jH.s:179    .text.StartDefaultTask:0000000000000000 StartDefaultTask
     /tmp/ccFwl8jH.s:207    .text.StartDefaultTask:0000000000000014 $d
     /tmp/ccFwl8jH.s:212    .text.motor:0000000000000000 $t
     /tmp/ccFwl8jH.s:217    .text.motor:0000000000000000 motor
     /tmp/ccFwl8jH.s:240    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccFwl8jH.s:245    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccFwl8jH.s:270    .text.HAL_TIM_PeriodElapsedCallback:0000000000000010 $d
     /tmp/ccFwl8jH.s:275    .text._Error_Handler:0000000000000000 $t
     /tmp/ccFwl8jH.s:280    .text._Error_Handler:0000000000000000 _Error_Handler
     /tmp/ccFwl8jH.s:295    .text.MX_TIM3_Init:0000000000000000 $t
     /tmp/ccFwl8jH.s:299    .text.MX_TIM3_Init:0000000000000000 MX_TIM3_Init
     /tmp/ccFwl8jH.s:406    .text.MX_TIM3_Init:0000000000000088 $d
                            *COM*:0000000000000040 htim3
     /tmp/ccFwl8jH.s:413    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccFwl8jH.s:418    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccFwl8jH.s:511    .text.SystemClock_Config:0000000000000078 $d
     /tmp/ccFwl8jH.s:517    .text.main:0000000000000000 $t
     /tmp/ccFwl8jH.s:522    .text.main:0000000000000000 main
     /tmp/ccFwl8jH.s:587    .text.main:000000000000004c $d
                            *COM*:0000000000000004 defaultTaskHandle
                            *COM*:0000000000000004 motor_cmdHandle
     /tmp/ccFwl8jH.s:597    .rodata:0000000000000000 $d
     /tmp/ccFwl8jH.s:614    .rodata.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_GPIO_TogglePin
osDelay
HAL_IncTick
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIM_MspPostInit
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
osThreadCreate
osKernelStart
