ARM GAS  /tmp/ccFjr7Es.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"main.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.MX_GPIO_Init,"ax",%progbits
  22              		.align	2
  23              		.thumb
  24              		.thumb_func
  26              	MX_GPIO_Init:
  27              	.LFB135:
  28              		.file 1 "Src/main.c"
   1:Src/main.c    **** /**
   2:Src/main.c    ****   ******************************************************************************
   3:Src/main.c    ****   * File Name          : main.c
   4:Src/main.c    ****   * Description        : Main program body
   5:Src/main.c    ****   ******************************************************************************
   6:Src/main.c    ****   * This notice applies to any and all portions of this file
   7:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   8:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
   9:Src/main.c    ****   * inserted by the user or by software development tools
  10:Src/main.c    ****   * are owned by their respective copyright owners.
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * Copyright (c) 2017 STMicroelectronics International N.V. 
  13:Src/main.c    ****   * All rights reserved.
  14:Src/main.c    ****   *
  15:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without 
  16:Src/main.c    ****   * modification, are permitted, provided that the following conditions are met:
  17:Src/main.c    ****   *
  18:Src/main.c    ****   * 1. Redistribution of source code must retain the above copyright notice, 
  19:Src/main.c    ****   *    this list of conditions and the following disclaimer.
  20:Src/main.c    ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  21:Src/main.c    ****   *    this list of conditions and the following disclaimer in the documentation
  22:Src/main.c    ****   *    and/or other materials provided with the distribution.
  23:Src/main.c    ****   * 3. Neither the name of STMicroelectronics nor the names of other 
  24:Src/main.c    ****   *    contributors to this software may be used to endorse or promote products 
  25:Src/main.c    ****   *    derived from this software without specific written permission.
  26:Src/main.c    ****   * 4. This software, including modifications and/or derivative works of this 
  27:Src/main.c    ****   *    software, must execute solely and exclusively on microcontroller or
  28:Src/main.c    ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  29:Src/main.c    ****   * 5. Redistribution and use of this software other than as permitted under 
  30:Src/main.c    ****   *    this license is void and will automatically terminate your rights under 
ARM GAS  /tmp/ccFjr7Es.s 			page 2


  31:Src/main.c    ****   *    this license. 
  32:Src/main.c    ****   *
  33:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  34:Src/main.c    ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  35:Src/main.c    ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  36:Src/main.c    ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  37:Src/main.c    ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  38:Src/main.c    ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  39:Src/main.c    ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  40:Src/main.c    ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  41:Src/main.c    ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  42:Src/main.c    ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  43:Src/main.c    ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  44:Src/main.c    ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  45:Src/main.c    ****   *
  46:Src/main.c    ****   ******************************************************************************
  47:Src/main.c    ****   */
  48:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  49:Src/main.c    **** #include "main.h"
  50:Src/main.c    **** #include "stm32f3xx_hal.h"
  51:Src/main.c    **** #include "cmsis_os.h"
  52:Src/main.c    **** 
  53:Src/main.c    **** /* USER CODE BEGIN Includes */
  54:Src/main.c    **** 
  55:Src/main.c    **** /* USER CODE END Includes */
  56:Src/main.c    **** 
  57:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  58:Src/main.c    **** ADC_HandleTypeDef hadc1;
  59:Src/main.c    **** DMA_HandleTypeDef hdma_adc1;
  60:Src/main.c    **** 
  61:Src/main.c    **** TIM_HandleTypeDef htim3;
  62:Src/main.c    **** 
  63:Src/main.c    **** UART_HandleTypeDef huart2;
  64:Src/main.c    **** 
  65:Src/main.c    **** osThreadId defaultTaskHandle;
  66:Src/main.c    **** osThreadId motor_taskHandle;
  67:Src/main.c    **** osThreadId adc_dma_taskHandle;
  68:Src/main.c    **** 
  69:Src/main.c    **** /* USER CODE BEGIN PV */
  70:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  71:Src/main.c    **** 
  72:Src/main.c    **** /* USER CODE END PV */
  73:Src/main.c    **** 
  74:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  75:Src/main.c    **** void SystemClock_Config(void);
  76:Src/main.c    **** static void MX_GPIO_Init(void);
  77:Src/main.c    **** static void MX_DMA_Init(void);
  78:Src/main.c    **** static void MX_TIM3_Init(void);
  79:Src/main.c    **** static void MX_ADC1_Init(void);
  80:Src/main.c    **** static void MX_USART2_UART_Init(void);
  81:Src/main.c    **** void StartDefaultTask(void const * argument);
  82:Src/main.c    **** void motor(void const * argument);
  83:Src/main.c    **** void adcControl(void const * argument);
  84:Src/main.c    ****                                     
  85:Src/main.c    **** void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
  86:Src/main.c    ****                                 
  87:Src/main.c    **** 
ARM GAS  /tmp/ccFjr7Es.s 			page 3


  88:Src/main.c    **** /* USER CODE BEGIN PFP */
  89:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  90:Src/main.c    **** 
  91:Src/main.c    **** /* USER CODE END PFP */
  92:Src/main.c    **** 
  93:Src/main.c    **** /* USER CODE BEGIN 0 */
  94:Src/main.c    **** 
  95:Src/main.c    **** /* USER CODE END 0 */
  96:Src/main.c    **** 
  97:Src/main.c    **** int main(void)
  98:Src/main.c    **** {
  99:Src/main.c    **** 
 100:Src/main.c    ****   /* USER CODE BEGIN 1 */
 101:Src/main.c    **** 
 102:Src/main.c    ****   /* USER CODE END 1 */
 103:Src/main.c    **** 
 104:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
 105:Src/main.c    **** 
 106:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 107:Src/main.c    ****   HAL_Init();
 108:Src/main.c    **** 
 109:Src/main.c    ****   /* USER CODE BEGIN Init */
 110:Src/main.c    **** 
 111:Src/main.c    ****   /* USER CODE END Init */
 112:Src/main.c    **** 
 113:Src/main.c    ****   /* Configure the system clock */
 114:Src/main.c    ****   SystemClock_Config();
 115:Src/main.c    **** 
 116:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 117:Src/main.c    **** 
 118:Src/main.c    ****   /* USER CODE END SysInit */
 119:Src/main.c    **** 
 120:Src/main.c    ****   /* Initialize all configured peripherals */
 121:Src/main.c    ****   MX_GPIO_Init();
 122:Src/main.c    ****   MX_DMA_Init();
 123:Src/main.c    ****   MX_TIM3_Init();
 124:Src/main.c    ****   MX_ADC1_Init();
 125:Src/main.c    ****   MX_USART2_UART_Init();
 126:Src/main.c    **** 
 127:Src/main.c    ****   /* USER CODE BEGIN 2 */
 128:Src/main.c    **** 
 129:Src/main.c    ****   /* USER CODE END 2 */
 130:Src/main.c    **** 
 131:Src/main.c    ****   /* USER CODE BEGIN RTOS_MUTEX */
 132:Src/main.c    ****   /* add mutexes, ... */
 133:Src/main.c    ****   /* USER CODE END RTOS_MUTEX */
 134:Src/main.c    **** 
 135:Src/main.c    ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 136:Src/main.c    ****   /* add semaphores, ... */
 137:Src/main.c    ****   /* USER CODE END RTOS_SEMAPHORES */
 138:Src/main.c    **** 
 139:Src/main.c    ****   /* USER CODE BEGIN RTOS_TIMERS */
 140:Src/main.c    ****   /* start timers, add new ones, ... */
 141:Src/main.c    ****   /* USER CODE END RTOS_TIMERS */
 142:Src/main.c    **** 
 143:Src/main.c    ****   /* Create the thread(s) */
 144:Src/main.c    ****   /* definition and creation of defaultTask */
ARM GAS  /tmp/ccFjr7Es.s 			page 4


 145:Src/main.c    ****   osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 146:Src/main.c    ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 147:Src/main.c    **** 
 148:Src/main.c    ****   /* definition and creation of motor_task */
 149:Src/main.c    ****   osThreadDef(motor_task, motor, osPriorityIdle, 0, 256);
 150:Src/main.c    ****   motor_taskHandle = osThreadCreate(osThread(motor_task), NULL);
 151:Src/main.c    **** 
 152:Src/main.c    ****   /* definition and creation of adc_dma_task */
 153:Src/main.c    ****   osThreadDef(adc_dma_task, adcControl, osPriorityIdle, 0, 256);
 154:Src/main.c    ****   adc_dma_taskHandle = osThreadCreate(osThread(adc_dma_task), NULL);
 155:Src/main.c    **** 
 156:Src/main.c    ****   /* USER CODE BEGIN RTOS_THREADS */
 157:Src/main.c    ****   /* add threads, ... */
 158:Src/main.c    ****   /* USER CODE END RTOS_THREADS */
 159:Src/main.c    **** 
 160:Src/main.c    ****   /* USER CODE BEGIN RTOS_QUEUES */
 161:Src/main.c    ****   /* add queues, ... */
 162:Src/main.c    ****   /* USER CODE END RTOS_QUEUES */
 163:Src/main.c    ****  
 164:Src/main.c    **** 
 165:Src/main.c    ****   /* Start scheduler */
 166:Src/main.c    ****   osKernelStart();
 167:Src/main.c    ****   
 168:Src/main.c    ****   /* We should never get here as control is now taken by the scheduler */
 169:Src/main.c    **** 
 170:Src/main.c    ****   /* Infinite loop */
 171:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 172:Src/main.c    ****   while (1)
 173:Src/main.c    ****   {
 174:Src/main.c    ****   /* USER CODE END WHILE */
 175:Src/main.c    **** 
 176:Src/main.c    ****   /* USER CODE BEGIN 3 */
 177:Src/main.c    **** 
 178:Src/main.c    ****   }
 179:Src/main.c    ****   /* USER CODE END 3 */
 180:Src/main.c    **** 
 181:Src/main.c    **** }
 182:Src/main.c    **** 
 183:Src/main.c    **** /** System Clock Configuration
 184:Src/main.c    **** */
 185:Src/main.c    **** void SystemClock_Config(void)
 186:Src/main.c    **** {
 187:Src/main.c    **** 
 188:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 189:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 190:Src/main.c    **** 
 191:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 192:Src/main.c    ****     */
 193:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 194:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 195:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 196:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 197:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 198:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 199:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 200:Src/main.c    ****   {
 201:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
ARM GAS  /tmp/ccFjr7Es.s 			page 5


 202:Src/main.c    ****   }
 203:Src/main.c    **** 
 204:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 205:Src/main.c    ****     */
 206:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 207:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 208:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 209:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 210:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 211:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 212:Src/main.c    **** 
 213:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 214:Src/main.c    ****   {
 215:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 216:Src/main.c    ****   }
 217:Src/main.c    **** 
 218:Src/main.c    ****     /**Configure the Systick interrupt time 
 219:Src/main.c    ****     */
 220:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 221:Src/main.c    **** 
 222:Src/main.c    ****     /**Configure the Systick 
 223:Src/main.c    ****     */
 224:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 225:Src/main.c    **** 
 226:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 227:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 228:Src/main.c    **** }
 229:Src/main.c    **** 
 230:Src/main.c    **** /* ADC1 init function */
 231:Src/main.c    **** static void MX_ADC1_Init(void)
 232:Src/main.c    **** {
 233:Src/main.c    **** 
 234:Src/main.c    ****   ADC_MultiModeTypeDef multimode;
 235:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig;
 236:Src/main.c    **** 
 237:Src/main.c    ****     /**Common config 
 238:Src/main.c    ****     */
 239:Src/main.c    ****   hadc1.Instance = ADC1;
 240:Src/main.c    ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 241:Src/main.c    ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 242:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 243:Src/main.c    ****   hadc1.Init.ContinuousConvMode = ENABLE;
 244:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 245:Src/main.c    ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 246:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 247:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 248:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
 249:Src/main.c    ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 250:Src/main.c    ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 251:Src/main.c    ****   hadc1.Init.LowPowerAutoWait = DISABLE;
 252:Src/main.c    ****   hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 253:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 254:Src/main.c    ****   {
 255:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 256:Src/main.c    ****   }
 257:Src/main.c    **** 
 258:Src/main.c    ****     /**Configure the ADC multi-mode 
ARM GAS  /tmp/ccFjr7Es.s 			page 6


 259:Src/main.c    ****     */
 260:Src/main.c    ****   multimode.Mode = ADC_MODE_INDEPENDENT;
 261:Src/main.c    ****   if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 262:Src/main.c    ****   {
 263:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 264:Src/main.c    ****   }
 265:Src/main.c    **** 
 266:Src/main.c    ****     /**Configure Regular Channel 
 267:Src/main.c    ****     */
 268:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_1;
 269:Src/main.c    ****   sConfig.Rank = 1;
 270:Src/main.c    ****   sConfig.SingleDiff = ADC_SINGLE_ENDED;
 271:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES_5;
 272:Src/main.c    ****   sConfig.OffsetNumber = ADC_OFFSET_NONE;
 273:Src/main.c    ****   sConfig.Offset = 0;
 274:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 275:Src/main.c    ****   {
 276:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 277:Src/main.c    ****   }
 278:Src/main.c    **** 
 279:Src/main.c    **** }
 280:Src/main.c    **** 
 281:Src/main.c    **** /* TIM3 init function */
 282:Src/main.c    **** static void MX_TIM3_Init(void)
 283:Src/main.c    **** {
 284:Src/main.c    **** 
 285:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig;
 286:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC;
 287:Src/main.c    **** 
 288:Src/main.c    ****   htim3.Instance = TIM3;
 289:Src/main.c    ****   htim3.Init.Prescaler = 999;
 290:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 291:Src/main.c    ****   htim3.Init.Period = 639;
 292:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 293:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 294:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 295:Src/main.c    ****   {
 296:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 297:Src/main.c    ****   }
 298:Src/main.c    **** 
 299:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 300:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 301:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 302:Src/main.c    ****   {
 303:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 304:Src/main.c    ****   }
 305:Src/main.c    **** 
 306:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 307:Src/main.c    ****   sConfigOC.Pulse = 319;
 308:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 309:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 310:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 311:Src/main.c    ****   {
 312:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 313:Src/main.c    ****   }
 314:Src/main.c    **** 
 315:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
ARM GAS  /tmp/ccFjr7Es.s 			page 7


 316:Src/main.c    ****   {
 317:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 318:Src/main.c    ****   }
 319:Src/main.c    **** 
 320:Src/main.c    ****   HAL_TIM_MspPostInit(&htim3);
 321:Src/main.c    **** 
 322:Src/main.c    **** }
 323:Src/main.c    **** 
 324:Src/main.c    **** /* USART2 init function */
 325:Src/main.c    **** static void MX_USART2_UART_Init(void)
 326:Src/main.c    **** {
 327:Src/main.c    **** 
 328:Src/main.c    ****   huart2.Instance = USART2;
 329:Src/main.c    ****   huart2.Init.BaudRate = 38400;
 330:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 331:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 332:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 333:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 334:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 335:Src/main.c    ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 336:Src/main.c    ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 337:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 338:Src/main.c    ****   {
 339:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 340:Src/main.c    ****   }
 341:Src/main.c    **** 
 342:Src/main.c    **** }
 343:Src/main.c    **** 
 344:Src/main.c    **** /** 
 345:Src/main.c    ****   * Enable DMA controller clock
 346:Src/main.c    ****   */
 347:Src/main.c    **** static void MX_DMA_Init(void) 
 348:Src/main.c    **** {
 349:Src/main.c    ****   /* DMA controller clock enable */
 350:Src/main.c    ****   __HAL_RCC_DMA1_CLK_ENABLE();
 351:Src/main.c    **** 
 352:Src/main.c    ****   /* DMA interrupt init */
 353:Src/main.c    ****   /* DMA1_Channel1_IRQn interrupt configuration */
 354:Src/main.c    ****   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 355:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 356:Src/main.c    **** 
 357:Src/main.c    **** }
 358:Src/main.c    **** 
 359:Src/main.c    **** /** Configure pins as 
 360:Src/main.c    ****         * Analog 
 361:Src/main.c    ****         * Input 
 362:Src/main.c    ****         * Output
 363:Src/main.c    ****         * EVENT_OUT
 364:Src/main.c    ****         * EXTI
 365:Src/main.c    **** */
 366:Src/main.c    **** static void MX_GPIO_Init(void)
 367:Src/main.c    **** {
  29              		.loc 1 367 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 32
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33 0000 F0B5     		push	{r4, r5, r6, r7, lr}
ARM GAS  /tmp/ccFjr7Es.s 			page 8


  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 20
  36              		.cfi_offset 4, -20
  37              		.cfi_offset 5, -16
  38              		.cfi_offset 6, -12
  39              		.cfi_offset 7, -8
  40              		.cfi_offset 14, -4
  41 0002 89B0     		sub	sp, sp, #36
  42              	.LCFI1:
  43              		.cfi_def_cfa_offset 56
  44              	.LBB2:
 368:Src/main.c    **** 
 369:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct;
 370:Src/main.c    **** 
 371:Src/main.c    ****   /* GPIO Ports Clock Enable */
 372:Src/main.c    ****   __HAL_RCC_GPIOF_CLK_ENABLE();
  45              		.loc 1 372 0
  46 0004 274B     		ldr	r3, .L3
  47 0006 5A69     		ldr	r2, [r3, #20]
  48 0008 42F48002 		orr	r2, r2, #4194304
  49 000c 5A61     		str	r2, [r3, #20]
  50 000e 5A69     		ldr	r2, [r3, #20]
  51 0010 02F48002 		and	r2, r2, #4194304
  52 0014 0092     		str	r2, [sp]
  53 0016 009A     		ldr	r2, [sp]
  54              	.LBE2:
  55              	.LBB3:
 373:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  56              		.loc 1 373 0
  57 0018 5A69     		ldr	r2, [r3, #20]
  58 001a 42F40032 		orr	r2, r2, #131072
  59 001e 5A61     		str	r2, [r3, #20]
  60 0020 5A69     		ldr	r2, [r3, #20]
  61 0022 02F40032 		and	r2, r2, #131072
  62 0026 0192     		str	r2, [sp, #4]
  63 0028 019A     		ldr	r2, [sp, #4]
  64              	.LBE3:
  65              	.LBB4:
 374:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  66              		.loc 1 374 0
  67 002a 5A69     		ldr	r2, [r3, #20]
  68 002c 42F48022 		orr	r2, r2, #262144
  69 0030 5A61     		str	r2, [r3, #20]
  70 0032 5B69     		ldr	r3, [r3, #20]
  71 0034 03F48023 		and	r3, r3, #262144
  72 0038 0293     		str	r3, [sp, #8]
  73 003a 029B     		ldr	r3, [sp, #8]
  74              	.LBE4:
 375:Src/main.c    **** 
 376:Src/main.c    ****   /*Configure GPIO pin Output Level */
 377:Src/main.c    ****   HAL_GPIO_WritePin(GPIOF, ain2_Pin|ain1_Pin, GPIO_PIN_RESET);
  75              		.loc 1 377 0
  76 003c 1A4F     		ldr	r7, .L3+4
  77 003e 0022     		movs	r2, #0
  78 0040 0321     		movs	r1, #3
  79 0042 3846     		mov	r0, r7
  80 0044 FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  /tmp/ccFjr7Es.s 			page 9


  81              	.LVL0:
 378:Src/main.c    **** 
 379:Src/main.c    ****   /*Configure GPIO pin Output Level */
 380:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, stby_Pin|bin1_Pin, GPIO_PIN_RESET);
  82              		.loc 1 380 0
  83 0048 0022     		movs	r2, #0
  84 004a 4FF41061 		mov	r1, #2304
  85 004e 4FF09040 		mov	r0, #1207959552
  86 0052 FFF7FEFF 		bl	HAL_GPIO_WritePin
  87              	.LVL1:
 381:Src/main.c    **** 
 382:Src/main.c    ****   /*Configure GPIO pin Output Level */
 383:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, led_Pin|bin2_Pin, GPIO_PIN_RESET);
  88              		.loc 1 383 0
  89 0056 154E     		ldr	r6, .L3+8
  90 0058 0022     		movs	r2, #0
  91 005a 2821     		movs	r1, #40
  92 005c 3046     		mov	r0, r6
  93 005e FFF7FEFF 		bl	HAL_GPIO_WritePin
  94              	.LVL2:
 384:Src/main.c    **** 
 385:Src/main.c    ****   /*Configure GPIO pins : ain2_Pin ain1_Pin */
 386:Src/main.c    ****   GPIO_InitStruct.Pin = ain2_Pin|ain1_Pin;
  95              		.loc 1 386 0
  96 0062 0323     		movs	r3, #3
  97 0064 0393     		str	r3, [sp, #12]
 387:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  98              		.loc 1 387 0
  99 0066 0125     		movs	r5, #1
 100 0068 0495     		str	r5, [sp, #16]
 388:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 101              		.loc 1 388 0
 102 006a 0024     		movs	r4, #0
 103 006c 0594     		str	r4, [sp, #20]
 389:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 104              		.loc 1 389 0
 105 006e 0694     		str	r4, [sp, #24]
 390:Src/main.c    ****   HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 106              		.loc 1 390 0
 107 0070 03A9     		add	r1, sp, #12
 108 0072 3846     		mov	r0, r7
 109 0074 FFF7FEFF 		bl	HAL_GPIO_Init
 110              	.LVL3:
 391:Src/main.c    **** 
 392:Src/main.c    ****   /*Configure GPIO pins : stby_Pin bin1_Pin */
 393:Src/main.c    ****   GPIO_InitStruct.Pin = stby_Pin|bin1_Pin;
 111              		.loc 1 393 0
 112 0078 4FF41063 		mov	r3, #2304
 113 007c 0393     		str	r3, [sp, #12]
 394:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 114              		.loc 1 394 0
 115 007e 0495     		str	r5, [sp, #16]
 395:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 116              		.loc 1 395 0
 117 0080 0594     		str	r4, [sp, #20]
 396:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 118              		.loc 1 396 0
ARM GAS  /tmp/ccFjr7Es.s 			page 10


 119 0082 0694     		str	r4, [sp, #24]
 397:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 120              		.loc 1 397 0
 121 0084 03A9     		add	r1, sp, #12
 122 0086 4FF09040 		mov	r0, #1207959552
 123 008a FFF7FEFF 		bl	HAL_GPIO_Init
 124              	.LVL4:
 398:Src/main.c    **** 
 399:Src/main.c    ****   /*Configure GPIO pins : led_Pin bin2_Pin */
 400:Src/main.c    ****   GPIO_InitStruct.Pin = led_Pin|bin2_Pin;
 125              		.loc 1 400 0
 126 008e 2823     		movs	r3, #40
 127 0090 0393     		str	r3, [sp, #12]
 401:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 128              		.loc 1 401 0
 129 0092 0495     		str	r5, [sp, #16]
 402:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 130              		.loc 1 402 0
 131 0094 0594     		str	r4, [sp, #20]
 403:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 132              		.loc 1 403 0
 133 0096 0694     		str	r4, [sp, #24]
 404:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 134              		.loc 1 404 0
 135 0098 03A9     		add	r1, sp, #12
 136 009a 3046     		mov	r0, r6
 137 009c FFF7FEFF 		bl	HAL_GPIO_Init
 138              	.LVL5:
 405:Src/main.c    **** 
 406:Src/main.c    **** }
 139              		.loc 1 406 0
 140 00a0 09B0     		add	sp, sp, #36
 141              	.LCFI2:
 142              		.cfi_def_cfa_offset 20
 143              		@ sp needed
 144 00a2 F0BD     		pop	{r4, r5, r6, r7, pc}
 145              	.L4:
 146              		.align	2
 147              	.L3:
 148 00a4 00100240 		.word	1073876992
 149 00a8 00140048 		.word	1207964672
 150 00ac 00040048 		.word	1207960576
 151              		.cfi_endproc
 152              	.LFE135:
 154              		.section	.text.MX_DMA_Init,"ax",%progbits
 155              		.align	2
 156              		.thumb
 157              		.thumb_func
 159              	MX_DMA_Init:
 160              	.LFB134:
 348:Src/main.c    ****   /* DMA controller clock enable */
 161              		.loc 1 348 0
 162              		.cfi_startproc
 163              		@ args = 0, pretend = 0, frame = 8
 164              		@ frame_needed = 0, uses_anonymous_args = 0
 165 0000 00B5     		push	{lr}
 166              	.LCFI3:
ARM GAS  /tmp/ccFjr7Es.s 			page 11


 167              		.cfi_def_cfa_offset 4
 168              		.cfi_offset 14, -4
 169 0002 83B0     		sub	sp, sp, #12
 170              	.LCFI4:
 171              		.cfi_def_cfa_offset 16
 172              	.LBB5:
 350:Src/main.c    **** 
 173              		.loc 1 350 0
 174 0004 0A4B     		ldr	r3, .L7
 175 0006 5A69     		ldr	r2, [r3, #20]
 176 0008 42F00102 		orr	r2, r2, #1
 177 000c 5A61     		str	r2, [r3, #20]
 178 000e 5B69     		ldr	r3, [r3, #20]
 179 0010 03F00103 		and	r3, r3, #1
 180 0014 0193     		str	r3, [sp, #4]
 181 0016 019B     		ldr	r3, [sp, #4]
 182              	.LBE5:
 354:Src/main.c    ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 183              		.loc 1 354 0
 184 0018 0022     		movs	r2, #0
 185 001a 0521     		movs	r1, #5
 186 001c 0B20     		movs	r0, #11
 187 001e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 188              	.LVL6:
 355:Src/main.c    **** 
 189              		.loc 1 355 0
 190 0022 0B20     		movs	r0, #11
 191 0024 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 192              	.LVL7:
 357:Src/main.c    **** 
 193              		.loc 1 357 0
 194 0028 03B0     		add	sp, sp, #12
 195              	.LCFI5:
 196              		.cfi_def_cfa_offset 4
 197              		@ sp needed
 198 002a 5DF804FB 		ldr	pc, [sp], #4
 199              	.L8:
 200 002e 00BF     		.align	2
 201              	.L7:
 202 0030 00100240 		.word	1073876992
 203              		.cfi_endproc
 204              	.LFE134:
 206              		.section	.text.StartDefaultTask,"ax",%progbits
 207              		.align	2
 208              		.global	StartDefaultTask
 209              		.thumb
 210              		.thumb_func
 212              	StartDefaultTask:
 213              	.LFB136:
 407:Src/main.c    **** 
 408:Src/main.c    **** /* USER CODE BEGIN 4 */
 409:Src/main.c    **** 
 410:Src/main.c    **** /* USER CODE END 4 */
 411:Src/main.c    **** 
 412:Src/main.c    **** /* StartDefaultTask function */
 413:Src/main.c    **** void StartDefaultTask(void const * argument)
 414:Src/main.c    **** {
ARM GAS  /tmp/ccFjr7Es.s 			page 12


 214              		.loc 1 414 0
 215              		.cfi_startproc
 216              		@ Volatile: function does not return.
 217              		@ args = 0, pretend = 0, frame = 0
 218              		@ frame_needed = 0, uses_anonymous_args = 0
 219              	.LVL8:
 220 0000 08B5     		push	{r3, lr}
 221              	.LCFI6:
 222              		.cfi_def_cfa_offset 8
 223              		.cfi_offset 3, -8
 224              		.cfi_offset 14, -4
 225              	.LVL9:
 226              	.L10:
 415:Src/main.c    **** 
 416:Src/main.c    ****   /* USER CODE BEGIN 5 */
 417:Src/main.c    ****   /* Infinite loop */
 418:Src/main.c    ****   for(;;)
 419:Src/main.c    ****   {
 420:Src/main.c    ****     HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 227              		.loc 1 420 0 discriminator 1
 228 0002 0821     		movs	r1, #8
 229 0004 0348     		ldr	r0, .L12
 230 0006 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 231              	.LVL10:
 421:Src/main.c    ****     osDelay(1000);
 232              		.loc 1 421 0 discriminator 1
 233 000a 4FF47A70 		mov	r0, #1000
 234 000e FFF7FEFF 		bl	osDelay
 235              	.LVL11:
 236 0012 F6E7     		b	.L10
 237              	.L13:
 238              		.align	2
 239              	.L12:
 240 0014 00040048 		.word	1207960576
 241              		.cfi_endproc
 242              	.LFE136:
 244              		.section	.text.motor,"ax",%progbits
 245              		.align	2
 246              		.weak	motor
 247              		.thumb
 248              		.thumb_func
 250              	motor:
 251              	.LFB137:
 422:Src/main.c    ****   }
 423:Src/main.c    ****   /* USER CODE END 5 */ 
 424:Src/main.c    **** }
 425:Src/main.c    **** 
 426:Src/main.c    **** /* motor function */
 427:Src/main.c    **** __weak void motor(void const * argument)
 428:Src/main.c    **** {
 252              		.loc 1 428 0
 253              		.cfi_startproc
 254              		@ args = 0, pretend = 0, frame = 0
 255              		@ frame_needed = 0, uses_anonymous_args = 0
 256              	.LVL12:
 257 0000 08B5     		push	{r3, lr}
 258              	.LCFI7:
ARM GAS  /tmp/ccFjr7Es.s 			page 13


 259              		.cfi_def_cfa_offset 8
 260              		.cfi_offset 3, -8
 261              		.cfi_offset 14, -4
 262              	.LVL13:
 263              	.L15:
 429:Src/main.c    ****   /* USER CODE BEGIN motor */
 430:Src/main.c    ****   /* Infinite loop */
 431:Src/main.c    ****   for(;;)
 432:Src/main.c    ****   {
 433:Src/main.c    ****     osDelay(1);
 264              		.loc 1 433 0 discriminator 1
 265 0002 0120     		movs	r0, #1
 266 0004 FFF7FEFF 		bl	osDelay
 267              	.LVL14:
 268 0008 FBE7     		b	.L15
 269              		.cfi_endproc
 270              	.LFE137:
 272 000a 00BF     		.section	.text.adcControl,"ax",%progbits
 273              		.align	2
 274              		.weak	adcControl
 275              		.thumb
 276              		.thumb_func
 278              	adcControl:
 279              	.LFB138:
 434:Src/main.c    ****   }
 435:Src/main.c    ****   /* USER CODE END motor */
 436:Src/main.c    **** }
 437:Src/main.c    **** 
 438:Src/main.c    **** /* adcControl function */
 439:Src/main.c    **** __weak void adcControl(void const * argument)
 440:Src/main.c    **** {
 280              		.loc 1 440 0
 281              		.cfi_startproc
 282              		@ args = 0, pretend = 0, frame = 0
 283              		@ frame_needed = 0, uses_anonymous_args = 0
 284              	.LVL15:
 285 0000 08B5     		push	{r3, lr}
 286              	.LCFI8:
 287              		.cfi_def_cfa_offset 8
 288              		.cfi_offset 3, -8
 289              		.cfi_offset 14, -4
 290              	.LVL16:
 291              	.L18:
 441:Src/main.c    ****   /* USER CODE BEGIN adcControl */
 442:Src/main.c    ****   /* Infinite loop */
 443:Src/main.c    ****   for(;;)
 444:Src/main.c    ****   {
 445:Src/main.c    ****     osDelay(1);
 292              		.loc 1 445 0 discriminator 1
 293 0002 0120     		movs	r0, #1
 294 0004 FFF7FEFF 		bl	osDelay
 295              	.LVL17:
 296 0008 FBE7     		b	.L18
 297              		.cfi_endproc
 298              	.LFE138:
 300 000a 00BF     		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 301              		.align	2
ARM GAS  /tmp/ccFjr7Es.s 			page 14


 302              		.global	HAL_TIM_PeriodElapsedCallback
 303              		.thumb
 304              		.thumb_func
 306              	HAL_TIM_PeriodElapsedCallback:
 307              	.LFB139:
 446:Src/main.c    ****   }
 447:Src/main.c    ****   /* USER CODE END adcControl */
 448:Src/main.c    **** }
 449:Src/main.c    **** 
 450:Src/main.c    **** /**
 451:Src/main.c    ****   * @brief  Period elapsed callback in non blocking mode
 452:Src/main.c    ****   * @note   This function is called  when TIM15 interrupt took place, inside
 453:Src/main.c    ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 454:Src/main.c    ****   * a global variable "uwTick" used as application time base.
 455:Src/main.c    ****   * @param  htim : TIM handle
 456:Src/main.c    ****   * @retval None
 457:Src/main.c    ****   */
 458:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 459:Src/main.c    **** {
 308              		.loc 1 459 0
 309              		.cfi_startproc
 310              		@ args = 0, pretend = 0, frame = 0
 311              		@ frame_needed = 0, uses_anonymous_args = 0
 312              	.LVL18:
 313 0000 08B5     		push	{r3, lr}
 314              	.LCFI9:
 315              		.cfi_def_cfa_offset 8
 316              		.cfi_offset 3, -8
 317              		.cfi_offset 14, -4
 460:Src/main.c    **** /* USER CODE BEGIN Callback 0 */
 461:Src/main.c    **** 
 462:Src/main.c    **** /* USER CODE END Callback 0 */
 463:Src/main.c    ****   if (htim->Instance == TIM15) {
 318              		.loc 1 463 0
 319 0002 0268     		ldr	r2, [r0]
 320 0004 024B     		ldr	r3, .L23
 321 0006 9A42     		cmp	r2, r3
 322 0008 01D1     		bne	.L20
 464:Src/main.c    ****     HAL_IncTick();
 323              		.loc 1 464 0
 324 000a FFF7FEFF 		bl	HAL_IncTick
 325              	.LVL19:
 326              	.L20:
 327 000e 08BD     		pop	{r3, pc}
 328              	.L24:
 329              		.align	2
 330              	.L23:
 331 0010 00400140 		.word	1073823744
 332              		.cfi_endproc
 333              	.LFE139:
 335              		.section	.text._Error_Handler,"ax",%progbits
 336              		.align	2
 337              		.global	_Error_Handler
 338              		.thumb
 339              		.thumb_func
 341              	_Error_Handler:
 342              	.LFB140:
ARM GAS  /tmp/ccFjr7Es.s 			page 15


 465:Src/main.c    ****   }
 466:Src/main.c    **** /* USER CODE BEGIN Callback 1 */
 467:Src/main.c    **** 
 468:Src/main.c    **** /* USER CODE END Callback 1 */
 469:Src/main.c    **** }
 470:Src/main.c    **** 
 471:Src/main.c    **** /**
 472:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 473:Src/main.c    ****   * @param  None
 474:Src/main.c    ****   * @retval None
 475:Src/main.c    ****   */
 476:Src/main.c    **** void _Error_Handler(char * file, int line)
 477:Src/main.c    **** {
 343              		.loc 1 477 0
 344              		.cfi_startproc
 345              		@ Volatile: function does not return.
 346              		@ args = 0, pretend = 0, frame = 0
 347              		@ frame_needed = 0, uses_anonymous_args = 0
 348              		@ link register save eliminated.
 349              	.LVL20:
 350              	.L26:
 351 0000 FEE7     		b	.L26
 352              		.cfi_endproc
 353              	.LFE140:
 355 0002 00BF     		.section	.text.MX_TIM3_Init,"ax",%progbits
 356              		.align	2
 357              		.thumb
 358              		.thumb_func
 360              	MX_TIM3_Init:
 361              	.LFB132:
 283:Src/main.c    **** 
 362              		.loc 1 283 0
 363              		.cfi_startproc
 364              		@ args = 0, pretend = 0, frame = 40
 365              		@ frame_needed = 0, uses_anonymous_args = 0
 283:Src/main.c    **** 
 366              		.loc 1 283 0
 367 0000 00B5     		push	{lr}
 368              	.LCFI10:
 369              		.cfi_def_cfa_offset 4
 370              		.cfi_offset 14, -4
 371 0002 8BB0     		sub	sp, sp, #44
 372              	.LCFI11:
 373              		.cfi_def_cfa_offset 48
 288:Src/main.c    ****   htim3.Init.Prescaler = 999;
 374              		.loc 1 288 0
 375 0004 2248     		ldr	r0, .L33
 376 0006 234B     		ldr	r3, .L33+4
 377 0008 0360     		str	r3, [r0]
 289:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 378              		.loc 1 289 0
 379 000a 40F2E733 		movw	r3, #999
 380 000e 4360     		str	r3, [r0, #4]
 290:Src/main.c    ****   htim3.Init.Period = 639;
 381              		.loc 1 290 0
 382 0010 0023     		movs	r3, #0
 383 0012 8360     		str	r3, [r0, #8]
ARM GAS  /tmp/ccFjr7Es.s 			page 16


 291:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 384              		.loc 1 291 0
 385 0014 40F27F22 		movw	r2, #639
 386 0018 C260     		str	r2, [r0, #12]
 292:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 387              		.loc 1 292 0
 388 001a 0361     		str	r3, [r0, #16]
 293:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 389              		.loc 1 293 0
 390 001c 8361     		str	r3, [r0, #24]
 294:Src/main.c    ****   {
 391              		.loc 1 294 0
 392 001e FFF7FEFF 		bl	HAL_TIM_PWM_Init
 393              	.LVL21:
 394 0022 20B1     		cbz	r0, .L28
 296:Src/main.c    ****   }
 395              		.loc 1 296 0
 396 0024 4FF49471 		mov	r1, #296
 397 0028 1B48     		ldr	r0, .L33+8
 398 002a FFF7FEFF 		bl	_Error_Handler
 399              	.LVL22:
 400              	.L28:
 299:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 401              		.loc 1 299 0
 402 002e 0023     		movs	r3, #0
 403 0030 0793     		str	r3, [sp, #28]
 300:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 404              		.loc 1 300 0
 405 0032 0993     		str	r3, [sp, #36]
 301:Src/main.c    ****   {
 406              		.loc 1 301 0
 407 0034 07A9     		add	r1, sp, #28
 408 0036 1648     		ldr	r0, .L33
 409 0038 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 410              	.LVL23:
 411 003c 20B1     		cbz	r0, .L29
 303:Src/main.c    ****   }
 412              		.loc 1 303 0
 413 003e 40F22F11 		movw	r1, #303
 414 0042 1548     		ldr	r0, .L33+8
 415 0044 FFF7FEFF 		bl	_Error_Handler
 416              	.LVL24:
 417              	.L29:
 306:Src/main.c    ****   sConfigOC.Pulse = 319;
 418              		.loc 1 306 0
 419 0048 6023     		movs	r3, #96
 420 004a 0093     		str	r3, [sp]
 307:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 421              		.loc 1 307 0
 422 004c 40F23F13 		movw	r3, #319
 423 0050 0193     		str	r3, [sp, #4]
 308:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 424              		.loc 1 308 0
 425 0052 0022     		movs	r2, #0
 426 0054 0292     		str	r2, [sp, #8]
 309:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 427              		.loc 1 309 0
ARM GAS  /tmp/ccFjr7Es.s 			page 17


 428 0056 0492     		str	r2, [sp, #16]
 310:Src/main.c    ****   {
 429              		.loc 1 310 0
 430 0058 6946     		mov	r1, sp
 431 005a 0D48     		ldr	r0, .L33
 432 005c FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 433              	.LVL25:
 434 0060 20B1     		cbz	r0, .L30
 312:Src/main.c    ****   }
 435              		.loc 1 312 0
 436 0062 4FF49C71 		mov	r1, #312
 437 0066 0C48     		ldr	r0, .L33+8
 438 0068 FFF7FEFF 		bl	_Error_Handler
 439              	.LVL26:
 440              	.L30:
 315:Src/main.c    ****   {
 441              		.loc 1 315 0
 442 006c 0C22     		movs	r2, #12
 443 006e 6946     		mov	r1, sp
 444 0070 0748     		ldr	r0, .L33
 445 0072 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 446              	.LVL27:
 447 0076 20B1     		cbz	r0, .L31
 317:Src/main.c    ****   }
 448              		.loc 1 317 0
 449 0078 40F23D11 		movw	r1, #317
 450 007c 0648     		ldr	r0, .L33+8
 451 007e FFF7FEFF 		bl	_Error_Handler
 452              	.LVL28:
 453              	.L31:
 320:Src/main.c    **** 
 454              		.loc 1 320 0
 455 0082 0348     		ldr	r0, .L33
 456 0084 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 457              	.LVL29:
 322:Src/main.c    **** 
 458              		.loc 1 322 0
 459 0088 0BB0     		add	sp, sp, #44
 460              	.LCFI12:
 461              		.cfi_def_cfa_offset 4
 462              		@ sp needed
 463 008a 5DF804FB 		ldr	pc, [sp], #4
 464              	.L34:
 465 008e 00BF     		.align	2
 466              	.L33:
 467 0090 00000000 		.word	htim3
 468 0094 00040040 		.word	1073742848
 469 0098 00000000 		.word	.LC6
 470              		.cfi_endproc
 471              	.LFE132:
 473              		.section	.text.MX_ADC1_Init,"ax",%progbits
 474              		.align	2
 475              		.thumb
 476              		.thumb_func
 478              	MX_ADC1_Init:
 479              	.LFB131:
 232:Src/main.c    **** 
ARM GAS  /tmp/ccFjr7Es.s 			page 18


 480              		.loc 1 232 0
 481              		.cfi_startproc
 482              		@ args = 0, pretend = 0, frame = 40
 483              		@ frame_needed = 0, uses_anonymous_args = 0
 484 0000 00B5     		push	{lr}
 485              	.LCFI13:
 486              		.cfi_def_cfa_offset 4
 487              		.cfi_offset 14, -4
 488 0002 8BB0     		sub	sp, sp, #44
 489              	.LCFI14:
 490              		.cfi_def_cfa_offset 48
 239:Src/main.c    ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 491              		.loc 1 239 0
 492 0004 2148     		ldr	r0, .L40
 493 0006 4FF0A043 		mov	r3, #1342177280
 494 000a 0360     		str	r3, [r0]
 240:Src/main.c    ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 495              		.loc 1 240 0
 496 000c 4FF44033 		mov	r3, #196608
 497 0010 4360     		str	r3, [r0, #4]
 241:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 498              		.loc 1 241 0
 499 0012 0023     		movs	r3, #0
 500 0014 8360     		str	r3, [r0, #8]
 242:Src/main.c    ****   hadc1.Init.ContinuousConvMode = ENABLE;
 501              		.loc 1 242 0
 502 0016 0361     		str	r3, [r0, #16]
 243:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 503              		.loc 1 243 0
 504 0018 0122     		movs	r2, #1
 505 001a C261     		str	r2, [r0, #28]
 244:Src/main.c    ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 506              		.loc 1 244 0
 507 001c 4362     		str	r3, [r0, #36]
 245:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 508              		.loc 1 245 0
 509 001e 4FF48061 		mov	r1, #1024
 510 0022 0163     		str	r1, [r0, #48]
 246:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 511              		.loc 1 246 0
 512 0024 4FF48071 		mov	r1, #256
 513 0028 C162     		str	r1, [r0, #44]
 247:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
 514              		.loc 1 247 0
 515 002a C360     		str	r3, [r0, #12]
 248:Src/main.c    ****   hadc1.Init.DMAContinuousRequests = ENABLE;
 516              		.loc 1 248 0
 517 002c 0262     		str	r2, [r0, #32]
 249:Src/main.c    ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 518              		.loc 1 249 0
 519 002e 4263     		str	r2, [r0, #52]
 250:Src/main.c    ****   hadc1.Init.LowPowerAutoWait = DISABLE;
 520              		.loc 1 250 0
 521 0030 0422     		movs	r2, #4
 522 0032 4261     		str	r2, [r0, #20]
 251:Src/main.c    ****   hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 523              		.loc 1 251 0
ARM GAS  /tmp/ccFjr7Es.s 			page 19


 524 0034 8361     		str	r3, [r0, #24]
 252:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 525              		.loc 1 252 0
 526 0036 8363     		str	r3, [r0, #56]
 253:Src/main.c    ****   {
 527              		.loc 1 253 0
 528 0038 FFF7FEFF 		bl	HAL_ADC_Init
 529              	.LVL30:
 530 003c 18B1     		cbz	r0, .L36
 255:Src/main.c    ****   }
 531              		.loc 1 255 0
 532 003e FF21     		movs	r1, #255
 533 0040 1348     		ldr	r0, .L40+4
 534 0042 FFF7FEFF 		bl	_Error_Handler
 535              	.LVL31:
 536              	.L36:
 260:Src/main.c    ****   if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 537              		.loc 1 260 0
 538 0046 0AA9     		add	r1, sp, #40
 539 0048 0023     		movs	r3, #0
 540 004a 41F80C3D 		str	r3, [r1, #-12]!
 261:Src/main.c    ****   {
 541              		.loc 1 261 0
 542 004e 0F48     		ldr	r0, .L40
 543 0050 FFF7FEFF 		bl	HAL_ADCEx_MultiModeConfigChannel
 544              	.LVL32:
 545 0054 20B1     		cbz	r0, .L37
 263:Src/main.c    ****   }
 546              		.loc 1 263 0
 547 0056 40F20711 		movw	r1, #263
 548 005a 0D48     		ldr	r0, .L40+4
 549 005c FFF7FEFF 		bl	_Error_Handler
 550              	.LVL33:
 551              	.L37:
 268:Src/main.c    ****   sConfig.Rank = 1;
 552              		.loc 1 268 0
 553 0060 0123     		movs	r3, #1
 554 0062 0193     		str	r3, [sp, #4]
 269:Src/main.c    ****   sConfig.SingleDiff = ADC_SINGLE_ENDED;
 555              		.loc 1 269 0
 556 0064 0293     		str	r3, [sp, #8]
 270:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES_5;
 557              		.loc 1 270 0
 558 0066 0023     		movs	r3, #0
 559 0068 0493     		str	r3, [sp, #16]
 271:Src/main.c    ****   sConfig.OffsetNumber = ADC_OFFSET_NONE;
 560              		.loc 1 271 0
 561 006a 0222     		movs	r2, #2
 562 006c 0392     		str	r2, [sp, #12]
 272:Src/main.c    ****   sConfig.Offset = 0;
 563              		.loc 1 272 0
 564 006e 0593     		str	r3, [sp, #20]
 273:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 565              		.loc 1 273 0
 566 0070 0693     		str	r3, [sp, #24]
 274:Src/main.c    ****   {
 567              		.loc 1 274 0
ARM GAS  /tmp/ccFjr7Es.s 			page 20


 568 0072 01A9     		add	r1, sp, #4
 569 0074 0548     		ldr	r0, .L40
 570 0076 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 571              	.LVL34:
 572 007a 20B1     		cbz	r0, .L35
 276:Src/main.c    ****   }
 573              		.loc 1 276 0
 574 007c 4FF48A71 		mov	r1, #276
 575 0080 0348     		ldr	r0, .L40+4
 576 0082 FFF7FEFF 		bl	_Error_Handler
 577              	.LVL35:
 578              	.L35:
 279:Src/main.c    **** 
 579              		.loc 1 279 0
 580 0086 0BB0     		add	sp, sp, #44
 581              	.LCFI15:
 582              		.cfi_def_cfa_offset 4
 583              		@ sp needed
 584 0088 5DF804FB 		ldr	pc, [sp], #4
 585              	.L41:
 586              		.align	2
 587              	.L40:
 588 008c 00000000 		.word	hadc1
 589 0090 00000000 		.word	.LC6
 590              		.cfi_endproc
 591              	.LFE131:
 593              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 594              		.align	2
 595              		.thumb
 596              		.thumb_func
 598              	MX_USART2_UART_Init:
 599              	.LFB133:
 326:Src/main.c    **** 
 600              		.loc 1 326 0
 601              		.cfi_startproc
 602              		@ args = 0, pretend = 0, frame = 0
 603              		@ frame_needed = 0, uses_anonymous_args = 0
 604 0000 08B5     		push	{r3, lr}
 605              	.LCFI16:
 606              		.cfi_def_cfa_offset 8
 607              		.cfi_offset 3, -8
 608              		.cfi_offset 14, -4
 328:Src/main.c    ****   huart2.Init.BaudRate = 38400;
 609              		.loc 1 328 0
 610 0002 0C48     		ldr	r0, .L45
 611 0004 0C4B     		ldr	r3, .L45+4
 612 0006 0360     		str	r3, [r0]
 329:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 613              		.loc 1 329 0
 614 0008 4FF41643 		mov	r3, #38400
 615 000c 4360     		str	r3, [r0, #4]
 330:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 616              		.loc 1 330 0
 617 000e 0023     		movs	r3, #0
 618 0010 C360     		str	r3, [r0, #12]
 331:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 619              		.loc 1 331 0
ARM GAS  /tmp/ccFjr7Es.s 			page 21


 620 0012 0361     		str	r3, [r0, #16]
 332:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 621              		.loc 1 332 0
 622 0014 0C22     		movs	r2, #12
 623 0016 4261     		str	r2, [r0, #20]
 333:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 624              		.loc 1 333 0
 625 0018 8361     		str	r3, [r0, #24]
 334:Src/main.c    ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 626              		.loc 1 334 0
 627 001a C361     		str	r3, [r0, #28]
 335:Src/main.c    ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 628              		.loc 1 335 0
 629 001c 0362     		str	r3, [r0, #32]
 336:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 630              		.loc 1 336 0
 631 001e 4362     		str	r3, [r0, #36]
 337:Src/main.c    ****   {
 632              		.loc 1 337 0
 633 0020 FFF7FEFF 		bl	HAL_UART_Init
 634              	.LVL36:
 635 0024 20B1     		cbz	r0, .L42
 339:Src/main.c    ****   }
 636              		.loc 1 339 0
 637 0026 40F25311 		movw	r1, #339
 638 002a 0448     		ldr	r0, .L45+8
 639 002c FFF7FEFF 		bl	_Error_Handler
 640              	.LVL37:
 641              	.L42:
 642 0030 08BD     		pop	{r3, pc}
 643              	.L46:
 644 0032 00BF     		.align	2
 645              	.L45:
 646 0034 00000000 		.word	huart2
 647 0038 00440040 		.word	1073759232
 648 003c 00000000 		.word	.LC6
 649              		.cfi_endproc
 650              	.LFE133:
 652              		.section	.text.SystemClock_Config,"ax",%progbits
 653              		.align	2
 654              		.global	SystemClock_Config
 655              		.thumb
 656              		.thumb_func
 658              	SystemClock_Config:
 659              	.LFB130:
 186:Src/main.c    **** 
 660              		.loc 1 186 0
 661              		.cfi_startproc
 662              		@ args = 0, pretend = 0, frame = 64
 663              		@ frame_needed = 0, uses_anonymous_args = 0
 664 0000 00B5     		push	{lr}
 665              	.LCFI17:
 666              		.cfi_def_cfa_offset 4
 667              		.cfi_offset 14, -4
 668 0002 91B0     		sub	sp, sp, #68
 669              	.LCFI18:
 670              		.cfi_def_cfa_offset 72
ARM GAS  /tmp/ccFjr7Es.s 			page 22


 193:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 671              		.loc 1 193 0
 672 0004 0223     		movs	r3, #2
 673 0006 0693     		str	r3, [sp, #24]
 194:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 674              		.loc 1 194 0
 675 0008 0122     		movs	r2, #1
 676 000a 0A92     		str	r2, [sp, #40]
 195:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 677              		.loc 1 195 0
 678 000c 1022     		movs	r2, #16
 679 000e 0B92     		str	r2, [sp, #44]
 196:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 680              		.loc 1 196 0
 681 0010 0D93     		str	r3, [sp, #52]
 197:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 682              		.loc 1 197 0
 683 0012 0023     		movs	r3, #0
 684 0014 0E93     		str	r3, [sp, #56]
 198:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 685              		.loc 1 198 0
 686 0016 4FF46013 		mov	r3, #3670016
 687 001a 0F93     		str	r3, [sp, #60]
 199:Src/main.c    ****   {
 688              		.loc 1 199 0
 689 001c 06A8     		add	r0, sp, #24
 690 001e FFF7FEFF 		bl	HAL_RCC_OscConfig
 691              	.LVL38:
 692 0022 18B1     		cbz	r0, .L48
 201:Src/main.c    ****   }
 693              		.loc 1 201 0
 694 0024 C921     		movs	r1, #201
 695 0026 1448     		ldr	r0, .L51
 696 0028 FFF7FEFF 		bl	_Error_Handler
 697              	.LVL39:
 698              	.L48:
 206:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 699              		.loc 1 206 0
 700 002c 0F23     		movs	r3, #15
 701 002e 0193     		str	r3, [sp, #4]
 208:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 702              		.loc 1 208 0
 703 0030 0221     		movs	r1, #2
 704 0032 0291     		str	r1, [sp, #8]
 209:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 705              		.loc 1 209 0
 706 0034 0023     		movs	r3, #0
 707 0036 0393     		str	r3, [sp, #12]
 210:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 708              		.loc 1 210 0
 709 0038 4FF48062 		mov	r2, #1024
 710 003c 0492     		str	r2, [sp, #16]
 211:Src/main.c    **** 
 711              		.loc 1 211 0
 712 003e 0593     		str	r3, [sp, #20]
 213:Src/main.c    ****   {
 713              		.loc 1 213 0
ARM GAS  /tmp/ccFjr7Es.s 			page 23


 714 0040 01A8     		add	r0, sp, #4
 715 0042 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 716              	.LVL40:
 717 0046 18B1     		cbz	r0, .L49
 215:Src/main.c    ****   }
 718              		.loc 1 215 0
 719 0048 D721     		movs	r1, #215
 720 004a 0B48     		ldr	r0, .L51
 721 004c FFF7FEFF 		bl	_Error_Handler
 722              	.LVL41:
 723              	.L49:
 220:Src/main.c    **** 
 724              		.loc 1 220 0
 725 0050 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 726              	.LVL42:
 727 0054 094B     		ldr	r3, .L51+4
 728 0056 A3FB0030 		umull	r3, r0, r3, r0
 729 005a 8009     		lsrs	r0, r0, #6
 730 005c FFF7FEFF 		bl	HAL_SYSTICK_Config
 731              	.LVL43:
 224:Src/main.c    **** 
 732              		.loc 1 224 0
 733 0060 0420     		movs	r0, #4
 734 0062 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 735              	.LVL44:
 227:Src/main.c    **** }
 736              		.loc 1 227 0
 737 0066 0022     		movs	r2, #0
 738 0068 0F21     		movs	r1, #15
 739 006a 4FF0FF30 		mov	r0, #-1
 740 006e FFF7FEFF 		bl	HAL_NVIC_SetPriority
 741              	.LVL45:
 228:Src/main.c    **** 
 742              		.loc 1 228 0
 743 0072 11B0     		add	sp, sp, #68
 744              	.LCFI19:
 745              		.cfi_def_cfa_offset 4
 746              		@ sp needed
 747 0074 5DF804FB 		ldr	pc, [sp], #4
 748              	.L52:
 749              		.align	2
 750              	.L51:
 751 0078 00000000 		.word	.LC6
 752 007c D34D6210 		.word	274877907
 753              		.cfi_endproc
 754              	.LFE130:
 756              		.section	.text.main,"ax",%progbits
 757              		.align	2
 758              		.global	main
 759              		.thumb
 760              		.thumb_func
 762              	main:
 763              	.LFB129:
  98:Src/main.c    **** 
 764              		.loc 1 98 0
 765              		.cfi_startproc
 766              		@ args = 0, pretend = 0, frame = 64
ARM GAS  /tmp/ccFjr7Es.s 			page 24


 767              		@ frame_needed = 0, uses_anonymous_args = 0
 768 0000 70B5     		push	{r4, r5, r6, lr}
 769              	.LCFI20:
 770              		.cfi_def_cfa_offset 16
 771              		.cfi_offset 4, -16
 772              		.cfi_offset 5, -12
 773              		.cfi_offset 6, -8
 774              		.cfi_offset 14, -4
 775 0002 90B0     		sub	sp, sp, #64
 776              	.LCFI21:
 777              		.cfi_def_cfa_offset 80
 107:Src/main.c    **** 
 778              		.loc 1 107 0
 779 0004 FFF7FEFF 		bl	HAL_Init
 780              	.LVL46:
 114:Src/main.c    **** 
 781              		.loc 1 114 0
 782 0008 FFF7FEFF 		bl	SystemClock_Config
 783              	.LVL47:
 121:Src/main.c    ****   MX_DMA_Init();
 784              		.loc 1 121 0
 785 000c FFF7FEFF 		bl	MX_GPIO_Init
 786              	.LVL48:
 122:Src/main.c    ****   MX_TIM3_Init();
 787              		.loc 1 122 0
 788 0010 FFF7FEFF 		bl	MX_DMA_Init
 789              	.LVL49:
 123:Src/main.c    ****   MX_ADC1_Init();
 790              		.loc 1 123 0
 791 0014 FFF7FEFF 		bl	MX_TIM3_Init
 792              	.LVL50:
 124:Src/main.c    ****   MX_USART2_UART_Init();
 793              		.loc 1 124 0
 794 0018 FFF7FEFF 		bl	MX_ADC1_Init
 795              	.LVL51:
 125:Src/main.c    **** 
 796              		.loc 1 125 0
 797 001c FFF7FEFF 		bl	MX_USART2_UART_Init
 798              	.LVL52:
 145:Src/main.c    ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 799              		.loc 1 145 0
 800 0020 144C     		ldr	r4, .L56
 801 0022 0BAD     		add	r5, sp, #44
 802 0024 2646     		mov	r6, r4
 803 0026 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 804 0028 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 805 002a 3368     		ldr	r3, [r6]
 806 002c 2B60     		str	r3, [r5]
 146:Src/main.c    **** 
 807              		.loc 1 146 0
 808 002e 0021     		movs	r1, #0
 809 0030 0BA8     		add	r0, sp, #44
 810 0032 FFF7FEFF 		bl	osThreadCreate
 811              	.LVL53:
 812 0036 104B     		ldr	r3, .L56+4
 813 0038 1860     		str	r0, [r3]
 149:Src/main.c    ****   motor_taskHandle = osThreadCreate(osThread(motor_task), NULL);
ARM GAS  /tmp/ccFjr7Es.s 			page 25


 814              		.loc 1 149 0
 815 003a 06AD     		add	r5, sp, #24
 816 003c 04F11406 		add	r6, r4, #20
 817 0040 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 818 0042 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 819 0044 3368     		ldr	r3, [r6]
 820 0046 2B60     		str	r3, [r5]
 150:Src/main.c    **** 
 821              		.loc 1 150 0
 822 0048 0021     		movs	r1, #0
 823 004a 06A8     		add	r0, sp, #24
 824 004c FFF7FEFF 		bl	osThreadCreate
 825              	.LVL54:
 826 0050 0A4B     		ldr	r3, .L56+8
 827 0052 1860     		str	r0, [r3]
 153:Src/main.c    ****   adc_dma_taskHandle = osThreadCreate(osThread(adc_dma_task), NULL);
 828              		.loc 1 153 0
 829 0054 01AD     		add	r5, sp, #4
 830 0056 2834     		adds	r4, r4, #40
 831 0058 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 832 005a 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 833 005c 2368     		ldr	r3, [r4]
 834 005e 2B60     		str	r3, [r5]
 154:Src/main.c    **** 
 835              		.loc 1 154 0
 836 0060 0021     		movs	r1, #0
 837 0062 01A8     		add	r0, sp, #4
 838 0064 FFF7FEFF 		bl	osThreadCreate
 839              	.LVL55:
 840 0068 054B     		ldr	r3, .L56+12
 841 006a 1860     		str	r0, [r3]
 166:Src/main.c    ****   
 842              		.loc 1 166 0
 843 006c FFF7FEFF 		bl	osKernelStart
 844              	.LVL56:
 845              	.L54:
 846 0070 FEE7     		b	.L54
 847              	.L57:
 848 0072 00BF     		.align	2
 849              	.L56:
 850 0074 00000000 		.word	.LANCHOR0
 851 0078 00000000 		.word	defaultTaskHandle
 852 007c 00000000 		.word	motor_taskHandle
 853 0080 00000000 		.word	adc_dma_taskHandle
 854              		.cfi_endproc
 855              	.LFE129:
 857              		.comm	adc_dma_taskHandle,4,4
 858              		.comm	motor_taskHandle,4,4
 859              		.comm	defaultTaskHandle,4,4
 860              		.comm	huart2,112,4
 861              		.comm	htim3,64,4
 862              		.comm	hdma_adc1,68,4
 863              		.comm	hadc1,84,4
 864              		.section	.rodata
 865              		.align	2
 866              		.set	.LANCHOR0,. + 0
 867              	.LC7:
ARM GAS  /tmp/ccFjr7Es.s 			page 26


 868 0000 28000000 		.word	.LC0
 869 0004 00000000 		.word	StartDefaultTask
 870 0008 0000     		.short	0
 871 000a 0000     		.space	2
 872 000c 00000000 		.word	0
 873 0010 80000000 		.word	128
 874              	.LC8:
 875 0014 1C000000 		.word	.LC2
 876 0018 00000000 		.word	motor
 877 001c FDFF     		.short	-3
 878 001e 0000     		.space	2
 879 0020 00000000 		.word	0
 880 0024 00010000 		.word	256
 881              	.LC9:
 882 0028 0C000000 		.word	.LC4
 883 002c 00000000 		.word	adcControl
 884 0030 FDFF     		.short	-3
 885 0032 0000     		.space	2
 886 0034 00000000 		.word	0
 887 0038 00010000 		.word	256
 888              		.section	.rodata.str1.4,"aMS",%progbits,1
 889              		.align	2
 890              	.LC6:
 891 0000 5372632F 		.ascii	"Src/main.c\000"
 891      6D61696E 
 891      2E6300
 892 000b 00       		.space	1
 893              	.LC4:
 894 000c 6164635F 		.ascii	"adc_dma_task\000"
 894      646D615F 
 894      7461736B 
 894      00
 895 0019 000000   		.space	3
 896              	.LC2:
 897 001c 6D6F746F 		.ascii	"motor_task\000"
 897      725F7461 
 897      736B00
 898 0027 00       		.space	1
 899              	.LC0:
 900 0028 64656661 		.ascii	"defaultTask\000"
 900      756C7454 
 900      61736B00 
 901              		.text
 902              	.Letext0:
 903              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 904              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 905              		.file 4 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303x8.h"
 906              		.file 5 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f3xx.h"
 907              		.file 6 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
 908              		.file 7 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
 909              		.file 8 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_gpio.h"
 910              		.file 9 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
 911              		.file 10 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
 912              		.file 11 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc.h"
 913              		.file 12 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
 914              		.file 13 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim_ex.h"
 915              		.file 14 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
ARM GAS  /tmp/ccFjr7Es.s 			page 27


 916              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 917              		.file 16 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 918              		.file 17 "Drivers/CMSIS/Include/core_cm4.h"
 919              		.file 18 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_cortex.h"
 920              		.file 19 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
ARM GAS  /tmp/ccFjr7Es.s 			page 28


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccFjr7Es.s:22     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccFjr7Es.s:26     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccFjr7Es.s:148    .text.MX_GPIO_Init:00000000000000a4 $d
     /tmp/ccFjr7Es.s:155    .text.MX_DMA_Init:0000000000000000 $t
     /tmp/ccFjr7Es.s:159    .text.MX_DMA_Init:0000000000000000 MX_DMA_Init
     /tmp/ccFjr7Es.s:202    .text.MX_DMA_Init:0000000000000030 $d
     /tmp/ccFjr7Es.s:207    .text.StartDefaultTask:0000000000000000 $t
     /tmp/ccFjr7Es.s:212    .text.StartDefaultTask:0000000000000000 StartDefaultTask
     /tmp/ccFjr7Es.s:240    .text.StartDefaultTask:0000000000000014 $d
     /tmp/ccFjr7Es.s:245    .text.motor:0000000000000000 $t
     /tmp/ccFjr7Es.s:250    .text.motor:0000000000000000 motor
     /tmp/ccFjr7Es.s:273    .text.adcControl:0000000000000000 $t
     /tmp/ccFjr7Es.s:278    .text.adcControl:0000000000000000 adcControl
     /tmp/ccFjr7Es.s:301    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccFjr7Es.s:306    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccFjr7Es.s:331    .text.HAL_TIM_PeriodElapsedCallback:0000000000000010 $d
     /tmp/ccFjr7Es.s:336    .text._Error_Handler:0000000000000000 $t
     /tmp/ccFjr7Es.s:341    .text._Error_Handler:0000000000000000 _Error_Handler
     /tmp/ccFjr7Es.s:356    .text.MX_TIM3_Init:0000000000000000 $t
     /tmp/ccFjr7Es.s:360    .text.MX_TIM3_Init:0000000000000000 MX_TIM3_Init
     /tmp/ccFjr7Es.s:467    .text.MX_TIM3_Init:0000000000000090 $d
                            *COM*:0000000000000040 htim3
     /tmp/ccFjr7Es.s:474    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccFjr7Es.s:478    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccFjr7Es.s:588    .text.MX_ADC1_Init:000000000000008c $d
                            *COM*:0000000000000054 hadc1
     /tmp/ccFjr7Es.s:594    .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/ccFjr7Es.s:598    .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/ccFjr7Es.s:646    .text.MX_USART2_UART_Init:0000000000000034 $d
                            *COM*:0000000000000070 huart2
     /tmp/ccFjr7Es.s:653    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccFjr7Es.s:658    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccFjr7Es.s:751    .text.SystemClock_Config:0000000000000078 $d
     /tmp/ccFjr7Es.s:757    .text.main:0000000000000000 $t
     /tmp/ccFjr7Es.s:762    .text.main:0000000000000000 main
     /tmp/ccFjr7Es.s:850    .text.main:0000000000000074 $d
                            *COM*:0000000000000004 defaultTaskHandle
                            *COM*:0000000000000004 motor_taskHandle
                            *COM*:0000000000000004 adc_dma_taskHandle
                            *COM*:0000000000000044 hdma_adc1
     /tmp/ccFjr7Es.s:865    .rodata:0000000000000000 $d
     /tmp/ccFjr7Es.s:889    .rodata.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_GPIO_TogglePin
osDelay
HAL_IncTick
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
ARM GAS  /tmp/ccFjr7Es.s 			page 29


HAL_TIM_MspPostInit
HAL_ADC_Init
HAL_ADCEx_MultiModeConfigChannel
HAL_ADC_ConfigChannel
HAL_UART_Init
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_Init
osThreadCreate
osKernelStart
