ARM GAS  /tmp/ccFwwYVq.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"main.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.MX_GPIO_Init,"ax",%progbits
  22              		.align	2
  23              		.thumb
  24              		.thumb_func
  26              	MX_GPIO_Init:
  27              	.LFB132:
  28              		.file 1 "Src/main.c"
   1:Src/main.c    **** /**
   2:Src/main.c    ****   ******************************************************************************
   3:Src/main.c    ****   * File Name          : main.c
   4:Src/main.c    ****   * Description        : Main program body
   5:Src/main.c    ****   ******************************************************************************
   6:Src/main.c    ****   * This notice applies to any and all portions of this file
   7:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   8:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
   9:Src/main.c    ****   * inserted by the user or by software development tools
  10:Src/main.c    ****   * are owned by their respective copyright owners.
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * Copyright (c) 2017 STMicroelectronics International N.V. 
  13:Src/main.c    ****   * All rights reserved.
  14:Src/main.c    ****   *
  15:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without 
  16:Src/main.c    ****   * modification, are permitted, provided that the following conditions are met:
  17:Src/main.c    ****   *
  18:Src/main.c    ****   * 1. Redistribution of source code must retain the above copyright notice, 
  19:Src/main.c    ****   *    this list of conditions and the following disclaimer.
  20:Src/main.c    ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  21:Src/main.c    ****   *    this list of conditions and the following disclaimer in the documentation
  22:Src/main.c    ****   *    and/or other materials provided with the distribution.
  23:Src/main.c    ****   * 3. Neither the name of STMicroelectronics nor the names of other 
  24:Src/main.c    ****   *    contributors to this software may be used to endorse or promote products 
  25:Src/main.c    ****   *    derived from this software without specific written permission.
  26:Src/main.c    ****   * 4. This software, including modifications and/or derivative works of this 
  27:Src/main.c    ****   *    software, must execute solely and exclusively on microcontroller or
  28:Src/main.c    ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  29:Src/main.c    ****   * 5. Redistribution and use of this software other than as permitted under 
  30:Src/main.c    ****   *    this license is void and will automatically terminate your rights under 
ARM GAS  /tmp/ccFwwYVq.s 			page 2


  31:Src/main.c    ****   *    this license. 
  32:Src/main.c    ****   *
  33:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  34:Src/main.c    ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  35:Src/main.c    ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  36:Src/main.c    ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  37:Src/main.c    ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  38:Src/main.c    ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  39:Src/main.c    ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  40:Src/main.c    ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  41:Src/main.c    ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  42:Src/main.c    ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  43:Src/main.c    ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  44:Src/main.c    ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  45:Src/main.c    ****   *
  46:Src/main.c    ****   ******************************************************************************
  47:Src/main.c    ****   */
  48:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  49:Src/main.c    **** #include "main.h"
  50:Src/main.c    **** #include "stm32f3xx_hal.h"
  51:Src/main.c    **** #include "cmsis_os.h"
  52:Src/main.c    **** 
  53:Src/main.c    **** /* USER CODE BEGIN Includes */
  54:Src/main.c    **** 
  55:Src/main.c    **** /* USER CODE END Includes */
  56:Src/main.c    **** 
  57:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  58:Src/main.c    **** TIM_HandleTypeDef htim3;
  59:Src/main.c    **** 
  60:Src/main.c    **** osThreadId defaultTaskHandle;
  61:Src/main.c    **** osThreadId pwm_taskHandle;
  62:Src/main.c    **** 
  63:Src/main.c    **** /* USER CODE BEGIN PV */
  64:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  65:Src/main.c    **** 
  66:Src/main.c    **** /* USER CODE END PV */
  67:Src/main.c    **** 
  68:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  69:Src/main.c    **** void SystemClock_Config(void);
  70:Src/main.c    **** static void MX_GPIO_Init(void);
  71:Src/main.c    **** static void MX_TIM3_Init(void);
  72:Src/main.c    **** void StartDefaultTask(void const * argument);
  73:Src/main.c    **** void pwmTask(void const * argument);                                    
  74:Src/main.c    **** void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
  75:Src/main.c    ****                                 
  76:Src/main.c    **** 
  77:Src/main.c    **** /* USER CODE BEGIN PFP */
  78:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  79:Src/main.c    **** 
  80:Src/main.c    **** /* USER CODE END PFP */
  81:Src/main.c    **** 
  82:Src/main.c    **** /* USER CODE BEGIN 0 */
  83:Src/main.c    **** 
  84:Src/main.c    **** /* USER CODE END 0 */
  85:Src/main.c    **** 
  86:Src/main.c    **** int main(void)
  87:Src/main.c    **** {
ARM GAS  /tmp/ccFwwYVq.s 			page 3


  88:Src/main.c    **** 
  89:Src/main.c    ****   /* USER CODE BEGIN 1 */
  90:Src/main.c    **** 
  91:Src/main.c    ****   /* USER CODE END 1 */
  92:Src/main.c    **** 
  93:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
  94:Src/main.c    **** 
  95:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  96:Src/main.c    ****   HAL_Init();
  97:Src/main.c    **** 
  98:Src/main.c    ****   /* USER CODE BEGIN Init */
  99:Src/main.c    **** 
 100:Src/main.c    ****   /* USER CODE END Init */
 101:Src/main.c    **** 
 102:Src/main.c    ****   /* Configure the system clock */
 103:Src/main.c    ****   SystemClock_Config();
 104:Src/main.c    **** 
 105:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 106:Src/main.c    **** 
 107:Src/main.c    ****   /* USER CODE END SysInit */
 108:Src/main.c    **** 
 109:Src/main.c    ****   /* Initialize all configured peripherals */
 110:Src/main.c    ****   MX_GPIO_Init();
 111:Src/main.c    ****   MX_TIM3_Init();
 112:Src/main.c    **** 
 113:Src/main.c    ****   /* USER CODE BEGIN 2 */
 114:Src/main.c    **** 
 115:Src/main.c    ****   /* USER CODE END 2 */
 116:Src/main.c    **** 
 117:Src/main.c    ****   /* USER CODE BEGIN RTOS_MUTEX */
 118:Src/main.c    ****   /* add mutexes, ... */
 119:Src/main.c    ****   /* USER CODE END RTOS_MUTEX */
 120:Src/main.c    **** 
 121:Src/main.c    ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 122:Src/main.c    ****   /* add semaphores, ... */
 123:Src/main.c    ****   /* USER CODE END RTOS_SEMAPHORES */
 124:Src/main.c    **** 
 125:Src/main.c    ****   /* USER CODE BEGIN RTOS_TIMERS */
 126:Src/main.c    ****   /* start timers, add new ones, ... */
 127:Src/main.c    ****   /* USER CODE END RTOS_TIMERS */
 128:Src/main.c    **** 
 129:Src/main.c    ****   /* Create the thread(s) */
 130:Src/main.c    ****   /* definition and creation of defaultTask */
 131:Src/main.c    ****   osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 132:Src/main.c    ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 133:Src/main.c    **** 
 134:Src/main.c    ****   /* definition and creation of pwm_task */
 135:Src/main.c    ****   osThreadDef(pwm_task, pwmTask, osPriorityIdle, 0, 128);
 136:Src/main.c    ****   pwm_taskHandle = osThreadCreate(osThread(pwm_task), NULL);
 137:Src/main.c    **** 
 138:Src/main.c    ****   /* USER CODE BEGIN RTOS_THREADS */
 139:Src/main.c    ****   /* add threads, ... */
 140:Src/main.c    ****   /* USER CODE END RTOS_THREADS */
 141:Src/main.c    **** 
 142:Src/main.c    ****   /* USER CODE BEGIN RTOS_QUEUES */
 143:Src/main.c    ****   /* add queues, ... */
 144:Src/main.c    ****   /* USER CODE END RTOS_QUEUES */
ARM GAS  /tmp/ccFwwYVq.s 			page 4


 145:Src/main.c    ****  
 146:Src/main.c    **** 
 147:Src/main.c    ****   /* Start scheduler */
 148:Src/main.c    ****   osKernelStart();
 149:Src/main.c    ****   
 150:Src/main.c    ****   /* We should never get here as control is now taken by the scheduler */
 151:Src/main.c    **** 
 152:Src/main.c    ****   /* Infinite loop */
 153:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 154:Src/main.c    ****   while (1)
 155:Src/main.c    ****   {
 156:Src/main.c    ****   /* USER CODE END WHILE */
 157:Src/main.c    **** 
 158:Src/main.c    ****   /* USER CODE BEGIN 3 */
 159:Src/main.c    **** 
 160:Src/main.c    ****   }
 161:Src/main.c    ****   /* USER CODE END 3 */
 162:Src/main.c    **** 
 163:Src/main.c    **** }
 164:Src/main.c    **** 
 165:Src/main.c    **** /** System Clock Configuration
 166:Src/main.c    **** */
 167:Src/main.c    **** void SystemClock_Config(void)
 168:Src/main.c    **** {
 169:Src/main.c    **** 
 170:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 171:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 172:Src/main.c    **** 
 173:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 174:Src/main.c    ****     */
 175:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 176:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 177:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 178:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 179:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 180:Src/main.c    ****   {
 181:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 182:Src/main.c    ****   }
 183:Src/main.c    **** 
 184:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 185:Src/main.c    ****     */
 186:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 187:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 188:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 189:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 190:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 191:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 192:Src/main.c    **** 
 193:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 194:Src/main.c    ****   {
 195:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 196:Src/main.c    ****   }
 197:Src/main.c    **** 
 198:Src/main.c    ****     /**Configure the Systick interrupt time 
 199:Src/main.c    ****     */
 200:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 201:Src/main.c    **** 
ARM GAS  /tmp/ccFwwYVq.s 			page 5


 202:Src/main.c    ****     /**Configure the Systick 
 203:Src/main.c    ****     */
 204:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 205:Src/main.c    **** 
 206:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 207:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 208:Src/main.c    **** }
 209:Src/main.c    **** 
 210:Src/main.c    **** /* TIM3 init function */
 211:Src/main.c    **** static void MX_TIM3_Init(void)
 212:Src/main.c    **** {
 213:Src/main.c    **** 
 214:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig;
 215:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC;
 216:Src/main.c    **** 
 217:Src/main.c    ****   htim3.Instance = TIM3;
 218:Src/main.c    ****   htim3.Init.Prescaler = 99;
 219:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 220:Src/main.c    ****   htim3.Init.Period = 999;
 221:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 222:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 223:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 224:Src/main.c    ****   {
 225:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 226:Src/main.c    ****   }
 227:Src/main.c    **** 
 228:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 229:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 230:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 231:Src/main.c    ****   {
 232:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 233:Src/main.c    ****   }
 234:Src/main.c    **** 
 235:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 236:Src/main.c    ****   sConfigOC.Pulse = 249;
 237:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 238:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 239:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 240:Src/main.c    ****   {
 241:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 242:Src/main.c    ****   }
 243:Src/main.c    **** 
 244:Src/main.c    ****   HAL_TIM_MspPostInit(&htim3);
 245:Src/main.c    **** 
 246:Src/main.c    **** }
 247:Src/main.c    **** 
 248:Src/main.c    **** /** Configure pins as 
 249:Src/main.c    ****         * Analog 
 250:Src/main.c    ****         * Input 
 251:Src/main.c    ****         * Output
 252:Src/main.c    ****         * EVENT_OUT
 253:Src/main.c    ****         * EXTI
 254:Src/main.c    ****      PA2   ------> USART2_TX
 255:Src/main.c    ****      PA15   ------> USART2_RX
 256:Src/main.c    **** */
 257:Src/main.c    **** static void MX_GPIO_Init(void)
 258:Src/main.c    **** {
ARM GAS  /tmp/ccFwwYVq.s 			page 6


  29              		.loc 1 258 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 32
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33 0000 30B5     		push	{r4, r5, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 12
  36              		.cfi_offset 4, -12
  37              		.cfi_offset 5, -8
  38              		.cfi_offset 14, -4
  39 0002 89B0     		sub	sp, sp, #36
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 48
  42              	.LBB2:
 259:Src/main.c    **** 
 260:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct;
 261:Src/main.c    **** 
 262:Src/main.c    ****   /* GPIO Ports Clock Enable */
 263:Src/main.c    ****   __HAL_RCC_GPIOF_CLK_ENABLE();
  43              		.loc 1 263 0
  44 0004 1E4B     		ldr	r3, .L3
  45 0006 5A69     		ldr	r2, [r3, #20]
  46 0008 42F48002 		orr	r2, r2, #4194304
  47 000c 5A61     		str	r2, [r3, #20]
  48 000e 5A69     		ldr	r2, [r3, #20]
  49 0010 02F48002 		and	r2, r2, #4194304
  50 0014 0092     		str	r2, [sp]
  51 0016 009A     		ldr	r2, [sp]
  52              	.LBE2:
  53              	.LBB3:
 264:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  54              		.loc 1 264 0
  55 0018 5A69     		ldr	r2, [r3, #20]
  56 001a 42F40032 		orr	r2, r2, #131072
  57 001e 5A61     		str	r2, [r3, #20]
  58 0020 5A69     		ldr	r2, [r3, #20]
  59 0022 02F40032 		and	r2, r2, #131072
  60 0026 0192     		str	r2, [sp, #4]
  61 0028 019A     		ldr	r2, [sp, #4]
  62              	.LBE3:
  63              	.LBB4:
 265:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  64              		.loc 1 265 0
  65 002a 5A69     		ldr	r2, [r3, #20]
  66 002c 42F48022 		orr	r2, r2, #262144
  67 0030 5A61     		str	r2, [r3, #20]
  68 0032 5B69     		ldr	r3, [r3, #20]
  69 0034 03F48023 		and	r3, r3, #262144
  70 0038 0293     		str	r3, [sp, #8]
  71 003a 029B     		ldr	r3, [sp, #8]
  72              	.LBE4:
 266:Src/main.c    **** 
 267:Src/main.c    ****   /*Configure GPIO pin Output Level */
 268:Src/main.c    ****   HAL_GPIO_WritePin(led_sys_GPIO_Port, led_sys_Pin, GPIO_PIN_RESET);
  73              		.loc 1 268 0
  74 003c 114D     		ldr	r5, .L3+4
  75 003e 0022     		movs	r2, #0
ARM GAS  /tmp/ccFwwYVq.s 			page 7


  76 0040 0821     		movs	r1, #8
  77 0042 2846     		mov	r0, r5
  78 0044 FFF7FEFF 		bl	HAL_GPIO_WritePin
  79              	.LVL0:
 269:Src/main.c    **** 
 270:Src/main.c    ****   /*Configure GPIO pins : VCP_TX_Pin VCP_RX_Pin */
 271:Src/main.c    ****   GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
  80              		.loc 1 271 0
  81 0048 48F20403 		movw	r3, #32772
  82 004c 0393     		str	r3, [sp, #12]
 272:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  83              		.loc 1 272 0
  84 004e 0223     		movs	r3, #2
  85 0050 0493     		str	r3, [sp, #16]
 273:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
  86              		.loc 1 273 0
  87 0052 0024     		movs	r4, #0
  88 0054 0594     		str	r4, [sp, #20]
 274:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  89              		.loc 1 274 0
  90 0056 0323     		movs	r3, #3
  91 0058 0693     		str	r3, [sp, #24]
 275:Src/main.c    ****   GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  92              		.loc 1 275 0
  93 005a 0723     		movs	r3, #7
  94 005c 0793     		str	r3, [sp, #28]
 276:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
  95              		.loc 1 276 0
  96 005e 03A9     		add	r1, sp, #12
  97 0060 4FF09040 		mov	r0, #1207959552
  98 0064 FFF7FEFF 		bl	HAL_GPIO_Init
  99              	.LVL1:
 277:Src/main.c    **** 
 278:Src/main.c    ****   /*Configure GPIO pin : led_sys_Pin */
 279:Src/main.c    ****   GPIO_InitStruct.Pin = led_sys_Pin;
 100              		.loc 1 279 0
 101 0068 0823     		movs	r3, #8
 102 006a 0393     		str	r3, [sp, #12]
 280:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 103              		.loc 1 280 0
 104 006c 0123     		movs	r3, #1
 105 006e 0493     		str	r3, [sp, #16]
 281:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 106              		.loc 1 281 0
 107 0070 0594     		str	r4, [sp, #20]
 282:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 108              		.loc 1 282 0
 109 0072 0694     		str	r4, [sp, #24]
 283:Src/main.c    ****   HAL_GPIO_Init(led_sys_GPIO_Port, &GPIO_InitStruct);
 110              		.loc 1 283 0
 111 0074 03A9     		add	r1, sp, #12
 112 0076 2846     		mov	r0, r5
 113 0078 FFF7FEFF 		bl	HAL_GPIO_Init
 114              	.LVL2:
 284:Src/main.c    **** 
 285:Src/main.c    **** }
 115              		.loc 1 285 0
ARM GAS  /tmp/ccFwwYVq.s 			page 8


 116 007c 09B0     		add	sp, sp, #36
 117              	.LCFI2:
 118              		.cfi_def_cfa_offset 12
 119              		@ sp needed
 120 007e 30BD     		pop	{r4, r5, pc}
 121              	.L4:
 122              		.align	2
 123              	.L3:
 124 0080 00100240 		.word	1073876992
 125 0084 00040048 		.word	1207960576
 126              		.cfi_endproc
 127              	.LFE132:
 129              		.section	.text.StartDefaultTask,"ax",%progbits
 130              		.align	2
 131              		.global	StartDefaultTask
 132              		.thumb
 133              		.thumb_func
 135              	StartDefaultTask:
 136              	.LFB133:
 286:Src/main.c    **** 
 287:Src/main.c    **** /* USER CODE BEGIN 4 */
 288:Src/main.c    **** 
 289:Src/main.c    **** /* USER CODE END 4 */
 290:Src/main.c    **** 
 291:Src/main.c    **** /* StartDefaultTask function */
 292:Src/main.c    **** void StartDefaultTask(void const * argument)
 293:Src/main.c    **** {
 137              		.loc 1 293 0
 138              		.cfi_startproc
 139              		@ Volatile: function does not return.
 140              		@ args = 0, pretend = 0, frame = 0
 141              		@ frame_needed = 0, uses_anonymous_args = 0
 142              	.LVL3:
 143 0000 08B5     		push	{r3, lr}
 144              	.LCFI3:
 145              		.cfi_def_cfa_offset 8
 146              		.cfi_offset 3, -8
 147              		.cfi_offset 14, -4
 294:Src/main.c    **** 
 295:Src/main.c    ****   /* USER CODE BEGIN 5 */
 296:Src/main.c    ****     HAL_TIM_Base_Start(&htim3);
 148              		.loc 1 296 0
 149 0002 084C     		ldr	r4, .L8
 150 0004 2046     		mov	r0, r4
 151              	.LVL4:
 152 0006 FFF7FEFF 		bl	HAL_TIM_Base_Start
 153              	.LVL5:
 297:Src/main.c    ****     HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 154              		.loc 1 297 0
 155 000a 0021     		movs	r1, #0
 156 000c 2046     		mov	r0, r4
 157 000e FFF7FEFF 		bl	HAL_TIM_PWM_Start
 158              	.LVL6:
 159              	.L6:
 298:Src/main.c    **** 
 299:Src/main.c    ****   /* Infinite loop */
 300:Src/main.c    ****   for(;;)
ARM GAS  /tmp/ccFwwYVq.s 			page 9


 301:Src/main.c    ****   {
 302:Src/main.c    ****     HAL_GPIO_TogglePin(led_sys_GPIO_Port, led_sys_Pin);
 160              		.loc 1 302 0 discriminator 1
 161 0012 0821     		movs	r1, #8
 162 0014 0448     		ldr	r0, .L8+4
 163 0016 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 164              	.LVL7:
 303:Src/main.c    ****     osDelay(1000);
 165              		.loc 1 303 0 discriminator 1
 166 001a 4FF47A70 		mov	r0, #1000
 167 001e FFF7FEFF 		bl	osDelay
 168              	.LVL8:
 169 0022 F6E7     		b	.L6
 170              	.L9:
 171              		.align	2
 172              	.L8:
 173 0024 00000000 		.word	htim3
 174 0028 00040048 		.word	1207960576
 175              		.cfi_endproc
 176              	.LFE133:
 178              		.section	.text.pwmTask,"ax",%progbits
 179              		.align	2
 180              		.weak	pwmTask
 181              		.thumb
 182              		.thumb_func
 184              	pwmTask:
 185              	.LFB134:
 304:Src/main.c    ****   }
 305:Src/main.c    ****   /* USER CODE END 5 */ 
 306:Src/main.c    **** }
 307:Src/main.c    **** 
 308:Src/main.c    **** /* pwmTask function */
 309:Src/main.c    **** __weak void pwmTask(void const * argument)
 310:Src/main.c    **** {
 186              		.loc 1 310 0
 187              		.cfi_startproc
 188              		@ args = 0, pretend = 0, frame = 0
 189              		@ frame_needed = 0, uses_anonymous_args = 0
 190              	.LVL9:
 191 0000 08B5     		push	{r3, lr}
 192              	.LCFI4:
 193              		.cfi_def_cfa_offset 8
 194              		.cfi_offset 3, -8
 195              		.cfi_offset 14, -4
 196              	.LVL10:
 197              	.L11:
 311:Src/main.c    ****   /* USER CODE BEGIN pwmTask */
 312:Src/main.c    **** 
 313:Src/main.c    ****   /* Infinite loop */
 314:Src/main.c    ****   for(;;)
 315:Src/main.c    ****   {
 316:Src/main.c    ****     osDelay(1);
 198              		.loc 1 316 0 discriminator 1
 199 0002 0120     		movs	r0, #1
 200 0004 FFF7FEFF 		bl	osDelay
 201              	.LVL11:
 202 0008 FBE7     		b	.L11
ARM GAS  /tmp/ccFwwYVq.s 			page 10


 203              		.cfi_endproc
 204              	.LFE134:
 206 000a 00BF     		.section	.text._Error_Handler,"ax",%progbits
 207              		.align	2
 208              		.global	_Error_Handler
 209              		.thumb
 210              		.thumb_func
 212              	_Error_Handler:
 213              	.LFB135:
 317:Src/main.c    ****   }
 318:Src/main.c    ****   /* USER CODE END pwmTask */
 319:Src/main.c    **** }
 320:Src/main.c    **** 
 321:Src/main.c    **** /**
 322:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
 323:Src/main.c    ****   * @param  None
 324:Src/main.c    ****   * @retval None
 325:Src/main.c    ****   */
 326:Src/main.c    **** void _Error_Handler(char * file, int line)
 327:Src/main.c    **** {
 214              		.loc 1 327 0
 215              		.cfi_startproc
 216              		@ Volatile: function does not return.
 217              		@ args = 0, pretend = 0, frame = 0
 218              		@ frame_needed = 0, uses_anonymous_args = 0
 219              		@ link register save eliminated.
 220              	.LVL12:
 221              	.L14:
 222 0000 FEE7     		b	.L14
 223              		.cfi_endproc
 224              	.LFE135:
 226 0002 00BF     		.section	.text.MX_TIM3_Init,"ax",%progbits
 227              		.align	2
 228              		.thumb
 229              		.thumb_func
 231              	MX_TIM3_Init:
 232              	.LFB131:
 212:Src/main.c    **** 
 233              		.loc 1 212 0
 234              		.cfi_startproc
 235              		@ args = 0, pretend = 0, frame = 40
 236              		@ frame_needed = 0, uses_anonymous_args = 0
 212:Src/main.c    **** 
 237              		.loc 1 212 0
 238 0000 00B5     		push	{lr}
 239              	.LCFI5:
 240              		.cfi_def_cfa_offset 4
 241              		.cfi_offset 14, -4
 242 0002 8BB0     		sub	sp, sp, #44
 243              	.LCFI6:
 244              		.cfi_def_cfa_offset 48
 217:Src/main.c    ****   htim3.Init.Prescaler = 99;
 245              		.loc 1 217 0
 246 0004 1A48     		ldr	r0, .L20
 247 0006 1B4B     		ldr	r3, .L20+4
 248 0008 0360     		str	r3, [r0]
 218:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
ARM GAS  /tmp/ccFwwYVq.s 			page 11


 249              		.loc 1 218 0
 250 000a 6323     		movs	r3, #99
 251 000c 4360     		str	r3, [r0, #4]
 219:Src/main.c    ****   htim3.Init.Period = 999;
 252              		.loc 1 219 0
 253 000e 0023     		movs	r3, #0
 254 0010 8360     		str	r3, [r0, #8]
 220:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 255              		.loc 1 220 0
 256 0012 40F2E732 		movw	r2, #999
 257 0016 C260     		str	r2, [r0, #12]
 221:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 258              		.loc 1 221 0
 259 0018 0361     		str	r3, [r0, #16]
 222:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 260              		.loc 1 222 0
 261 001a 8361     		str	r3, [r0, #24]
 223:Src/main.c    ****   {
 262              		.loc 1 223 0
 263 001c FFF7FEFF 		bl	HAL_TIM_PWM_Init
 264              	.LVL13:
 265 0020 18B1     		cbz	r0, .L16
 225:Src/main.c    ****   }
 266              		.loc 1 225 0
 267 0022 E121     		movs	r1, #225
 268 0024 1448     		ldr	r0, .L20+8
 269 0026 FFF7FEFF 		bl	_Error_Handler
 270              	.LVL14:
 271              	.L16:
 228:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 272              		.loc 1 228 0
 273 002a 0023     		movs	r3, #0
 274 002c 0793     		str	r3, [sp, #28]
 229:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 275              		.loc 1 229 0
 276 002e 0993     		str	r3, [sp, #36]
 230:Src/main.c    ****   {
 277              		.loc 1 230 0
 278 0030 07A9     		add	r1, sp, #28
 279 0032 0F48     		ldr	r0, .L20
 280 0034 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 281              	.LVL15:
 282 0038 18B1     		cbz	r0, .L17
 232:Src/main.c    ****   }
 283              		.loc 1 232 0
 284 003a E821     		movs	r1, #232
 285 003c 0E48     		ldr	r0, .L20+8
 286 003e FFF7FEFF 		bl	_Error_Handler
 287              	.LVL16:
 288              	.L17:
 235:Src/main.c    ****   sConfigOC.Pulse = 249;
 289              		.loc 1 235 0
 290 0042 6023     		movs	r3, #96
 291 0044 0093     		str	r3, [sp]
 236:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 292              		.loc 1 236 0
 293 0046 F923     		movs	r3, #249
ARM GAS  /tmp/ccFwwYVq.s 			page 12


 294 0048 0193     		str	r3, [sp, #4]
 237:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 295              		.loc 1 237 0
 296 004a 0022     		movs	r2, #0
 297 004c 0292     		str	r2, [sp, #8]
 238:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 298              		.loc 1 238 0
 299 004e 0492     		str	r2, [sp, #16]
 239:Src/main.c    ****   {
 300              		.loc 1 239 0
 301 0050 6946     		mov	r1, sp
 302 0052 0748     		ldr	r0, .L20
 303 0054 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 304              	.LVL17:
 305 0058 18B1     		cbz	r0, .L18
 241:Src/main.c    ****   }
 306              		.loc 1 241 0
 307 005a F121     		movs	r1, #241
 308 005c 0648     		ldr	r0, .L20+8
 309 005e FFF7FEFF 		bl	_Error_Handler
 310              	.LVL18:
 311              	.L18:
 244:Src/main.c    **** 
 312              		.loc 1 244 0
 313 0062 0348     		ldr	r0, .L20
 314 0064 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 315              	.LVL19:
 246:Src/main.c    **** 
 316              		.loc 1 246 0
 317 0068 0BB0     		add	sp, sp, #44
 318              	.LCFI7:
 319              		.cfi_def_cfa_offset 4
 320              		@ sp needed
 321 006a 5DF804FB 		ldr	pc, [sp], #4
 322              	.L21:
 323 006e 00BF     		.align	2
 324              	.L20:
 325 0070 00000000 		.word	htim3
 326 0074 00040040 		.word	1073742848
 327 0078 00000000 		.word	.LC4
 328              		.cfi_endproc
 329              	.LFE131:
 331              		.section	.text.SystemClock_Config,"ax",%progbits
 332              		.align	2
 333              		.global	SystemClock_Config
 334              		.thumb
 335              		.thumb_func
 337              	SystemClock_Config:
 338              	.LFB130:
 168:Src/main.c    **** 
 339              		.loc 1 168 0
 340              		.cfi_startproc
 341              		@ args = 0, pretend = 0, frame = 64
 342              		@ frame_needed = 0, uses_anonymous_args = 0
 343 0000 00B5     		push	{lr}
 344              	.LCFI8:
 345              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccFwwYVq.s 			page 13


 346              		.cfi_offset 14, -4
 347 0002 91B0     		sub	sp, sp, #68
 348              	.LCFI9:
 349              		.cfi_def_cfa_offset 72
 175:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 350              		.loc 1 175 0
 351 0004 0223     		movs	r3, #2
 352 0006 0693     		str	r3, [sp, #24]
 176:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 353              		.loc 1 176 0
 354 0008 0123     		movs	r3, #1
 355 000a 0A93     		str	r3, [sp, #40]
 177:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 356              		.loc 1 177 0
 357 000c 1023     		movs	r3, #16
 358 000e 0B93     		str	r3, [sp, #44]
 178:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 359              		.loc 1 178 0
 360 0010 0023     		movs	r3, #0
 361 0012 0D93     		str	r3, [sp, #52]
 179:Src/main.c    ****   {
 362              		.loc 1 179 0
 363 0014 06A8     		add	r0, sp, #24
 364 0016 FFF7FEFF 		bl	HAL_RCC_OscConfig
 365              	.LVL20:
 366 001a 18B1     		cbz	r0, .L23
 181:Src/main.c    ****   }
 367              		.loc 1 181 0
 368 001c B521     		movs	r1, #181
 369 001e 1348     		ldr	r0, .L26
 370 0020 FFF7FEFF 		bl	_Error_Handler
 371              	.LVL21:
 372              	.L23:
 186:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 373              		.loc 1 186 0
 374 0024 0F23     		movs	r3, #15
 375 0026 0193     		str	r3, [sp, #4]
 188:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 376              		.loc 1 188 0
 377 0028 0021     		movs	r1, #0
 378 002a 0291     		str	r1, [sp, #8]
 189:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 379              		.loc 1 189 0
 380 002c 0391     		str	r1, [sp, #12]
 190:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 381              		.loc 1 190 0
 382 002e 0491     		str	r1, [sp, #16]
 191:Src/main.c    **** 
 383              		.loc 1 191 0
 384 0030 0591     		str	r1, [sp, #20]
 193:Src/main.c    ****   {
 385              		.loc 1 193 0
 386 0032 01A8     		add	r0, sp, #4
 387 0034 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 388              	.LVL22:
 389 0038 18B1     		cbz	r0, .L24
 195:Src/main.c    ****   }
ARM GAS  /tmp/ccFwwYVq.s 			page 14


 390              		.loc 1 195 0
 391 003a C321     		movs	r1, #195
 392 003c 0B48     		ldr	r0, .L26
 393 003e FFF7FEFF 		bl	_Error_Handler
 394              	.LVL23:
 395              	.L24:
 200:Src/main.c    **** 
 396              		.loc 1 200 0
 397 0042 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 398              	.LVL24:
 399 0046 0A4B     		ldr	r3, .L26+4
 400 0048 A3FB0030 		umull	r3, r0, r3, r0
 401 004c 8009     		lsrs	r0, r0, #6
 402 004e FFF7FEFF 		bl	HAL_SYSTICK_Config
 403              	.LVL25:
 204:Src/main.c    **** 
 404              		.loc 1 204 0
 405 0052 0420     		movs	r0, #4
 406 0054 FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 407              	.LVL26:
 207:Src/main.c    **** }
 408              		.loc 1 207 0
 409 0058 0022     		movs	r2, #0
 410 005a 0F21     		movs	r1, #15
 411 005c 4FF0FF30 		mov	r0, #-1
 412 0060 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 413              	.LVL27:
 208:Src/main.c    **** 
 414              		.loc 1 208 0
 415 0064 11B0     		add	sp, sp, #68
 416              	.LCFI10:
 417              		.cfi_def_cfa_offset 4
 418              		@ sp needed
 419 0066 5DF804FB 		ldr	pc, [sp], #4
 420              	.L27:
 421 006a 00BF     		.align	2
 422              	.L26:
 423 006c 00000000 		.word	.LC4
 424 0070 D34D6210 		.word	274877907
 425              		.cfi_endproc
 426              	.LFE130:
 428              		.section	.text.main,"ax",%progbits
 429              		.align	2
 430              		.global	main
 431              		.thumb
 432              		.thumb_func
 434              	main:
 435              	.LFB129:
  87:Src/main.c    **** 
 436              		.loc 1 87 0
 437              		.cfi_startproc
 438              		@ args = 0, pretend = 0, frame = 40
 439              		@ frame_needed = 0, uses_anonymous_args = 0
 440 0000 70B5     		push	{r4, r5, r6, lr}
 441              	.LCFI11:
 442              		.cfi_def_cfa_offset 16
 443              		.cfi_offset 4, -16
ARM GAS  /tmp/ccFwwYVq.s 			page 15


 444              		.cfi_offset 5, -12
 445              		.cfi_offset 6, -8
 446              		.cfi_offset 14, -4
 447 0002 8AB0     		sub	sp, sp, #40
 448              	.LCFI12:
 449              		.cfi_def_cfa_offset 56
  96:Src/main.c    **** 
 450              		.loc 1 96 0
 451 0004 FFF7FEFF 		bl	HAL_Init
 452              	.LVL28:
 103:Src/main.c    **** 
 453              		.loc 1 103 0
 454 0008 FFF7FEFF 		bl	SystemClock_Config
 455              	.LVL29:
 110:Src/main.c    ****   MX_TIM3_Init();
 456              		.loc 1 110 0
 457 000c FFF7FEFF 		bl	MX_GPIO_Init
 458              	.LVL30:
 111:Src/main.c    **** 
 459              		.loc 1 111 0
 460 0010 FFF7FEFF 		bl	MX_TIM3_Init
 461              	.LVL31:
 131:Src/main.c    ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 462              		.loc 1 131 0
 463 0014 0D4C     		ldr	r4, .L31
 464 0016 05AD     		add	r5, sp, #20
 465 0018 2646     		mov	r6, r4
 466 001a 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 467 001c 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 468 001e 3368     		ldr	r3, [r6]
 469 0020 2B60     		str	r3, [r5]
 132:Src/main.c    **** 
 470              		.loc 1 132 0
 471 0022 0021     		movs	r1, #0
 472 0024 05A8     		add	r0, sp, #20
 473 0026 FFF7FEFF 		bl	osThreadCreate
 474              	.LVL32:
 475 002a 094B     		ldr	r3, .L31+4
 476 002c 1860     		str	r0, [r3]
 135:Src/main.c    ****   pwm_taskHandle = osThreadCreate(osThread(pwm_task), NULL);
 477              		.loc 1 135 0
 478 002e 6D46     		mov	r5, sp
 479 0030 1434     		adds	r4, r4, #20
 480 0032 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 481 0034 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 482 0036 2368     		ldr	r3, [r4]
 483 0038 2B60     		str	r3, [r5]
 136:Src/main.c    **** 
 484              		.loc 1 136 0
 485 003a 0021     		movs	r1, #0
 486 003c 6846     		mov	r0, sp
 487 003e FFF7FEFF 		bl	osThreadCreate
 488              	.LVL33:
 489 0042 044B     		ldr	r3, .L31+8
 490 0044 1860     		str	r0, [r3]
 148:Src/main.c    ****   
 491              		.loc 1 148 0
ARM GAS  /tmp/ccFwwYVq.s 			page 16


 492 0046 FFF7FEFF 		bl	osKernelStart
 493              	.LVL34:
 494              	.L29:
 495 004a FEE7     		b	.L29
 496              	.L32:
 497              		.align	2
 498              	.L31:
 499 004c 00000000 		.word	.LANCHOR0
 500 0050 00000000 		.word	defaultTaskHandle
 501 0054 00000000 		.word	pwm_taskHandle
 502              		.cfi_endproc
 503              	.LFE129:
 505              		.comm	pwm_taskHandle,4,4
 506              		.comm	defaultTaskHandle,4,4
 507              		.comm	htim3,64,4
 508              		.section	.rodata
 509              		.align	2
 510              		.set	.LANCHOR0,. + 0
 511              	.LC5:
 512 0000 18000000 		.word	.LC0
 513 0004 00000000 		.word	StartDefaultTask
 514 0008 0000     		.short	0
 515 000a 0000     		.space	2
 516 000c 00000000 		.word	0
 517 0010 80000000 		.word	128
 518              	.LC6:
 519 0014 0C000000 		.word	.LC2
 520 0018 00000000 		.word	pwmTask
 521 001c FDFF     		.short	-3
 522 001e 0000     		.space	2
 523 0020 00000000 		.word	0
 524 0024 80000000 		.word	128
 525              		.section	.rodata.str1.4,"aMS",%progbits,1
 526              		.align	2
 527              	.LC4:
 528 0000 5372632F 		.ascii	"Src/main.c\000"
 528      6D61696E 
 528      2E6300
 529 000b 00       		.space	1
 530              	.LC2:
 531 000c 70776D5F 		.ascii	"pwm_task\000"
 531      7461736B 
 531      00
 532 0015 000000   		.space	3
 533              	.LC0:
 534 0018 64656661 		.ascii	"defaultTask\000"
 534      756C7454 
 534      61736B00 
 535              		.text
 536              	.Letext0:
 537              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 538              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 539              		.file 4 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303x8.h"
 540              		.file 5 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
 541              		.file 6 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
 542              		.file 7 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_gpio.h"
 543              		.file 8 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
ARM GAS  /tmp/ccFwwYVq.s 			page 17


 544              		.file 9 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
 545              		.file 10 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim_ex.h"
 546              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 547              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 548              		.file 13 "Drivers/CMSIS/Include/core_cm4.h"
 549              		.file 14 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_cortex.h"
 550              		.file 15 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
ARM GAS  /tmp/ccFwwYVq.s 			page 18


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccFwwYVq.s:22     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccFwwYVq.s:26     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccFwwYVq.s:124    .text.MX_GPIO_Init:0000000000000080 $d
     /tmp/ccFwwYVq.s:130    .text.StartDefaultTask:0000000000000000 $t
     /tmp/ccFwwYVq.s:135    .text.StartDefaultTask:0000000000000000 StartDefaultTask
     /tmp/ccFwwYVq.s:173    .text.StartDefaultTask:0000000000000024 $d
                            *COM*:0000000000000040 htim3
     /tmp/ccFwwYVq.s:179    .text.pwmTask:0000000000000000 $t
     /tmp/ccFwwYVq.s:184    .text.pwmTask:0000000000000000 pwmTask
     /tmp/ccFwwYVq.s:207    .text._Error_Handler:0000000000000000 $t
     /tmp/ccFwwYVq.s:212    .text._Error_Handler:0000000000000000 _Error_Handler
     /tmp/ccFwwYVq.s:227    .text.MX_TIM3_Init:0000000000000000 $t
     /tmp/ccFwwYVq.s:231    .text.MX_TIM3_Init:0000000000000000 MX_TIM3_Init
     /tmp/ccFwwYVq.s:325    .text.MX_TIM3_Init:0000000000000070 $d
     /tmp/ccFwwYVq.s:332    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccFwwYVq.s:337    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccFwwYVq.s:423    .text.SystemClock_Config:000000000000006c $d
     /tmp/ccFwwYVq.s:429    .text.main:0000000000000000 $t
     /tmp/ccFwwYVq.s:434    .text.main:0000000000000000 main
     /tmp/ccFwwYVq.s:499    .text.main:000000000000004c $d
                            *COM*:0000000000000004 defaultTaskHandle
                            *COM*:0000000000000004 pwm_taskHandle
     /tmp/ccFwwYVq.s:509    .rodata:0000000000000000 $d
     /tmp/ccFwwYVq.s:526    .rodata.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_TIM_Base_Start
HAL_TIM_PWM_Start
HAL_GPIO_TogglePin
osDelay
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIM_MspPostInit
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
osThreadCreate
osKernelStart
