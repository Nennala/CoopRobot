ARM GAS  /tmp/ccYk2LVE.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m4
   3              		.eabi_attribute 27, 1
   4              		.eabi_attribute 28, 1
   5              		.fpu fpv4-sp-d16
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.thumb
  16              		.syntax unified
  17              		.file	"main.c"
  18              		.text
  19              	.Ltext0:
  20              		.cfi_sections	.debug_frame
  21              		.section	.text.MX_GPIO_Init,"ax",%progbits
  22              		.align	2
  23              		.thumb
  24              		.thumb_func
  26              	MX_GPIO_Init:
  27              	.LFB134:
  28              		.file 1 "Src/main.c"
   1:Src/main.c    **** /**
   2:Src/main.c    ****   ******************************************************************************
   3:Src/main.c    ****   * File Name          : main.c
   4:Src/main.c    ****   * Description        : Main program body
   5:Src/main.c    ****   ******************************************************************************
   6:Src/main.c    ****   * This notice applies to any and all portions of this file
   7:Src/main.c    ****   * that are not between comment pairs USER CODE BEGIN and
   8:Src/main.c    ****   * USER CODE END. Other portions of this file, whether 
   9:Src/main.c    ****   * inserted by the user or by software development tools
  10:Src/main.c    ****   * are owned by their respective copyright owners.
  11:Src/main.c    ****   *
  12:Src/main.c    ****   * Copyright (c) 2017 STMicroelectronics International N.V. 
  13:Src/main.c    ****   * All rights reserved.
  14:Src/main.c    ****   *
  15:Src/main.c    ****   * Redistribution and use in source and binary forms, with or without 
  16:Src/main.c    ****   * modification, are permitted, provided that the following conditions are met:
  17:Src/main.c    ****   *
  18:Src/main.c    ****   * 1. Redistribution of source code must retain the above copyright notice, 
  19:Src/main.c    ****   *    this list of conditions and the following disclaimer.
  20:Src/main.c    ****   * 2. Redistributions in binary form must reproduce the above copyright notice,
  21:Src/main.c    ****   *    this list of conditions and the following disclaimer in the documentation
  22:Src/main.c    ****   *    and/or other materials provided with the distribution.
  23:Src/main.c    ****   * 3. Neither the name of STMicroelectronics nor the names of other 
  24:Src/main.c    ****   *    contributors to this software may be used to endorse or promote products 
  25:Src/main.c    ****   *    derived from this software without specific written permission.
  26:Src/main.c    ****   * 4. This software, including modifications and/or derivative works of this 
  27:Src/main.c    ****   *    software, must execute solely and exclusively on microcontroller or
  28:Src/main.c    ****   *    microprocessor devices manufactured by or for STMicroelectronics.
  29:Src/main.c    ****   * 5. Redistribution and use of this software other than as permitted under 
  30:Src/main.c    ****   *    this license is void and will automatically terminate your rights under 
ARM GAS  /tmp/ccYk2LVE.s 			page 2


  31:Src/main.c    ****   *    this license. 
  32:Src/main.c    ****   *
  33:Src/main.c    ****   * THIS SOFTWARE IS PROVIDED BY STMICROELECTRONICS AND CONTRIBUTORS "AS IS" 
  34:Src/main.c    ****   * AND ANY EXPRESS, IMPLIED OR STATUTORY WARRANTIES, INCLUDING, BUT NOT 
  35:Src/main.c    ****   * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A 
  36:Src/main.c    ****   * PARTICULAR PURPOSE AND NON-INFRINGEMENT OF THIRD PARTY INTELLECTUAL PROPERTY
  37:Src/main.c    ****   * RIGHTS ARE DISCLAIMED TO THE FULLEST EXTENT PERMITTED BY LAW. IN NO EVENT 
  38:Src/main.c    ****   * SHALL STMICROELECTRONICS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  39:Src/main.c    ****   * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  40:Src/main.c    ****   * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, 
  41:Src/main.c    ****   * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF 
  42:Src/main.c    ****   * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
  43:Src/main.c    ****   * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
  44:Src/main.c    ****   * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  45:Src/main.c    ****   *
  46:Src/main.c    ****   ******************************************************************************
  47:Src/main.c    ****   */
  48:Src/main.c    **** /* Includes ------------------------------------------------------------------*/
  49:Src/main.c    **** #include "main.h"
  50:Src/main.c    **** #include "stm32f3xx_hal.h"
  51:Src/main.c    **** #include "cmsis_os.h"
  52:Src/main.c    **** 
  53:Src/main.c    **** /* USER CODE BEGIN Includes */
  54:Src/main.c    **** 
  55:Src/main.c    **** /* USER CODE END Includes */
  56:Src/main.c    **** 
  57:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  58:Src/main.c    **** ADC_HandleTypeDef hadc1;
  59:Src/main.c    **** 
  60:Src/main.c    **** TIM_HandleTypeDef htim3;
  61:Src/main.c    **** 
  62:Src/main.c    **** UART_HandleTypeDef huart2;
  63:Src/main.c    **** 
  64:Src/main.c    **** osThreadId defaultTaskHandle;
  65:Src/main.c    **** osThreadId motor_taskHandle;
  66:Src/main.c    **** osThreadId adc_dma_taskHandle;
  67:Src/main.c    **** 
  68:Src/main.c    **** /* USER CODE BEGIN PV */
  69:Src/main.c    **** /* Private variables ---------------------------------------------------------*/
  70:Src/main.c    **** 
  71:Src/main.c    **** /* USER CODE END PV */
  72:Src/main.c    **** 
  73:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
  74:Src/main.c    **** void SystemClock_Config(void);
  75:Src/main.c    **** static void MX_GPIO_Init(void);
  76:Src/main.c    **** static void MX_TIM3_Init(void);
  77:Src/main.c    **** static void MX_ADC1_Init(void);
  78:Src/main.c    **** static void MX_USART2_UART_Init(void);
  79:Src/main.c    **** void StartDefaultTask(void const * argument);
  80:Src/main.c    **** void motor(void const * argument);
  81:Src/main.c    **** void adcControl(void const * argument);
  82:Src/main.c    ****                                     
  83:Src/main.c    **** void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
  84:Src/main.c    ****                                 
  85:Src/main.c    **** 
  86:Src/main.c    **** /* USER CODE BEGIN PFP */
  87:Src/main.c    **** /* Private function prototypes -----------------------------------------------*/
ARM GAS  /tmp/ccYk2LVE.s 			page 3


  88:Src/main.c    **** 
  89:Src/main.c    **** /* USER CODE END PFP */
  90:Src/main.c    **** 
  91:Src/main.c    **** /* USER CODE BEGIN 0 */
  92:Src/main.c    **** 
  93:Src/main.c    **** /* USER CODE END 0 */
  94:Src/main.c    **** 
  95:Src/main.c    **** int main(void)
  96:Src/main.c    **** {
  97:Src/main.c    **** 
  98:Src/main.c    ****   /* USER CODE BEGIN 1 */
  99:Src/main.c    **** 
 100:Src/main.c    ****   /* USER CODE END 1 */
 101:Src/main.c    **** 
 102:Src/main.c    ****   /* MCU Configuration----------------------------------------------------------*/
 103:Src/main.c    **** 
 104:Src/main.c    ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 105:Src/main.c    ****   HAL_Init();
 106:Src/main.c    **** 
 107:Src/main.c    ****   /* USER CODE BEGIN Init */
 108:Src/main.c    **** 
 109:Src/main.c    ****   /* USER CODE END Init */
 110:Src/main.c    **** 
 111:Src/main.c    ****   /* Configure the system clock */
 112:Src/main.c    ****   SystemClock_Config();
 113:Src/main.c    **** 
 114:Src/main.c    ****   /* USER CODE BEGIN SysInit */
 115:Src/main.c    **** 
 116:Src/main.c    ****   /* USER CODE END SysInit */
 117:Src/main.c    **** 
 118:Src/main.c    ****   /* Initialize all configured peripherals */
 119:Src/main.c    ****   MX_GPIO_Init();
 120:Src/main.c    ****   MX_TIM3_Init();
 121:Src/main.c    ****   MX_ADC1_Init();
 122:Src/main.c    ****   MX_USART2_UART_Init();
 123:Src/main.c    **** 
 124:Src/main.c    ****   /* USER CODE BEGIN 2 */
 125:Src/main.c    **** 
 126:Src/main.c    ****   /* USER CODE END 2 */
 127:Src/main.c    **** 
 128:Src/main.c    ****   /* USER CODE BEGIN RTOS_MUTEX */
 129:Src/main.c    ****   /* add mutexes, ... */
 130:Src/main.c    ****   /* USER CODE END RTOS_MUTEX */
 131:Src/main.c    **** 
 132:Src/main.c    ****   /* USER CODE BEGIN RTOS_SEMAPHORES */
 133:Src/main.c    ****   /* add semaphores, ... */
 134:Src/main.c    ****   /* USER CODE END RTOS_SEMAPHORES */
 135:Src/main.c    **** 
 136:Src/main.c    ****   /* USER CODE BEGIN RTOS_TIMERS */
 137:Src/main.c    ****   /* start timers, add new ones, ... */
 138:Src/main.c    ****   /* USER CODE END RTOS_TIMERS */
 139:Src/main.c    **** 
 140:Src/main.c    ****   /* Create the thread(s) */
 141:Src/main.c    ****   /* definition and creation of defaultTask */
 142:Src/main.c    ****   osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 143:Src/main.c    ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 144:Src/main.c    **** 
ARM GAS  /tmp/ccYk2LVE.s 			page 4


 145:Src/main.c    ****   /* definition and creation of motor_task */
 146:Src/main.c    ****   osThreadDef(motor_task, motor, osPriorityIdle, 0, 256);
 147:Src/main.c    ****   motor_taskHandle = osThreadCreate(osThread(motor_task), NULL);
 148:Src/main.c    **** 
 149:Src/main.c    ****   /* definition and creation of adc_dma_task */
 150:Src/main.c    ****   osThreadDef(adc_dma_task, adcControl, osPriorityIdle, 0, 256);
 151:Src/main.c    ****   adc_dma_taskHandle = osThreadCreate(osThread(adc_dma_task), NULL);
 152:Src/main.c    **** 
 153:Src/main.c    ****   /* USER CODE BEGIN RTOS_THREADS */
 154:Src/main.c    ****   /* add threads, ... */
 155:Src/main.c    ****   /* USER CODE END RTOS_THREADS */
 156:Src/main.c    **** 
 157:Src/main.c    ****   /* USER CODE BEGIN RTOS_QUEUES */
 158:Src/main.c    ****   /* add queues, ... */
 159:Src/main.c    ****   /* USER CODE END RTOS_QUEUES */
 160:Src/main.c    ****  
 161:Src/main.c    **** 
 162:Src/main.c    ****   /* Start scheduler */
 163:Src/main.c    ****   osKernelStart();
 164:Src/main.c    ****   
 165:Src/main.c    ****   /* We should never get here as control is now taken by the scheduler */
 166:Src/main.c    **** 
 167:Src/main.c    ****   /* Infinite loop */
 168:Src/main.c    ****   /* USER CODE BEGIN WHILE */
 169:Src/main.c    ****   while (1)
 170:Src/main.c    ****   {
 171:Src/main.c    ****   /* USER CODE END WHILE */
 172:Src/main.c    **** 
 173:Src/main.c    ****   /* USER CODE BEGIN 3 */
 174:Src/main.c    **** 
 175:Src/main.c    ****   }
 176:Src/main.c    ****   /* USER CODE END 3 */
 177:Src/main.c    **** 
 178:Src/main.c    **** }
 179:Src/main.c    **** 
 180:Src/main.c    **** /** System Clock Configuration
 181:Src/main.c    **** */
 182:Src/main.c    **** void SystemClock_Config(void)
 183:Src/main.c    **** {
 184:Src/main.c    **** 
 185:Src/main.c    ****   RCC_OscInitTypeDef RCC_OscInitStruct;
 186:Src/main.c    ****   RCC_ClkInitTypeDef RCC_ClkInitStruct;
 187:Src/main.c    ****   RCC_PeriphCLKInitTypeDef PeriphClkInit;
 188:Src/main.c    **** 
 189:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 190:Src/main.c    ****     */
 191:Src/main.c    ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 192:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 193:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 194:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 195:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 196:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 197:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 198:Src/main.c    ****   {
 199:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 200:Src/main.c    ****   }
 201:Src/main.c    **** 
ARM GAS  /tmp/ccYk2LVE.s 			page 5


 202:Src/main.c    ****     /**Initializes the CPU, AHB and APB busses clocks 
 203:Src/main.c    ****     */
 204:Src/main.c    ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 205:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 206:Src/main.c    ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 207:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 208:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 209:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 210:Src/main.c    **** 
 211:Src/main.c    ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 212:Src/main.c    ****   {
 213:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 214:Src/main.c    ****   }
 215:Src/main.c    **** 
 216:Src/main.c    ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 217:Src/main.c    ****   PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 218:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 219:Src/main.c    ****   {
 220:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 221:Src/main.c    ****   }
 222:Src/main.c    **** 
 223:Src/main.c    ****     /**Configure the Systick interrupt time 
 224:Src/main.c    ****     */
 225:Src/main.c    ****   HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 226:Src/main.c    **** 
 227:Src/main.c    ****     /**Configure the Systick 
 228:Src/main.c    ****     */
 229:Src/main.c    ****   HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 230:Src/main.c    **** 
 231:Src/main.c    ****   /* SysTick_IRQn interrupt configuration */
 232:Src/main.c    ****   HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 233:Src/main.c    **** }
 234:Src/main.c    **** 
 235:Src/main.c    **** /* ADC1 init function */
 236:Src/main.c    **** static void MX_ADC1_Init(void)
 237:Src/main.c    **** {
 238:Src/main.c    **** 
 239:Src/main.c    ****   ADC_MultiModeTypeDef multimode;
 240:Src/main.c    ****   ADC_ChannelConfTypeDef sConfig;
 241:Src/main.c    **** 
 242:Src/main.c    ****     /**Common config 
 243:Src/main.c    ****     */
 244:Src/main.c    ****   hadc1.Instance = ADC1;
 245:Src/main.c    ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 246:Src/main.c    ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 247:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 248:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 249:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 250:Src/main.c    ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 251:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 252:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 253:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
 254:Src/main.c    ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 255:Src/main.c    ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 256:Src/main.c    ****   hadc1.Init.LowPowerAutoWait = DISABLE;
 257:Src/main.c    ****   hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 258:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
ARM GAS  /tmp/ccYk2LVE.s 			page 6


 259:Src/main.c    ****   {
 260:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 261:Src/main.c    ****   }
 262:Src/main.c    **** 
 263:Src/main.c    ****     /**Configure the ADC multi-mode 
 264:Src/main.c    ****     */
 265:Src/main.c    ****   multimode.Mode = ADC_MODE_INDEPENDENT;
 266:Src/main.c    ****   if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 267:Src/main.c    ****   {
 268:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 269:Src/main.c    ****   }
 270:Src/main.c    **** 
 271:Src/main.c    ****     /**Configure Regular Channel 
 272:Src/main.c    ****     */
 273:Src/main.c    ****   sConfig.Channel = ADC_CHANNEL_1;
 274:Src/main.c    ****   sConfig.Rank = 1;
 275:Src/main.c    ****   sConfig.SingleDiff = ADC_SINGLE_ENDED;
 276:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 277:Src/main.c    ****   sConfig.OffsetNumber = ADC_OFFSET_NONE;
 278:Src/main.c    ****   sConfig.Offset = 0;
 279:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 280:Src/main.c    ****   {
 281:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 282:Src/main.c    ****   }
 283:Src/main.c    **** 
 284:Src/main.c    **** }
 285:Src/main.c    **** 
 286:Src/main.c    **** /* TIM3 init function */
 287:Src/main.c    **** static void MX_TIM3_Init(void)
 288:Src/main.c    **** {
 289:Src/main.c    **** 
 290:Src/main.c    ****   TIM_MasterConfigTypeDef sMasterConfig;
 291:Src/main.c    ****   TIM_OC_InitTypeDef sConfigOC;
 292:Src/main.c    **** 
 293:Src/main.c    ****   htim3.Instance = TIM3;
 294:Src/main.c    ****   htim3.Init.Prescaler = 999;
 295:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 296:Src/main.c    ****   htim3.Init.Period = 639;
 297:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 298:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 299:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 300:Src/main.c    ****   {
 301:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 302:Src/main.c    ****   }
 303:Src/main.c    **** 
 304:Src/main.c    ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 305:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 306:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 307:Src/main.c    ****   {
 308:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 309:Src/main.c    ****   }
 310:Src/main.c    **** 
 311:Src/main.c    ****   sConfigOC.OCMode = TIM_OCMODE_PWM1;
 312:Src/main.c    ****   sConfigOC.Pulse = 319;
 313:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 314:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 315:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
ARM GAS  /tmp/ccYk2LVE.s 			page 7


 316:Src/main.c    ****   {
 317:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 318:Src/main.c    ****   }
 319:Src/main.c    **** 
 320:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 321:Src/main.c    ****   {
 322:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 323:Src/main.c    ****   }
 324:Src/main.c    **** 
 325:Src/main.c    ****   HAL_TIM_MspPostInit(&htim3);
 326:Src/main.c    **** 
 327:Src/main.c    **** }
 328:Src/main.c    **** 
 329:Src/main.c    **** /* USART2 init function */
 330:Src/main.c    **** static void MX_USART2_UART_Init(void)
 331:Src/main.c    **** {
 332:Src/main.c    **** 
 333:Src/main.c    ****   huart2.Instance = USART2;
 334:Src/main.c    ****   huart2.Init.BaudRate = 38400;
 335:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 336:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 337:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 338:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 339:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 340:Src/main.c    ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 341:Src/main.c    ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 342:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 343:Src/main.c    ****   {
 344:Src/main.c    ****     _Error_Handler(__FILE__, __LINE__);
 345:Src/main.c    ****   }
 346:Src/main.c    **** 
 347:Src/main.c    **** }
 348:Src/main.c    **** 
 349:Src/main.c    **** /** Configure pins as 
 350:Src/main.c    ****         * Analog 
 351:Src/main.c    ****         * Input 
 352:Src/main.c    ****         * Output
 353:Src/main.c    ****         * EVENT_OUT
 354:Src/main.c    ****         * EXTI
 355:Src/main.c    **** */
 356:Src/main.c    **** static void MX_GPIO_Init(void)
 357:Src/main.c    **** {
  29              		.loc 1 357 0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 32
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 20
  36              		.cfi_offset 4, -20
  37              		.cfi_offset 5, -16
  38              		.cfi_offset 6, -12
  39              		.cfi_offset 7, -8
  40              		.cfi_offset 14, -4
  41 0002 89B0     		sub	sp, sp, #36
  42              	.LCFI1:
  43              		.cfi_def_cfa_offset 56
ARM GAS  /tmp/ccYk2LVE.s 			page 8


  44              	.LBB2:
 358:Src/main.c    **** 
 359:Src/main.c    ****   GPIO_InitTypeDef GPIO_InitStruct;
 360:Src/main.c    **** 
 361:Src/main.c    ****   /* GPIO Ports Clock Enable */
 362:Src/main.c    ****   __HAL_RCC_GPIOF_CLK_ENABLE();
  45              		.loc 1 362 0
  46 0004 274B     		ldr	r3, .L3
  47 0006 5A69     		ldr	r2, [r3, #20]
  48 0008 42F48002 		orr	r2, r2, #4194304
  49 000c 5A61     		str	r2, [r3, #20]
  50 000e 5A69     		ldr	r2, [r3, #20]
  51 0010 02F48002 		and	r2, r2, #4194304
  52 0014 0092     		str	r2, [sp]
  53 0016 009A     		ldr	r2, [sp]
  54              	.LBE2:
  55              	.LBB3:
 363:Src/main.c    ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  56              		.loc 1 363 0
  57 0018 5A69     		ldr	r2, [r3, #20]
  58 001a 42F40032 		orr	r2, r2, #131072
  59 001e 5A61     		str	r2, [r3, #20]
  60 0020 5A69     		ldr	r2, [r3, #20]
  61 0022 02F40032 		and	r2, r2, #131072
  62 0026 0192     		str	r2, [sp, #4]
  63 0028 019A     		ldr	r2, [sp, #4]
  64              	.LBE3:
  65              	.LBB4:
 364:Src/main.c    ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  66              		.loc 1 364 0
  67 002a 5A69     		ldr	r2, [r3, #20]
  68 002c 42F48022 		orr	r2, r2, #262144
  69 0030 5A61     		str	r2, [r3, #20]
  70 0032 5B69     		ldr	r3, [r3, #20]
  71 0034 03F48023 		and	r3, r3, #262144
  72 0038 0293     		str	r3, [sp, #8]
  73 003a 029B     		ldr	r3, [sp, #8]
  74              	.LBE4:
 365:Src/main.c    **** 
 366:Src/main.c    ****   /*Configure GPIO pin Output Level */
 367:Src/main.c    ****   HAL_GPIO_WritePin(GPIOF, ain2_Pin|ain1_Pin, GPIO_PIN_RESET);
  75              		.loc 1 367 0
  76 003c 1A4F     		ldr	r7, .L3+4
  77 003e 0022     		movs	r2, #0
  78 0040 0321     		movs	r1, #3
  79 0042 3846     		mov	r0, r7
  80 0044 FFF7FEFF 		bl	HAL_GPIO_WritePin
  81              	.LVL0:
 368:Src/main.c    **** 
 369:Src/main.c    ****   /*Configure GPIO pin Output Level */
 370:Src/main.c    ****   HAL_GPIO_WritePin(GPIOA, stby_Pin|bin1_Pin, GPIO_PIN_RESET);
  82              		.loc 1 370 0
  83 0048 0022     		movs	r2, #0
  84 004a 4FF41061 		mov	r1, #2304
  85 004e 4FF09040 		mov	r0, #1207959552
  86 0052 FFF7FEFF 		bl	HAL_GPIO_WritePin
  87              	.LVL1:
ARM GAS  /tmp/ccYk2LVE.s 			page 9


 371:Src/main.c    **** 
 372:Src/main.c    ****   /*Configure GPIO pin Output Level */
 373:Src/main.c    ****   HAL_GPIO_WritePin(GPIOB, led_Pin|bin2_Pin, GPIO_PIN_RESET);
  88              		.loc 1 373 0
  89 0056 154E     		ldr	r6, .L3+8
  90 0058 0022     		movs	r2, #0
  91 005a 2821     		movs	r1, #40
  92 005c 3046     		mov	r0, r6
  93 005e FFF7FEFF 		bl	HAL_GPIO_WritePin
  94              	.LVL2:
 374:Src/main.c    **** 
 375:Src/main.c    ****   /*Configure GPIO pins : ain2_Pin ain1_Pin */
 376:Src/main.c    ****   GPIO_InitStruct.Pin = ain2_Pin|ain1_Pin;
  95              		.loc 1 376 0
  96 0062 0323     		movs	r3, #3
  97 0064 0393     		str	r3, [sp, #12]
 377:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  98              		.loc 1 377 0
  99 0066 0125     		movs	r5, #1
 100 0068 0495     		str	r5, [sp, #16]
 378:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 101              		.loc 1 378 0
 102 006a 0024     		movs	r4, #0
 103 006c 0594     		str	r4, [sp, #20]
 379:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 104              		.loc 1 379 0
 105 006e 0694     		str	r4, [sp, #24]
 380:Src/main.c    ****   HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 106              		.loc 1 380 0
 107 0070 03A9     		add	r1, sp, #12
 108 0072 3846     		mov	r0, r7
 109 0074 FFF7FEFF 		bl	HAL_GPIO_Init
 110              	.LVL3:
 381:Src/main.c    **** 
 382:Src/main.c    ****   /*Configure GPIO pins : stby_Pin bin1_Pin */
 383:Src/main.c    ****   GPIO_InitStruct.Pin = stby_Pin|bin1_Pin;
 111              		.loc 1 383 0
 112 0078 4FF41063 		mov	r3, #2304
 113 007c 0393     		str	r3, [sp, #12]
 384:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 114              		.loc 1 384 0
 115 007e 0495     		str	r5, [sp, #16]
 385:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 116              		.loc 1 385 0
 117 0080 0594     		str	r4, [sp, #20]
 386:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 118              		.loc 1 386 0
 119 0082 0694     		str	r4, [sp, #24]
 387:Src/main.c    ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 120              		.loc 1 387 0
 121 0084 03A9     		add	r1, sp, #12
 122 0086 4FF09040 		mov	r0, #1207959552
 123 008a FFF7FEFF 		bl	HAL_GPIO_Init
 124              	.LVL4:
 388:Src/main.c    **** 
 389:Src/main.c    ****   /*Configure GPIO pins : led_Pin bin2_Pin */
 390:Src/main.c    ****   GPIO_InitStruct.Pin = led_Pin|bin2_Pin;
ARM GAS  /tmp/ccYk2LVE.s 			page 10


 125              		.loc 1 390 0
 126 008e 2823     		movs	r3, #40
 127 0090 0393     		str	r3, [sp, #12]
 391:Src/main.c    ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 128              		.loc 1 391 0
 129 0092 0495     		str	r5, [sp, #16]
 392:Src/main.c    ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 130              		.loc 1 392 0
 131 0094 0594     		str	r4, [sp, #20]
 393:Src/main.c    ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 132              		.loc 1 393 0
 133 0096 0694     		str	r4, [sp, #24]
 394:Src/main.c    ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 134              		.loc 1 394 0
 135 0098 03A9     		add	r1, sp, #12
 136 009a 3046     		mov	r0, r6
 137 009c FFF7FEFF 		bl	HAL_GPIO_Init
 138              	.LVL5:
 395:Src/main.c    **** 
 396:Src/main.c    **** }
 139              		.loc 1 396 0
 140 00a0 09B0     		add	sp, sp, #36
 141              	.LCFI2:
 142              		.cfi_def_cfa_offset 20
 143              		@ sp needed
 144 00a2 F0BD     		pop	{r4, r5, r6, r7, pc}
 145              	.L4:
 146              		.align	2
 147              	.L3:
 148 00a4 00100240 		.word	1073876992
 149 00a8 00140048 		.word	1207964672
 150 00ac 00040048 		.word	1207960576
 151              		.cfi_endproc
 152              	.LFE134:
 154              		.section	.text.StartDefaultTask,"ax",%progbits
 155              		.align	2
 156              		.global	StartDefaultTask
 157              		.thumb
 158              		.thumb_func
 160              	StartDefaultTask:
 161              	.LFB135:
 397:Src/main.c    **** 
 398:Src/main.c    **** /* USER CODE BEGIN 4 */
 399:Src/main.c    **** 
 400:Src/main.c    **** /* USER CODE END 4 */
 401:Src/main.c    **** 
 402:Src/main.c    **** /* StartDefaultTask function */
 403:Src/main.c    **** void StartDefaultTask(void const * argument)
 404:Src/main.c    **** {
 162              		.loc 1 404 0
 163              		.cfi_startproc
 164              		@ Volatile: function does not return.
 165              		@ args = 0, pretend = 0, frame = 0
 166              		@ frame_needed = 0, uses_anonymous_args = 0
 167              	.LVL6:
 168 0000 08B5     		push	{r3, lr}
 169              	.LCFI3:
ARM GAS  /tmp/ccYk2LVE.s 			page 11


 170              		.cfi_def_cfa_offset 8
 171              		.cfi_offset 3, -8
 172              		.cfi_offset 14, -4
 173              	.LVL7:
 174              	.L6:
 405:Src/main.c    **** 
 406:Src/main.c    ****   /* USER CODE BEGIN 5 */
 407:Src/main.c    ****   /* Infinite loop */
 408:Src/main.c    ****   for(;;)
 409:Src/main.c    ****   {
 410:Src/main.c    ****     HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 175              		.loc 1 410 0 discriminator 1
 176 0002 0821     		movs	r1, #8
 177 0004 0348     		ldr	r0, .L8
 178 0006 FFF7FEFF 		bl	HAL_GPIO_TogglePin
 179              	.LVL8:
 411:Src/main.c    ****     osDelay(1000);
 180              		.loc 1 411 0 discriminator 1
 181 000a 4FF47A70 		mov	r0, #1000
 182 000e FFF7FEFF 		bl	osDelay
 183              	.LVL9:
 184 0012 F6E7     		b	.L6
 185              	.L9:
 186              		.align	2
 187              	.L8:
 188 0014 00040048 		.word	1207960576
 189              		.cfi_endproc
 190              	.LFE135:
 192              		.section	.text.motor,"ax",%progbits
 193              		.align	2
 194              		.weak	motor
 195              		.thumb
 196              		.thumb_func
 198              	motor:
 199              	.LFB136:
 412:Src/main.c    ****   }
 413:Src/main.c    ****   /* USER CODE END 5 */ 
 414:Src/main.c    **** }
 415:Src/main.c    **** 
 416:Src/main.c    **** /* motor function */
 417:Src/main.c    **** __weak void motor(void const * argument)
 418:Src/main.c    **** {
 200              		.loc 1 418 0
 201              		.cfi_startproc
 202              		@ args = 0, pretend = 0, frame = 0
 203              		@ frame_needed = 0, uses_anonymous_args = 0
 204              	.LVL10:
 205 0000 08B5     		push	{r3, lr}
 206              	.LCFI4:
 207              		.cfi_def_cfa_offset 8
 208              		.cfi_offset 3, -8
 209              		.cfi_offset 14, -4
 210              	.LVL11:
 211              	.L11:
 419:Src/main.c    ****   /* USER CODE BEGIN motor */
 420:Src/main.c    ****   /* Infinite loop */
 421:Src/main.c    ****   for(;;)
ARM GAS  /tmp/ccYk2LVE.s 			page 12


 422:Src/main.c    ****   {
 423:Src/main.c    ****     osDelay(1);
 212              		.loc 1 423 0 discriminator 1
 213 0002 0120     		movs	r0, #1
 214 0004 FFF7FEFF 		bl	osDelay
 215              	.LVL12:
 216 0008 FBE7     		b	.L11
 217              		.cfi_endproc
 218              	.LFE136:
 220 000a 00BF     		.section	.text.adcControl,"ax",%progbits
 221              		.align	2
 222              		.weak	adcControl
 223              		.thumb
 224              		.thumb_func
 226              	adcControl:
 227              	.LFB137:
 424:Src/main.c    ****   }
 425:Src/main.c    ****   /* USER CODE END motor */
 426:Src/main.c    **** }
 427:Src/main.c    **** 
 428:Src/main.c    **** /* adcControl function */
 429:Src/main.c    **** __weak void adcControl(void const * argument)
 430:Src/main.c    **** {
 228              		.loc 1 430 0
 229              		.cfi_startproc
 230              		@ args = 0, pretend = 0, frame = 0
 231              		@ frame_needed = 0, uses_anonymous_args = 0
 232              	.LVL13:
 233 0000 08B5     		push	{r3, lr}
 234              	.LCFI5:
 235              		.cfi_def_cfa_offset 8
 236              		.cfi_offset 3, -8
 237              		.cfi_offset 14, -4
 238              	.LVL14:
 239              	.L14:
 431:Src/main.c    ****   /* USER CODE BEGIN adcControl */
 432:Src/main.c    ****   /* Infinite loop */
 433:Src/main.c    ****   for(;;)
 434:Src/main.c    ****   {
 435:Src/main.c    ****     osDelay(1);
 240              		.loc 1 435 0 discriminator 1
 241 0002 0120     		movs	r0, #1
 242 0004 FFF7FEFF 		bl	osDelay
 243              	.LVL15:
 244 0008 FBE7     		b	.L14
 245              		.cfi_endproc
 246              	.LFE137:
 248 000a 00BF     		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
 249              		.align	2
 250              		.global	HAL_TIM_PeriodElapsedCallback
 251              		.thumb
 252              		.thumb_func
 254              	HAL_TIM_PeriodElapsedCallback:
 255              	.LFB138:
 436:Src/main.c    ****   }
 437:Src/main.c    ****   /* USER CODE END adcControl */
 438:Src/main.c    **** }
ARM GAS  /tmp/ccYk2LVE.s 			page 13


 439:Src/main.c    **** 
 440:Src/main.c    **** /**
 441:Src/main.c    ****   * @brief  Period elapsed callback in non blocking mode
 442:Src/main.c    ****   * @note   This function is called  when TIM15 interrupt took place, inside
 443:Src/main.c    ****   * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 444:Src/main.c    ****   * a global variable "uwTick" used as application time base.
 445:Src/main.c    ****   * @param  htim : TIM handle
 446:Src/main.c    ****   * @retval None
 447:Src/main.c    ****   */
 448:Src/main.c    **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 449:Src/main.c    **** {
 256              		.loc 1 449 0
 257              		.cfi_startproc
 258              		@ args = 0, pretend = 0, frame = 0
 259              		@ frame_needed = 0, uses_anonymous_args = 0
 260              	.LVL16:
 261 0000 08B5     		push	{r3, lr}
 262              	.LCFI6:
 263              		.cfi_def_cfa_offset 8
 264              		.cfi_offset 3, -8
 265              		.cfi_offset 14, -4
 450:Src/main.c    **** /* USER CODE BEGIN Callback 0 */
 451:Src/main.c    **** 
 452:Src/main.c    **** /* USER CODE END Callback 0 */
 453:Src/main.c    ****   if (htim->Instance == TIM15) {
 266              		.loc 1 453 0
 267 0002 0268     		ldr	r2, [r0]
 268 0004 024B     		ldr	r3, .L19
 269 0006 9A42     		cmp	r2, r3
 270 0008 01D1     		bne	.L16
 454:Src/main.c    ****     HAL_IncTick();
 271              		.loc 1 454 0
 272 000a FFF7FEFF 		bl	HAL_IncTick
 273              	.LVL17:
 274              	.L16:
 275 000e 08BD     		pop	{r3, pc}
 276              	.L20:
 277              		.align	2
 278              	.L19:
 279 0010 00400140 		.word	1073823744
 280              		.cfi_endproc
 281              	.LFE138:
 283              		.section	.text._Error_Handler,"ax",%progbits
 284              		.align	2
 285              		.global	_Error_Handler
 286              		.thumb
 287              		.thumb_func
 289              	_Error_Handler:
 290              	.LFB139:
 455:Src/main.c    ****   }
 456:Src/main.c    **** /* USER CODE BEGIN Callback 1 */
 457:Src/main.c    **** 
 458:Src/main.c    **** /* USER CODE END Callback 1 */
 459:Src/main.c    **** }
 460:Src/main.c    **** 
 461:Src/main.c    **** /**
 462:Src/main.c    ****   * @brief  This function is executed in case of error occurrence.
ARM GAS  /tmp/ccYk2LVE.s 			page 14


 463:Src/main.c    ****   * @param  None
 464:Src/main.c    ****   * @retval None
 465:Src/main.c    ****   */
 466:Src/main.c    **** void _Error_Handler(char * file, int line)
 467:Src/main.c    **** {
 291              		.loc 1 467 0
 292              		.cfi_startproc
 293              		@ Volatile: function does not return.
 294              		@ args = 0, pretend = 0, frame = 0
 295              		@ frame_needed = 0, uses_anonymous_args = 0
 296              		@ link register save eliminated.
 297              	.LVL18:
 298              	.L22:
 299 0000 FEE7     		b	.L22
 300              		.cfi_endproc
 301              	.LFE139:
 303 0002 00BF     		.section	.text.MX_TIM3_Init,"ax",%progbits
 304              		.align	2
 305              		.thumb
 306              		.thumb_func
 308              	MX_TIM3_Init:
 309              	.LFB132:
 288:Src/main.c    **** 
 310              		.loc 1 288 0
 311              		.cfi_startproc
 312              		@ args = 0, pretend = 0, frame = 40
 313              		@ frame_needed = 0, uses_anonymous_args = 0
 288:Src/main.c    **** 
 314              		.loc 1 288 0
 315 0000 00B5     		push	{lr}
 316              	.LCFI7:
 317              		.cfi_def_cfa_offset 4
 318              		.cfi_offset 14, -4
 319 0002 8BB0     		sub	sp, sp, #44
 320              	.LCFI8:
 321              		.cfi_def_cfa_offset 48
 293:Src/main.c    ****   htim3.Init.Prescaler = 999;
 322              		.loc 1 293 0
 323 0004 2248     		ldr	r0, .L29
 324 0006 234B     		ldr	r3, .L29+4
 325 0008 0360     		str	r3, [r0]
 294:Src/main.c    ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 326              		.loc 1 294 0
 327 000a 40F2E733 		movw	r3, #999
 328 000e 4360     		str	r3, [r0, #4]
 295:Src/main.c    ****   htim3.Init.Period = 639;
 329              		.loc 1 295 0
 330 0010 0023     		movs	r3, #0
 331 0012 8360     		str	r3, [r0, #8]
 296:Src/main.c    ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 332              		.loc 1 296 0
 333 0014 40F27F22 		movw	r2, #639
 334 0018 C260     		str	r2, [r0, #12]
 297:Src/main.c    ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 335              		.loc 1 297 0
 336 001a 0361     		str	r3, [r0, #16]
 298:Src/main.c    ****   if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
ARM GAS  /tmp/ccYk2LVE.s 			page 15


 337              		.loc 1 298 0
 338 001c 8361     		str	r3, [r0, #24]
 299:Src/main.c    ****   {
 339              		.loc 1 299 0
 340 001e FFF7FEFF 		bl	HAL_TIM_PWM_Init
 341              	.LVL19:
 342 0022 20B1     		cbz	r0, .L24
 301:Src/main.c    ****   }
 343              		.loc 1 301 0
 344 0024 40F22D11 		movw	r1, #301
 345 0028 1B48     		ldr	r0, .L29+8
 346 002a FFF7FEFF 		bl	_Error_Handler
 347              	.LVL20:
 348              	.L24:
 304:Src/main.c    ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 349              		.loc 1 304 0
 350 002e 0023     		movs	r3, #0
 351 0030 0793     		str	r3, [sp, #28]
 305:Src/main.c    ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 352              		.loc 1 305 0
 353 0032 0993     		str	r3, [sp, #36]
 306:Src/main.c    ****   {
 354              		.loc 1 306 0
 355 0034 07A9     		add	r1, sp, #28
 356 0036 1648     		ldr	r0, .L29
 357 0038 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 358              	.LVL21:
 359 003c 20B1     		cbz	r0, .L25
 308:Src/main.c    ****   }
 360              		.loc 1 308 0
 361 003e 4FF49A71 		mov	r1, #308
 362 0042 1548     		ldr	r0, .L29+8
 363 0044 FFF7FEFF 		bl	_Error_Handler
 364              	.LVL22:
 365              	.L25:
 311:Src/main.c    ****   sConfigOC.Pulse = 319;
 366              		.loc 1 311 0
 367 0048 6023     		movs	r3, #96
 368 004a 0093     		str	r3, [sp]
 312:Src/main.c    ****   sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 369              		.loc 1 312 0
 370 004c 40F23F13 		movw	r3, #319
 371 0050 0193     		str	r3, [sp, #4]
 313:Src/main.c    ****   sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 372              		.loc 1 313 0
 373 0052 0022     		movs	r2, #0
 374 0054 0292     		str	r2, [sp, #8]
 314:Src/main.c    ****   if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 375              		.loc 1 314 0
 376 0056 0492     		str	r2, [sp, #16]
 315:Src/main.c    ****   {
 377              		.loc 1 315 0
 378 0058 6946     		mov	r1, sp
 379 005a 0D48     		ldr	r0, .L29
 380 005c FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 381              	.LVL23:
 382 0060 20B1     		cbz	r0, .L26
ARM GAS  /tmp/ccYk2LVE.s 			page 16


 317:Src/main.c    ****   }
 383              		.loc 1 317 0
 384 0062 40F23D11 		movw	r1, #317
 385 0066 0C48     		ldr	r0, .L29+8
 386 0068 FFF7FEFF 		bl	_Error_Handler
 387              	.LVL24:
 388              	.L26:
 320:Src/main.c    ****   {
 389              		.loc 1 320 0
 390 006c 0C22     		movs	r2, #12
 391 006e 6946     		mov	r1, sp
 392 0070 0748     		ldr	r0, .L29
 393 0072 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 394              	.LVL25:
 395 0076 20B1     		cbz	r0, .L27
 322:Src/main.c    ****   }
 396              		.loc 1 322 0
 397 0078 4FF4A171 		mov	r1, #322
 398 007c 0648     		ldr	r0, .L29+8
 399 007e FFF7FEFF 		bl	_Error_Handler
 400              	.LVL26:
 401              	.L27:
 325:Src/main.c    **** 
 402              		.loc 1 325 0
 403 0082 0348     		ldr	r0, .L29
 404 0084 FFF7FEFF 		bl	HAL_TIM_MspPostInit
 405              	.LVL27:
 327:Src/main.c    **** 
 406              		.loc 1 327 0
 407 0088 0BB0     		add	sp, sp, #44
 408              	.LCFI9:
 409              		.cfi_def_cfa_offset 4
 410              		@ sp needed
 411 008a 5DF804FB 		ldr	pc, [sp], #4
 412              	.L30:
 413 008e 00BF     		.align	2
 414              	.L29:
 415 0090 00000000 		.word	htim3
 416 0094 00040040 		.word	1073742848
 417 0098 00000000 		.word	.LC6
 418              		.cfi_endproc
 419              	.LFE132:
 421              		.section	.text.MX_ADC1_Init,"ax",%progbits
 422              		.align	2
 423              		.thumb
 424              		.thumb_func
 426              	MX_ADC1_Init:
 427              	.LFB131:
 237:Src/main.c    **** 
 428              		.loc 1 237 0
 429              		.cfi_startproc
 430              		@ args = 0, pretend = 0, frame = 40
 431              		@ frame_needed = 0, uses_anonymous_args = 0
 432 0000 00B5     		push	{lr}
 433              	.LCFI10:
 434              		.cfi_def_cfa_offset 4
 435              		.cfi_offset 14, -4
ARM GAS  /tmp/ccYk2LVE.s 			page 17


 436 0002 8BB0     		sub	sp, sp, #44
 437              	.LCFI11:
 438              		.cfi_def_cfa_offset 48
 244:Src/main.c    ****   hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 439              		.loc 1 244 0
 440 0004 1F48     		ldr	r0, .L36
 441 0006 4FF0A043 		mov	r3, #1342177280
 442 000a 0360     		str	r3, [r0]
 245:Src/main.c    ****   hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 443              		.loc 1 245 0
 444 000c 0023     		movs	r3, #0
 445 000e 4360     		str	r3, [r0, #4]
 246:Src/main.c    ****   hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 446              		.loc 1 246 0
 447 0010 8360     		str	r3, [r0, #8]
 247:Src/main.c    ****   hadc1.Init.ContinuousConvMode = DISABLE;
 448              		.loc 1 247 0
 449 0012 0361     		str	r3, [r0, #16]
 248:Src/main.c    ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 450              		.loc 1 248 0
 451 0014 C361     		str	r3, [r0, #28]
 249:Src/main.c    ****   hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 452              		.loc 1 249 0
 453 0016 4362     		str	r3, [r0, #36]
 250:Src/main.c    ****   hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 454              		.loc 1 250 0
 455 0018 0363     		str	r3, [r0, #48]
 251:Src/main.c    ****   hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 456              		.loc 1 251 0
 457 001a 0122     		movs	r2, #1
 458 001c C262     		str	r2, [r0, #44]
 252:Src/main.c    ****   hadc1.Init.NbrOfConversion = 1;
 459              		.loc 1 252 0
 460 001e C360     		str	r3, [r0, #12]
 253:Src/main.c    ****   hadc1.Init.DMAContinuousRequests = DISABLE;
 461              		.loc 1 253 0
 462 0020 0262     		str	r2, [r0, #32]
 254:Src/main.c    ****   hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 463              		.loc 1 254 0
 464 0022 4363     		str	r3, [r0, #52]
 255:Src/main.c    ****   hadc1.Init.LowPowerAutoWait = DISABLE;
 465              		.loc 1 255 0
 466 0024 0422     		movs	r2, #4
 467 0026 4261     		str	r2, [r0, #20]
 256:Src/main.c    ****   hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 468              		.loc 1 256 0
 469 0028 8361     		str	r3, [r0, #24]
 257:Src/main.c    ****   if (HAL_ADC_Init(&hadc1) != HAL_OK)
 470              		.loc 1 257 0
 471 002a 8363     		str	r3, [r0, #56]
 258:Src/main.c    ****   {
 472              		.loc 1 258 0
 473 002c FFF7FEFF 		bl	HAL_ADC_Init
 474              	.LVL28:
 475 0030 20B1     		cbz	r0, .L32
 260:Src/main.c    ****   }
 476              		.loc 1 260 0
ARM GAS  /tmp/ccYk2LVE.s 			page 18


 477 0032 4FF48271 		mov	r1, #260
 478 0036 1448     		ldr	r0, .L36+4
 479 0038 FFF7FEFF 		bl	_Error_Handler
 480              	.LVL29:
 481              	.L32:
 265:Src/main.c    ****   if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 482              		.loc 1 265 0
 483 003c 0AA9     		add	r1, sp, #40
 484 003e 0023     		movs	r3, #0
 485 0040 41F80C3D 		str	r3, [r1, #-12]!
 266:Src/main.c    ****   {
 486              		.loc 1 266 0
 487 0044 0F48     		ldr	r0, .L36
 488 0046 FFF7FEFF 		bl	HAL_ADCEx_MultiModeConfigChannel
 489              	.LVL30:
 490 004a 20B1     		cbz	r0, .L33
 268:Src/main.c    ****   }
 491              		.loc 1 268 0
 492 004c 4FF48671 		mov	r1, #268
 493 0050 0D48     		ldr	r0, .L36+4
 494 0052 FFF7FEFF 		bl	_Error_Handler
 495              	.LVL31:
 496              	.L33:
 273:Src/main.c    ****   sConfig.Rank = 1;
 497              		.loc 1 273 0
 498 0056 0123     		movs	r3, #1
 499 0058 0193     		str	r3, [sp, #4]
 274:Src/main.c    ****   sConfig.SingleDiff = ADC_SINGLE_ENDED;
 500              		.loc 1 274 0
 501 005a 0293     		str	r3, [sp, #8]
 275:Src/main.c    ****   sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 502              		.loc 1 275 0
 503 005c 0023     		movs	r3, #0
 504 005e 0493     		str	r3, [sp, #16]
 276:Src/main.c    ****   sConfig.OffsetNumber = ADC_OFFSET_NONE;
 505              		.loc 1 276 0
 506 0060 0322     		movs	r2, #3
 507 0062 0392     		str	r2, [sp, #12]
 277:Src/main.c    ****   sConfig.Offset = 0;
 508              		.loc 1 277 0
 509 0064 0593     		str	r3, [sp, #20]
 278:Src/main.c    ****   if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 510              		.loc 1 278 0
 511 0066 0693     		str	r3, [sp, #24]
 279:Src/main.c    ****   {
 512              		.loc 1 279 0
 513 0068 01A9     		add	r1, sp, #4
 514 006a 0648     		ldr	r0, .L36
 515 006c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 516              	.LVL32:
 517 0070 20B1     		cbz	r0, .L31
 281:Src/main.c    ****   }
 518              		.loc 1 281 0
 519 0072 40F21911 		movw	r1, #281
 520 0076 0448     		ldr	r0, .L36+4
 521 0078 FFF7FEFF 		bl	_Error_Handler
 522              	.LVL33:
ARM GAS  /tmp/ccYk2LVE.s 			page 19


 523              	.L31:
 284:Src/main.c    **** 
 524              		.loc 1 284 0
 525 007c 0BB0     		add	sp, sp, #44
 526              	.LCFI12:
 527              		.cfi_def_cfa_offset 4
 528              		@ sp needed
 529 007e 5DF804FB 		ldr	pc, [sp], #4
 530              	.L37:
 531 0082 00BF     		.align	2
 532              	.L36:
 533 0084 00000000 		.word	hadc1
 534 0088 00000000 		.word	.LC6
 535              		.cfi_endproc
 536              	.LFE131:
 538              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 539              		.align	2
 540              		.thumb
 541              		.thumb_func
 543              	MX_USART2_UART_Init:
 544              	.LFB133:
 331:Src/main.c    **** 
 545              		.loc 1 331 0
 546              		.cfi_startproc
 547              		@ args = 0, pretend = 0, frame = 0
 548              		@ frame_needed = 0, uses_anonymous_args = 0
 549 0000 08B5     		push	{r3, lr}
 550              	.LCFI13:
 551              		.cfi_def_cfa_offset 8
 552              		.cfi_offset 3, -8
 553              		.cfi_offset 14, -4
 333:Src/main.c    ****   huart2.Init.BaudRate = 38400;
 554              		.loc 1 333 0
 555 0002 0C48     		ldr	r0, .L41
 556 0004 0C4B     		ldr	r3, .L41+4
 557 0006 0360     		str	r3, [r0]
 334:Src/main.c    ****   huart2.Init.StopBits = UART_STOPBITS_1;
 558              		.loc 1 334 0
 559 0008 4FF41643 		mov	r3, #38400
 560 000c 4360     		str	r3, [r0, #4]
 335:Src/main.c    ****   huart2.Init.Parity = UART_PARITY_NONE;
 561              		.loc 1 335 0
 562 000e 0023     		movs	r3, #0
 563 0010 C360     		str	r3, [r0, #12]
 336:Src/main.c    ****   huart2.Init.Mode = UART_MODE_TX_RX;
 564              		.loc 1 336 0
 565 0012 0361     		str	r3, [r0, #16]
 337:Src/main.c    ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 566              		.loc 1 337 0
 567 0014 0C22     		movs	r2, #12
 568 0016 4261     		str	r2, [r0, #20]
 338:Src/main.c    ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 569              		.loc 1 338 0
 570 0018 8361     		str	r3, [r0, #24]
 339:Src/main.c    ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 571              		.loc 1 339 0
 572 001a C361     		str	r3, [r0, #28]
ARM GAS  /tmp/ccYk2LVE.s 			page 20


 340:Src/main.c    ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 573              		.loc 1 340 0
 574 001c 0362     		str	r3, [r0, #32]
 341:Src/main.c    ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 575              		.loc 1 341 0
 576 001e 4362     		str	r3, [r0, #36]
 342:Src/main.c    ****   {
 577              		.loc 1 342 0
 578 0020 FFF7FEFF 		bl	HAL_UART_Init
 579              	.LVL34:
 580 0024 20B1     		cbz	r0, .L38
 344:Src/main.c    ****   }
 581              		.loc 1 344 0
 582 0026 4FF4AC71 		mov	r1, #344
 583 002a 0448     		ldr	r0, .L41+8
 584 002c FFF7FEFF 		bl	_Error_Handler
 585              	.LVL35:
 586              	.L38:
 587 0030 08BD     		pop	{r3, pc}
 588              	.L42:
 589 0032 00BF     		.align	2
 590              	.L41:
 591 0034 00000000 		.word	huart2
 592 0038 00440040 		.word	1073759232
 593 003c 00000000 		.word	.LC6
 594              		.cfi_endproc
 595              	.LFE133:
 597              		.section	.text.SystemClock_Config,"ax",%progbits
 598              		.align	2
 599              		.global	SystemClock_Config
 600              		.thumb
 601              		.thumb_func
 603              	SystemClock_Config:
 604              	.LFB130:
 183:Src/main.c    **** 
 605              		.loc 1 183 0
 606              		.cfi_startproc
 607              		@ args = 0, pretend = 0, frame = 88
 608              		@ frame_needed = 0, uses_anonymous_args = 0
 609 0000 00B5     		push	{lr}
 610              	.LCFI14:
 611              		.cfi_def_cfa_offset 4
 612              		.cfi_offset 14, -4
 613 0002 97B0     		sub	sp, sp, #92
 614              	.LCFI15:
 615              		.cfi_def_cfa_offset 96
 191:Src/main.c    ****   RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 616              		.loc 1 191 0
 617 0004 0223     		movs	r3, #2
 618 0006 0C93     		str	r3, [sp, #48]
 192:Src/main.c    ****   RCC_OscInitStruct.HSICalibrationValue = 16;
 619              		.loc 1 192 0
 620 0008 0122     		movs	r2, #1
 621 000a 1092     		str	r2, [sp, #64]
 193:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 622              		.loc 1 193 0
 623 000c 1022     		movs	r2, #16
ARM GAS  /tmp/ccYk2LVE.s 			page 21


 624 000e 1192     		str	r2, [sp, #68]
 194:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 625              		.loc 1 194 0
 626 0010 1393     		str	r3, [sp, #76]
 195:Src/main.c    ****   RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 627              		.loc 1 195 0
 628 0012 0023     		movs	r3, #0
 629 0014 1493     		str	r3, [sp, #80]
 196:Src/main.c    ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 630              		.loc 1 196 0
 631 0016 4FF46013 		mov	r3, #3670016
 632 001a 1593     		str	r3, [sp, #84]
 197:Src/main.c    ****   {
 633              		.loc 1 197 0
 634 001c 0CA8     		add	r0, sp, #48
 635 001e FFF7FEFF 		bl	HAL_RCC_OscConfig
 636              	.LVL36:
 637 0022 18B1     		cbz	r0, .L44
 199:Src/main.c    ****   }
 638              		.loc 1 199 0
 639 0024 C721     		movs	r1, #199
 640 0026 1B48     		ldr	r0, .L48
 641 0028 FFF7FEFF 		bl	_Error_Handler
 642              	.LVL37:
 643              	.L44:
 204:Src/main.c    ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 644              		.loc 1 204 0
 645 002c 0F23     		movs	r3, #15
 646 002e 0793     		str	r3, [sp, #28]
 206:Src/main.c    ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 647              		.loc 1 206 0
 648 0030 0221     		movs	r1, #2
 649 0032 0891     		str	r1, [sp, #32]
 207:Src/main.c    ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 650              		.loc 1 207 0
 651 0034 0023     		movs	r3, #0
 652 0036 0993     		str	r3, [sp, #36]
 208:Src/main.c    ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 653              		.loc 1 208 0
 654 0038 4FF48062 		mov	r2, #1024
 655 003c 0A92     		str	r2, [sp, #40]
 209:Src/main.c    **** 
 656              		.loc 1 209 0
 657 003e 0B93     		str	r3, [sp, #44]
 211:Src/main.c    ****   {
 658              		.loc 1 211 0
 659 0040 07A8     		add	r0, sp, #28
 660 0042 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 661              	.LVL38:
 662 0046 18B1     		cbz	r0, .L45
 213:Src/main.c    ****   }
 663              		.loc 1 213 0
 664 0048 D521     		movs	r1, #213
 665 004a 1248     		ldr	r0, .L48
 666 004c FFF7FEFF 		bl	_Error_Handler
 667              	.LVL39:
 668              	.L45:
ARM GAS  /tmp/ccYk2LVE.s 			page 22


 216:Src/main.c    ****   PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 669              		.loc 1 216 0
 670 0050 8023     		movs	r3, #128
 671 0052 0193     		str	r3, [sp, #4]
 217:Src/main.c    ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 672              		.loc 1 217 0
 673 0054 4FF48073 		mov	r3, #256
 674 0058 0593     		str	r3, [sp, #20]
 218:Src/main.c    ****   {
 675              		.loc 1 218 0
 676 005a 01A8     		add	r0, sp, #4
 677 005c FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 678              	.LVL40:
 679 0060 18B1     		cbz	r0, .L46
 220:Src/main.c    ****   }
 680              		.loc 1 220 0
 681 0062 DC21     		movs	r1, #220
 682 0064 0B48     		ldr	r0, .L48
 683 0066 FFF7FEFF 		bl	_Error_Handler
 684              	.LVL41:
 685              	.L46:
 225:Src/main.c    **** 
 686              		.loc 1 225 0
 687 006a FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 688              	.LVL42:
 689 006e 0A4B     		ldr	r3, .L48+4
 690 0070 A3FB0030 		umull	r3, r0, r3, r0
 691 0074 8009     		lsrs	r0, r0, #6
 692 0076 FFF7FEFF 		bl	HAL_SYSTICK_Config
 693              	.LVL43:
 229:Src/main.c    **** 
 694              		.loc 1 229 0
 695 007a 0420     		movs	r0, #4
 696 007c FFF7FEFF 		bl	HAL_SYSTICK_CLKSourceConfig
 697              	.LVL44:
 232:Src/main.c    **** }
 698              		.loc 1 232 0
 699 0080 0022     		movs	r2, #0
 700 0082 0F21     		movs	r1, #15
 701 0084 4FF0FF30 		mov	r0, #-1
 702 0088 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 703              	.LVL45:
 233:Src/main.c    **** 
 704              		.loc 1 233 0
 705 008c 17B0     		add	sp, sp, #92
 706              	.LCFI16:
 707              		.cfi_def_cfa_offset 4
 708              		@ sp needed
 709 008e 5DF804FB 		ldr	pc, [sp], #4
 710              	.L49:
 711 0092 00BF     		.align	2
 712              	.L48:
 713 0094 00000000 		.word	.LC6
 714 0098 D34D6210 		.word	274877907
 715              		.cfi_endproc
 716              	.LFE130:
 718              		.section	.text.main,"ax",%progbits
ARM GAS  /tmp/ccYk2LVE.s 			page 23


 719              		.align	2
 720              		.global	main
 721              		.thumb
 722              		.thumb_func
 724              	main:
 725              	.LFB129:
  96:Src/main.c    **** 
 726              		.loc 1 96 0
 727              		.cfi_startproc
 728              		@ args = 0, pretend = 0, frame = 64
 729              		@ frame_needed = 0, uses_anonymous_args = 0
 730 0000 70B5     		push	{r4, r5, r6, lr}
 731              	.LCFI17:
 732              		.cfi_def_cfa_offset 16
 733              		.cfi_offset 4, -16
 734              		.cfi_offset 5, -12
 735              		.cfi_offset 6, -8
 736              		.cfi_offset 14, -4
 737 0002 90B0     		sub	sp, sp, #64
 738              	.LCFI18:
 739              		.cfi_def_cfa_offset 80
 105:Src/main.c    **** 
 740              		.loc 1 105 0
 741 0004 FFF7FEFF 		bl	HAL_Init
 742              	.LVL46:
 112:Src/main.c    **** 
 743              		.loc 1 112 0
 744 0008 FFF7FEFF 		bl	SystemClock_Config
 745              	.LVL47:
 119:Src/main.c    ****   MX_TIM3_Init();
 746              		.loc 1 119 0
 747 000c FFF7FEFF 		bl	MX_GPIO_Init
 748              	.LVL48:
 120:Src/main.c    ****   MX_ADC1_Init();
 749              		.loc 1 120 0
 750 0010 FFF7FEFF 		bl	MX_TIM3_Init
 751              	.LVL49:
 121:Src/main.c    ****   MX_USART2_UART_Init();
 752              		.loc 1 121 0
 753 0014 FFF7FEFF 		bl	MX_ADC1_Init
 754              	.LVL50:
 122:Src/main.c    **** 
 755              		.loc 1 122 0
 756 0018 FFF7FEFF 		bl	MX_USART2_UART_Init
 757              	.LVL51:
 142:Src/main.c    ****   defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 758              		.loc 1 142 0
 759 001c 144C     		ldr	r4, .L53
 760 001e 0BAD     		add	r5, sp, #44
 761 0020 2646     		mov	r6, r4
 762 0022 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 763 0024 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 764 0026 3368     		ldr	r3, [r6]
 765 0028 2B60     		str	r3, [r5]
 143:Src/main.c    **** 
 766              		.loc 1 143 0
 767 002a 0021     		movs	r1, #0
ARM GAS  /tmp/ccYk2LVE.s 			page 24


 768 002c 0BA8     		add	r0, sp, #44
 769 002e FFF7FEFF 		bl	osThreadCreate
 770              	.LVL52:
 771 0032 104B     		ldr	r3, .L53+4
 772 0034 1860     		str	r0, [r3]
 146:Src/main.c    ****   motor_taskHandle = osThreadCreate(osThread(motor_task), NULL);
 773              		.loc 1 146 0
 774 0036 06AD     		add	r5, sp, #24
 775 0038 04F11406 		add	r6, r4, #20
 776 003c 0FCE     		ldmia	r6!, {r0, r1, r2, r3}
 777 003e 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 778 0040 3368     		ldr	r3, [r6]
 779 0042 2B60     		str	r3, [r5]
 147:Src/main.c    **** 
 780              		.loc 1 147 0
 781 0044 0021     		movs	r1, #0
 782 0046 06A8     		add	r0, sp, #24
 783 0048 FFF7FEFF 		bl	osThreadCreate
 784              	.LVL53:
 785 004c 0A4B     		ldr	r3, .L53+8
 786 004e 1860     		str	r0, [r3]
 150:Src/main.c    ****   adc_dma_taskHandle = osThreadCreate(osThread(adc_dma_task), NULL);
 787              		.loc 1 150 0
 788 0050 01AD     		add	r5, sp, #4
 789 0052 2834     		adds	r4, r4, #40
 790 0054 0FCC     		ldmia	r4!, {r0, r1, r2, r3}
 791 0056 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 792 0058 2368     		ldr	r3, [r4]
 793 005a 2B60     		str	r3, [r5]
 151:Src/main.c    **** 
 794              		.loc 1 151 0
 795 005c 0021     		movs	r1, #0
 796 005e 01A8     		add	r0, sp, #4
 797 0060 FFF7FEFF 		bl	osThreadCreate
 798              	.LVL54:
 799 0064 054B     		ldr	r3, .L53+12
 800 0066 1860     		str	r0, [r3]
 163:Src/main.c    ****   
 801              		.loc 1 163 0
 802 0068 FFF7FEFF 		bl	osKernelStart
 803              	.LVL55:
 804              	.L51:
 805 006c FEE7     		b	.L51
 806              	.L54:
 807 006e 00BF     		.align	2
 808              	.L53:
 809 0070 00000000 		.word	.LANCHOR0
 810 0074 00000000 		.word	defaultTaskHandle
 811 0078 00000000 		.word	motor_taskHandle
 812 007c 00000000 		.word	adc_dma_taskHandle
 813              		.cfi_endproc
 814              	.LFE129:
 816              		.comm	adc_dma_taskHandle,4,4
 817              		.comm	motor_taskHandle,4,4
 818              		.comm	defaultTaskHandle,4,4
 819              		.comm	huart2,112,4
 820              		.comm	htim3,64,4
ARM GAS  /tmp/ccYk2LVE.s 			page 25


 821              		.comm	hadc1,84,4
 822              		.section	.rodata
 823              		.align	2
 824              		.set	.LANCHOR0,. + 0
 825              	.LC7:
 826 0000 28000000 		.word	.LC0
 827 0004 00000000 		.word	StartDefaultTask
 828 0008 0000     		.short	0
 829 000a 0000     		.space	2
 830 000c 00000000 		.word	0
 831 0010 80000000 		.word	128
 832              	.LC8:
 833 0014 1C000000 		.word	.LC2
 834 0018 00000000 		.word	motor
 835 001c FDFF     		.short	-3
 836 001e 0000     		.space	2
 837 0020 00000000 		.word	0
 838 0024 00010000 		.word	256
 839              	.LC9:
 840 0028 0C000000 		.word	.LC4
 841 002c 00000000 		.word	adcControl
 842 0030 FDFF     		.short	-3
 843 0032 0000     		.space	2
 844 0034 00000000 		.word	0
 845 0038 00010000 		.word	256
 846              		.section	.rodata.str1.4,"aMS",%progbits,1
 847              		.align	2
 848              	.LC6:
 849 0000 5372632F 		.ascii	"Src/main.c\000"
 849      6D61696E 
 849      2E6300
 850 000b 00       		.space	1
 851              	.LC4:
 852 000c 6164635F 		.ascii	"adc_dma_task\000"
 852      646D615F 
 852      7461736B 
 852      00
 853 0019 000000   		.space	3
 854              	.LC2:
 855 001c 6D6F746F 		.ascii	"motor_task\000"
 855      725F7461 
 855      736B00
 856 0027 00       		.space	1
 857              	.LC0:
 858 0028 64656661 		.ascii	"defaultTask\000"
 858      756C7454 
 858      61736B00 
 859              		.text
 860              	.Letext0:
 861              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 862              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 863              		.file 4 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f303x8.h"
 864              		.file 5 "Drivers/CMSIS/Device/ST/STM32F3xx/Include/stm32f3xx.h"
 865              		.file 6 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_def.h"
 866              		.file 7 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc.h"
 867              		.file 8 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_rcc_ex.h"
 868              		.file 9 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_gpio.h"
ARM GAS  /tmp/ccYk2LVE.s 			page 26


 869              		.file 10 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_dma.h"
 870              		.file 11 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc_ex.h"
 871              		.file 12 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_adc.h"
 872              		.file 13 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim.h"
 873              		.file 14 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_tim_ex.h"
 874              		.file 15 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_uart.h"
 875              		.file 16 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 876              		.file 17 "Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS/cmsis_os.h"
 877              		.file 18 "Drivers/CMSIS/Include/core_cm4.h"
 878              		.file 19 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal.h"
 879              		.file 20 "Drivers/STM32F3xx_HAL_Driver/Inc/stm32f3xx_hal_cortex.h"
ARM GAS  /tmp/ccYk2LVE.s 			page 27


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccYk2LVE.s:22     .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/ccYk2LVE.s:26     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/ccYk2LVE.s:148    .text.MX_GPIO_Init:00000000000000a4 $d
     /tmp/ccYk2LVE.s:155    .text.StartDefaultTask:0000000000000000 $t
     /tmp/ccYk2LVE.s:160    .text.StartDefaultTask:0000000000000000 StartDefaultTask
     /tmp/ccYk2LVE.s:188    .text.StartDefaultTask:0000000000000014 $d
     /tmp/ccYk2LVE.s:193    .text.motor:0000000000000000 $t
     /tmp/ccYk2LVE.s:198    .text.motor:0000000000000000 motor
     /tmp/ccYk2LVE.s:221    .text.adcControl:0000000000000000 $t
     /tmp/ccYk2LVE.s:226    .text.adcControl:0000000000000000 adcControl
     /tmp/ccYk2LVE.s:249    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
     /tmp/ccYk2LVE.s:254    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
     /tmp/ccYk2LVE.s:279    .text.HAL_TIM_PeriodElapsedCallback:0000000000000010 $d
     /tmp/ccYk2LVE.s:284    .text._Error_Handler:0000000000000000 $t
     /tmp/ccYk2LVE.s:289    .text._Error_Handler:0000000000000000 _Error_Handler
     /tmp/ccYk2LVE.s:304    .text.MX_TIM3_Init:0000000000000000 $t
     /tmp/ccYk2LVE.s:308    .text.MX_TIM3_Init:0000000000000000 MX_TIM3_Init
     /tmp/ccYk2LVE.s:415    .text.MX_TIM3_Init:0000000000000090 $d
                            *COM*:0000000000000040 htim3
     /tmp/ccYk2LVE.s:422    .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/ccYk2LVE.s:426    .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/ccYk2LVE.s:533    .text.MX_ADC1_Init:0000000000000084 $d
                            *COM*:0000000000000054 hadc1
     /tmp/ccYk2LVE.s:539    .text.MX_USART2_UART_Init:0000000000000000 $t
     /tmp/ccYk2LVE.s:543    .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
     /tmp/ccYk2LVE.s:591    .text.MX_USART2_UART_Init:0000000000000034 $d
                            *COM*:0000000000000070 huart2
     /tmp/ccYk2LVE.s:598    .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccYk2LVE.s:603    .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccYk2LVE.s:713    .text.SystemClock_Config:0000000000000094 $d
     /tmp/ccYk2LVE.s:719    .text.main:0000000000000000 $t
     /tmp/ccYk2LVE.s:724    .text.main:0000000000000000 main
     /tmp/ccYk2LVE.s:809    .text.main:0000000000000070 $d
                            *COM*:0000000000000004 defaultTaskHandle
                            *COM*:0000000000000004 motor_taskHandle
                            *COM*:0000000000000004 adc_dma_taskHandle
     /tmp/ccYk2LVE.s:823    .rodata:0000000000000000 $d
     /tmp/ccYk2LVE.s:847    .rodata.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_GPIO_TogglePin
osDelay
HAL_IncTick
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIM_MspPostInit
HAL_ADC_Init
HAL_ADCEx_MultiModeConfigChannel
HAL_ADC_ConfigChannel
HAL_UART_Init
HAL_RCC_OscConfig
ARM GAS  /tmp/ccYk2LVE.s 			page 28


HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_RCC_GetHCLKFreq
HAL_SYSTICK_Config
HAL_SYSTICK_CLKSourceConfig
HAL_NVIC_SetPriority
HAL_Init
osThreadCreate
osKernelStart
